// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MapObject_sql sql.NullBool
var dummy_MapObject_time time.Duration
var dummy_MapObject_sort sort.Float64Slice

// MapObjectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model mapobjectAPI
type MapObjectAPI struct {
	gorm.Model

	models.MapObject_WOP

	// encoding of pointers
	MapObjectPointersEncoding MapObjectPointersEncoding
}

// MapObjectPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MapObjectPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MapObjectDB describes a mapobject in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model mapobjectDB
type MapObjectDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field mapobjectDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	MapObjectPointersEncoding
}

// MapObjectDBs arrays mapobjectDBs
// swagger:response mapobjectDBsResponse
type MapObjectDBs []MapObjectDB

// MapObjectDBResponse provides response
// swagger:response mapobjectDBResponse
type MapObjectDBResponse struct {
	MapObjectDB
}

// MapObjectWOP is a MapObject without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MapObjectWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var MapObject_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoMapObjectStruct struct {
	// stores MapObjectDB according to their gorm ID
	Map_MapObjectDBID_MapObjectDB map[uint]*MapObjectDB

	// stores MapObjectDB ID according to MapObject address
	Map_MapObjectPtr_MapObjectDBID map[*models.MapObject]uint

	// stores MapObject according to their gorm ID
	Map_MapObjectDBID_MapObjectPtr map[uint]*models.MapObject

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMapObject *BackRepoMapObjectStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMapObject.stage
	return
}

func (backRepoMapObject *BackRepoMapObjectStruct) GetDB() *gorm.DB {
	return backRepoMapObject.db
}

// GetMapObjectDBFromMapObjectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMapObject *BackRepoMapObjectStruct) GetMapObjectDBFromMapObjectPtr(mapobject *models.MapObject) (mapobjectDB *MapObjectDB) {
	id := backRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject]
	mapobjectDB = backRepoMapObject.Map_MapObjectDBID_MapObjectDB[id]
	return
}

// BackRepoMapObject.CommitPhaseOne commits all staged instances of MapObject to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMapObject *BackRepoMapObjectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for mapobject := range stage.MapObjects {
		backRepoMapObject.CommitPhaseOneInstance(mapobject)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, mapobject := range backRepoMapObject.Map_MapObjectDBID_MapObjectPtr {
		if _, ok := stage.MapObjects[mapobject]; !ok {
			backRepoMapObject.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMapObject.CommitDeleteInstance commits deletion of MapObject to the BackRepo
func (backRepoMapObject *BackRepoMapObjectStruct) CommitDeleteInstance(id uint) (Error error) {

	mapobject := backRepoMapObject.Map_MapObjectDBID_MapObjectPtr[id]

	// mapobject is not staged anymore, remove mapobjectDB
	mapobjectDB := backRepoMapObject.Map_MapObjectDBID_MapObjectDB[id]
	query := backRepoMapObject.db.Unscoped().Delete(&mapobjectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMapObject.Map_MapObjectPtr_MapObjectDBID, mapobject)
	delete(backRepoMapObject.Map_MapObjectDBID_MapObjectPtr, id)
	delete(backRepoMapObject.Map_MapObjectDBID_MapObjectDB, id)

	return
}

// BackRepoMapObject.CommitPhaseOneInstance commits mapobject staged instances of MapObject to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMapObject *BackRepoMapObjectStruct) CommitPhaseOneInstance(mapobject *models.MapObject) (Error error) {

	// check if the mapobject is not commited yet
	if _, ok := backRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject]; ok {
		return
	}

	// initiate mapobject
	var mapobjectDB MapObjectDB
	mapobjectDB.CopyBasicFieldsFromMapObject(mapobject)

	query := backRepoMapObject.db.Create(&mapobjectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject] = mapobjectDB.ID
	backRepoMapObject.Map_MapObjectDBID_MapObjectPtr[mapobjectDB.ID] = mapobject
	backRepoMapObject.Map_MapObjectDBID_MapObjectDB[mapobjectDB.ID] = &mapobjectDB

	return
}

// BackRepoMapObject.CommitPhaseTwo commits all staged instances of MapObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapObject *BackRepoMapObjectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, mapobject := range backRepoMapObject.Map_MapObjectDBID_MapObjectPtr {
		backRepoMapObject.CommitPhaseTwoInstance(backRepo, idx, mapobject)
	}

	return
}

// BackRepoMapObject.CommitPhaseTwoInstance commits {{structname }} of models.MapObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapObject *BackRepoMapObjectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, mapobject *models.MapObject) (Error error) {

	// fetch matching mapobjectDB
	if mapobjectDB, ok := backRepoMapObject.Map_MapObjectDBID_MapObjectDB[idx]; ok {

		mapobjectDB.CopyBasicFieldsFromMapObject(mapobject)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMapObject.db.Save(&mapobjectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MapObject intance %s", mapobject.Name))
		return err
	}

	return
}

// BackRepoMapObject.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMapObject *BackRepoMapObjectStruct) CheckoutPhaseOne() (Error error) {

	mapobjectDBArray := make([]MapObjectDB, 0)
	query := backRepoMapObject.db.Find(&mapobjectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	mapobjectInstancesToBeRemovedFromTheStage := make(map[*models.MapObject]any)
	for key, value := range backRepoMapObject.stage.MapObjects {
		mapobjectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, mapobjectDB := range mapobjectDBArray {
		backRepoMapObject.CheckoutPhaseOneInstance(&mapobjectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		mapobject, ok := backRepoMapObject.Map_MapObjectDBID_MapObjectPtr[mapobjectDB.ID]
		if ok {
			delete(mapobjectInstancesToBeRemovedFromTheStage, mapobject)
		}
	}

	// remove from stage and back repo's 3 maps all mapobjects that are not in the checkout
	for mapobject := range mapobjectInstancesToBeRemovedFromTheStage {
		mapobject.Unstage(backRepoMapObject.GetStage())

		// remove instance from the back repo 3 maps
		mapobjectID := backRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject]
		delete(backRepoMapObject.Map_MapObjectPtr_MapObjectDBID, mapobject)
		delete(backRepoMapObject.Map_MapObjectDBID_MapObjectDB, mapobjectID)
		delete(backRepoMapObject.Map_MapObjectDBID_MapObjectPtr, mapobjectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a mapobjectDB that has been found in the DB, updates the backRepo and stages the
// models version of the mapobjectDB
func (backRepoMapObject *BackRepoMapObjectStruct) CheckoutPhaseOneInstance(mapobjectDB *MapObjectDB) (Error error) {

	mapobject, ok := backRepoMapObject.Map_MapObjectDBID_MapObjectPtr[mapobjectDB.ID]
	if !ok {
		mapobject = new(models.MapObject)

		backRepoMapObject.Map_MapObjectDBID_MapObjectPtr[mapobjectDB.ID] = mapobject
		backRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject] = mapobjectDB.ID

		// append model store with the new element
		mapobject.Name = mapobjectDB.Name_Data.String
		mapobject.Stage(backRepoMapObject.GetStage())
	}
	mapobjectDB.CopyBasicFieldsToMapObject(mapobject)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	mapobject.Stage(backRepoMapObject.GetStage())

	// preserve pointer to mapobjectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MapObjectDBID_MapObjectDB)[mapobjectDB hold variable pointers
	mapobjectDB_Data := *mapobjectDB
	preservedPtrToMapObject := &mapobjectDB_Data
	backRepoMapObject.Map_MapObjectDBID_MapObjectDB[mapobjectDB.ID] = preservedPtrToMapObject

	return
}

// BackRepoMapObject.CheckoutPhaseTwo Checkouts all staged instances of MapObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapObject *BackRepoMapObjectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, mapobjectDB := range backRepoMapObject.Map_MapObjectDBID_MapObjectDB {
		backRepoMapObject.CheckoutPhaseTwoInstance(backRepo, mapobjectDB)
	}
	return
}

// BackRepoMapObject.CheckoutPhaseTwoInstance Checkouts staged instances of MapObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapObject *BackRepoMapObjectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, mapobjectDB *MapObjectDB) (Error error) {

	mapobject := backRepoMapObject.Map_MapObjectDBID_MapObjectPtr[mapobjectDB.ID]

	mapobjectDB.DecodePointers(backRepo, mapobject)

	return
}

func (mapobjectDB *MapObjectDB) DecodePointers(backRepo *BackRepoStruct, mapobject *models.MapObject) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMapObject allows commit of a single mapobject (if already staged)
func (backRepo *BackRepoStruct) CommitMapObject(mapobject *models.MapObject) {
	backRepo.BackRepoMapObject.CommitPhaseOneInstance(mapobject)
	if id, ok := backRepo.BackRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject]; ok {
		backRepo.BackRepoMapObject.CommitPhaseTwoInstance(backRepo, id, mapobject)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMapObject allows checkout of a single mapobject (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMapObject(mapobject *models.MapObject) {
	// check if the mapobject is staged
	if _, ok := backRepo.BackRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject]; ok {

		if id, ok := backRepo.BackRepoMapObject.Map_MapObjectPtr_MapObjectDBID[mapobject]; ok {
			var mapobjectDB MapObjectDB
			mapobjectDB.ID = id

			if err := backRepo.BackRepoMapObject.db.First(&mapobjectDB, id).Error; err != nil {
				log.Fatalln("CheckoutMapObject : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMapObject.CheckoutPhaseOneInstance(&mapobjectDB)
			backRepo.BackRepoMapObject.CheckoutPhaseTwoInstance(backRepo, &mapobjectDB)
		}
	}
}

// CopyBasicFieldsFromMapObject
func (mapobjectDB *MapObjectDB) CopyBasicFieldsFromMapObject(mapobject *models.MapObject) {
	// insertion point for fields commit

	mapobjectDB.Name_Data.String = mapobject.Name
	mapobjectDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMapObject_WOP
func (mapobjectDB *MapObjectDB) CopyBasicFieldsFromMapObject_WOP(mapobject *models.MapObject_WOP) {
	// insertion point for fields commit

	mapobjectDB.Name_Data.String = mapobject.Name
	mapobjectDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromMapObjectWOP
func (mapobjectDB *MapObjectDB) CopyBasicFieldsFromMapObjectWOP(mapobject *MapObjectWOP) {
	// insertion point for fields commit

	mapobjectDB.Name_Data.String = mapobject.Name
	mapobjectDB.Name_Data.Valid = true
}

// CopyBasicFieldsToMapObject
func (mapobjectDB *MapObjectDB) CopyBasicFieldsToMapObject(mapobject *models.MapObject) {
	// insertion point for checkout of basic fields (back repo to stage)
	mapobject.Name = mapobjectDB.Name_Data.String
}

// CopyBasicFieldsToMapObject_WOP
func (mapobjectDB *MapObjectDB) CopyBasicFieldsToMapObject_WOP(mapobject *models.MapObject_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	mapobject.Name = mapobjectDB.Name_Data.String
}

// CopyBasicFieldsToMapObjectWOP
func (mapobjectDB *MapObjectDB) CopyBasicFieldsToMapObjectWOP(mapobject *MapObjectWOP) {
	mapobject.ID = int(mapobjectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	mapobject.Name = mapobjectDB.Name_Data.String
}

// Backup generates a json file from a slice of all MapObjectDB instances in the backrepo
func (backRepoMapObject *BackRepoMapObjectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MapObjectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MapObjectDB, 0)
	for _, mapobjectDB := range backRepoMapObject.Map_MapObjectDBID_MapObjectDB {
		forBackup = append(forBackup, mapobjectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MapObject ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MapObject file", err.Error())
	}
}

// Backup generates a json file from a slice of all MapObjectDB instances in the backrepo
func (backRepoMapObject *BackRepoMapObjectStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MapObjectDB, 0)
	for _, mapobjectDB := range backRepoMapObject.Map_MapObjectDBID_MapObjectDB {
		forBackup = append(forBackup, mapobjectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MapObject")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MapObject_Fields, -1)
	for _, mapobjectDB := range forBackup {

		var mapobjectWOP MapObjectWOP
		mapobjectDB.CopyBasicFieldsToMapObjectWOP(&mapobjectWOP)

		row := sh.AddRow()
		row.WriteStruct(&mapobjectWOP, -1)
	}
}

// RestoreXL from the "MapObject" sheet all MapObjectDB instances
func (backRepoMapObject *BackRepoMapObjectStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMapObjectid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MapObject"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMapObject.rowVisitorMapObject)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMapObject *BackRepoMapObjectStruct) rowVisitorMapObject(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var mapobjectWOP MapObjectWOP
		row.ReadStruct(&mapobjectWOP)

		// add the unmarshalled struct to the stage
		mapobjectDB := new(MapObjectDB)
		mapobjectDB.CopyBasicFieldsFromMapObjectWOP(&mapobjectWOP)

		mapobjectDB_ID_atBackupTime := mapobjectDB.ID
		mapobjectDB.ID = 0
		query := backRepoMapObject.db.Create(mapobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMapObject.Map_MapObjectDBID_MapObjectDB[mapobjectDB.ID] = mapobjectDB
		BackRepoMapObjectid_atBckpTime_newID[mapobjectDB_ID_atBackupTime] = mapobjectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MapObjectDB.json" in dirPath that stores an array
// of MapObjectDB and stores it in the database
// the map BackRepoMapObjectid_atBckpTime_newID is updated accordingly
func (backRepoMapObject *BackRepoMapObjectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMapObjectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MapObjectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MapObject file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MapObjectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MapObjectDBID_MapObjectDB
	for _, mapobjectDB := range forRestore {

		mapobjectDB_ID_atBackupTime := mapobjectDB.ID
		mapobjectDB.ID = 0
		query := backRepoMapObject.db.Create(mapobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMapObject.Map_MapObjectDBID_MapObjectDB[mapobjectDB.ID] = mapobjectDB
		BackRepoMapObjectid_atBckpTime_newID[mapobjectDB_ID_atBackupTime] = mapobjectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MapObject file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MapObject>id_atBckpTime_newID
// to compute new index
func (backRepoMapObject *BackRepoMapObjectStruct) RestorePhaseTwo() {

	for _, mapobjectDB := range backRepoMapObject.Map_MapObjectDBID_MapObjectDB {

		// next line of code is to avert unused variable compilation error
		_ = mapobjectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMapObject.db.Model(mapobjectDB).Updates(*mapobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMapObject.ResetReversePointers commits all staged instances of MapObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapObject *BackRepoMapObjectStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, mapobject := range backRepoMapObject.Map_MapObjectDBID_MapObjectPtr {
		backRepoMapObject.ResetReversePointersInstance(backRepo, idx, mapobject)
	}

	return
}

func (backRepoMapObject *BackRepoMapObjectStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, mapobject *models.MapObject) (Error error) {

	// fetch matching mapobjectDB
	if mapobjectDB, ok := backRepoMapObject.Map_MapObjectDBID_MapObjectDB[idx]; ok {
		_ = mapobjectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMapObjectid_atBckpTime_newID map[uint]uint
