// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TheNuteTransition_sql sql.NullBool
var dummy_TheNuteTransition_time time.Duration
var dummy_TheNuteTransition_sort sort.Float64Slice

// TheNuteTransitionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model thenutetransitionAPI
type TheNuteTransitionAPI struct {
	gorm.Model

	models.TheNuteTransition_WOP

	// encoding of pointers
	TheNuteTransitionPointersEncoding TheNuteTransitionPointersEncoding
}

// TheNuteTransitionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TheNuteTransitionPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field StartState is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	StartStateID sql.NullInt64

	// field EndState is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EndStateID sql.NullInt64
}

// TheNuteTransitionDB describes a thenutetransition in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model thenutetransitionDB
type TheNuteTransitionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field thenutetransitionDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	TheNuteTransitionPointersEncoding
}

// TheNuteTransitionDBs arrays thenutetransitionDBs
// swagger:response thenutetransitionDBsResponse
type TheNuteTransitionDBs []TheNuteTransitionDB

// TheNuteTransitionDBResponse provides response
// swagger:response thenutetransitionDBResponse
type TheNuteTransitionDBResponse struct {
	TheNuteTransitionDB
}

// TheNuteTransitionWOP is a TheNuteTransition without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TheNuteTransitionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var TheNuteTransition_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoTheNuteTransitionStruct struct {
	// stores TheNuteTransitionDB according to their gorm ID
	Map_TheNuteTransitionDBID_TheNuteTransitionDB map[uint]*TheNuteTransitionDB

	// stores TheNuteTransitionDB ID according to TheNuteTransition address
	Map_TheNuteTransitionPtr_TheNuteTransitionDBID map[*models.TheNuteTransition]uint

	// stores TheNuteTransition according to their gorm ID
	Map_TheNuteTransitionDBID_TheNuteTransitionPtr map[uint]*models.TheNuteTransition

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTheNuteTransition.stage
	return
}

func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) GetDB() *gorm.DB {
	return backRepoTheNuteTransition.db
}

// GetTheNuteTransitionDBFromTheNuteTransitionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) GetTheNuteTransitionDBFromTheNuteTransitionPtr(thenutetransition *models.TheNuteTransition) (thenutetransitionDB *TheNuteTransitionDB) {
	id := backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition]
	thenutetransitionDB = backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[id]
	return
}

// BackRepoTheNuteTransition.CommitPhaseOne commits all staged instances of TheNuteTransition to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for thenutetransition := range stage.TheNuteTransitions {
		backRepoTheNuteTransition.CommitPhaseOneInstance(thenutetransition)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, thenutetransition := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr {
		if _, ok := stage.TheNuteTransitions[thenutetransition]; !ok {
			backRepoTheNuteTransition.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTheNuteTransition.CommitDeleteInstance commits deletion of TheNuteTransition to the BackRepo
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CommitDeleteInstance(id uint) (Error error) {

	thenutetransition := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[id]

	// thenutetransition is not staged anymore, remove thenutetransitionDB
	thenutetransitionDB := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[id]
	query := backRepoTheNuteTransition.db.Unscoped().Delete(&thenutetransitionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID, thenutetransition)
	delete(backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr, id)
	delete(backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB, id)

	return
}

// BackRepoTheNuteTransition.CommitPhaseOneInstance commits thenutetransition staged instances of TheNuteTransition to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CommitPhaseOneInstance(thenutetransition *models.TheNuteTransition) (Error error) {

	// check if the thenutetransition is not commited yet
	if _, ok := backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition]; ok {
		return
	}

	// initiate thenutetransition
	var thenutetransitionDB TheNuteTransitionDB
	thenutetransitionDB.CopyBasicFieldsFromTheNuteTransition(thenutetransition)

	query := backRepoTheNuteTransition.db.Create(&thenutetransitionDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition] = thenutetransitionDB.ID
	backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[thenutetransitionDB.ID] = thenutetransition
	backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[thenutetransitionDB.ID] = &thenutetransitionDB

	return
}

// BackRepoTheNuteTransition.CommitPhaseTwo commits all staged instances of TheNuteTransition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, thenutetransition := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr {
		backRepoTheNuteTransition.CommitPhaseTwoInstance(backRepo, idx, thenutetransition)
	}

	return
}

// BackRepoTheNuteTransition.CommitPhaseTwoInstance commits {{structname }} of models.TheNuteTransition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, thenutetransition *models.TheNuteTransition) (Error error) {

	// fetch matching thenutetransitionDB
	if thenutetransitionDB, ok := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[idx]; ok {

		thenutetransitionDB.CopyBasicFieldsFromTheNuteTransition(thenutetransition)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value thenutetransition.StartState translates to updating the thenutetransition.StartStateID
		thenutetransitionDB.StartStateID.Valid = true // allow for a 0 value (nil association)
		if thenutetransition.StartState != nil {
			if StartStateId, ok := backRepo.BackRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[thenutetransition.StartState]; ok {
				thenutetransitionDB.StartStateID.Int64 = int64(StartStateId)
				thenutetransitionDB.StartStateID.Valid = true
			}
		} else {
			thenutetransitionDB.StartStateID.Int64 = 0
			thenutetransitionDB.StartStateID.Valid = true
		}

		// commit pointer value thenutetransition.EndState translates to updating the thenutetransition.EndStateID
		thenutetransitionDB.EndStateID.Valid = true // allow for a 0 value (nil association)
		if thenutetransition.EndState != nil {
			if EndStateId, ok := backRepo.BackRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[thenutetransition.EndState]; ok {
				thenutetransitionDB.EndStateID.Int64 = int64(EndStateId)
				thenutetransitionDB.EndStateID.Valid = true
			}
		} else {
			thenutetransitionDB.EndStateID.Int64 = 0
			thenutetransitionDB.EndStateID.Valid = true
		}

		query := backRepoTheNuteTransition.db.Save(&thenutetransitionDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TheNuteTransition intance %s", thenutetransition.Name))
		return err
	}

	return
}

// BackRepoTheNuteTransition.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CheckoutPhaseOne() (Error error) {

	thenutetransitionDBArray := make([]TheNuteTransitionDB, 0)
	query := backRepoTheNuteTransition.db.Find(&thenutetransitionDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	thenutetransitionInstancesToBeRemovedFromTheStage := make(map[*models.TheNuteTransition]any)
	for key, value := range backRepoTheNuteTransition.stage.TheNuteTransitions {
		thenutetransitionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, thenutetransitionDB := range thenutetransitionDBArray {
		backRepoTheNuteTransition.CheckoutPhaseOneInstance(&thenutetransitionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		thenutetransition, ok := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[thenutetransitionDB.ID]
		if ok {
			delete(thenutetransitionInstancesToBeRemovedFromTheStage, thenutetransition)
		}
	}

	// remove from stage and back repo's 3 maps all thenutetransitions that are not in the checkout
	for thenutetransition := range thenutetransitionInstancesToBeRemovedFromTheStage {
		thenutetransition.Unstage(backRepoTheNuteTransition.GetStage())

		// remove instance from the back repo 3 maps
		thenutetransitionID := backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition]
		delete(backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID, thenutetransition)
		delete(backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB, thenutetransitionID)
		delete(backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr, thenutetransitionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a thenutetransitionDB that has been found in the DB, updates the backRepo and stages the
// models version of the thenutetransitionDB
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CheckoutPhaseOneInstance(thenutetransitionDB *TheNuteTransitionDB) (Error error) {

	thenutetransition, ok := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[thenutetransitionDB.ID]
	if !ok {
		thenutetransition = new(models.TheNuteTransition)

		backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[thenutetransitionDB.ID] = thenutetransition
		backRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition] = thenutetransitionDB.ID

		// append model store with the new element
		thenutetransition.Name = thenutetransitionDB.Name_Data.String
		thenutetransition.Stage(backRepoTheNuteTransition.GetStage())
	}
	thenutetransitionDB.CopyBasicFieldsToTheNuteTransition(thenutetransition)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	thenutetransition.Stage(backRepoTheNuteTransition.GetStage())

	// preserve pointer to thenutetransitionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TheNuteTransitionDBID_TheNuteTransitionDB)[thenutetransitionDB hold variable pointers
	thenutetransitionDB_Data := *thenutetransitionDB
	preservedPtrToTheNuteTransition := &thenutetransitionDB_Data
	backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[thenutetransitionDB.ID] = preservedPtrToTheNuteTransition

	return
}

// BackRepoTheNuteTransition.CheckoutPhaseTwo Checkouts all staged instances of TheNuteTransition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, thenutetransitionDB := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB {
		backRepoTheNuteTransition.CheckoutPhaseTwoInstance(backRepo, thenutetransitionDB)
	}
	return
}

// BackRepoTheNuteTransition.CheckoutPhaseTwoInstance Checkouts staged instances of TheNuteTransition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, thenutetransitionDB *TheNuteTransitionDB) (Error error) {

	thenutetransition := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[thenutetransitionDB.ID]

	thenutetransitionDB.DecodePointers(backRepo, thenutetransition)

	return
}

func (thenutetransitionDB *TheNuteTransitionDB) DecodePointers(backRepo *BackRepoStruct, thenutetransition *models.TheNuteTransition) {

	// insertion point for checkout of pointer encoding
	// StartState field
	thenutetransition.StartState = nil
	if thenutetransitionDB.StartStateID.Int64 != 0 {
		thenutetransition.StartState = backRepo.BackRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[uint(thenutetransitionDB.StartStateID.Int64)]
	}
	// EndState field
	thenutetransition.EndState = nil
	if thenutetransitionDB.EndStateID.Int64 != 0 {
		thenutetransition.EndState = backRepo.BackRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[uint(thenutetransitionDB.EndStateID.Int64)]
	}
	return
}

// CommitTheNuteTransition allows commit of a single thenutetransition (if already staged)
func (backRepo *BackRepoStruct) CommitTheNuteTransition(thenutetransition *models.TheNuteTransition) {
	backRepo.BackRepoTheNuteTransition.CommitPhaseOneInstance(thenutetransition)
	if id, ok := backRepo.BackRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition]; ok {
		backRepo.BackRepoTheNuteTransition.CommitPhaseTwoInstance(backRepo, id, thenutetransition)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTheNuteTransition allows checkout of a single thenutetransition (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTheNuteTransition(thenutetransition *models.TheNuteTransition) {
	// check if the thenutetransition is staged
	if _, ok := backRepo.BackRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition]; ok {

		if id, ok := backRepo.BackRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenutetransition]; ok {
			var thenutetransitionDB TheNuteTransitionDB
			thenutetransitionDB.ID = id

			if err := backRepo.BackRepoTheNuteTransition.db.First(&thenutetransitionDB, id).Error; err != nil {
				log.Fatalln("CheckoutTheNuteTransition : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTheNuteTransition.CheckoutPhaseOneInstance(&thenutetransitionDB)
			backRepo.BackRepoTheNuteTransition.CheckoutPhaseTwoInstance(backRepo, &thenutetransitionDB)
		}
	}
}

// CopyBasicFieldsFromTheNuteTransition
func (thenutetransitionDB *TheNuteTransitionDB) CopyBasicFieldsFromTheNuteTransition(thenutetransition *models.TheNuteTransition) {
	// insertion point for fields commit

	thenutetransitionDB.Name_Data.String = thenutetransition.Name
	thenutetransitionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTheNuteTransition_WOP
func (thenutetransitionDB *TheNuteTransitionDB) CopyBasicFieldsFromTheNuteTransition_WOP(thenutetransition *models.TheNuteTransition_WOP) {
	// insertion point for fields commit

	thenutetransitionDB.Name_Data.String = thenutetransition.Name
	thenutetransitionDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromTheNuteTransitionWOP
func (thenutetransitionDB *TheNuteTransitionDB) CopyBasicFieldsFromTheNuteTransitionWOP(thenutetransition *TheNuteTransitionWOP) {
	// insertion point for fields commit

	thenutetransitionDB.Name_Data.String = thenutetransition.Name
	thenutetransitionDB.Name_Data.Valid = true
}

// CopyBasicFieldsToTheNuteTransition
func (thenutetransitionDB *TheNuteTransitionDB) CopyBasicFieldsToTheNuteTransition(thenutetransition *models.TheNuteTransition) {
	// insertion point for checkout of basic fields (back repo to stage)
	thenutetransition.Name = thenutetransitionDB.Name_Data.String
}

// CopyBasicFieldsToTheNuteTransition_WOP
func (thenutetransitionDB *TheNuteTransitionDB) CopyBasicFieldsToTheNuteTransition_WOP(thenutetransition *models.TheNuteTransition_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	thenutetransition.Name = thenutetransitionDB.Name_Data.String
}

// CopyBasicFieldsToTheNuteTransitionWOP
func (thenutetransitionDB *TheNuteTransitionDB) CopyBasicFieldsToTheNuteTransitionWOP(thenutetransition *TheNuteTransitionWOP) {
	thenutetransition.ID = int(thenutetransitionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	thenutetransition.Name = thenutetransitionDB.Name_Data.String
}

// Backup generates a json file from a slice of all TheNuteTransitionDB instances in the backrepo
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TheNuteTransitionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TheNuteTransitionDB, 0)
	for _, thenutetransitionDB := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB {
		forBackup = append(forBackup, thenutetransitionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TheNuteTransition ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TheNuteTransition file", err.Error())
	}
}

// Backup generates a json file from a slice of all TheNuteTransitionDB instances in the backrepo
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TheNuteTransitionDB, 0)
	for _, thenutetransitionDB := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB {
		forBackup = append(forBackup, thenutetransitionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TheNuteTransition")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TheNuteTransition_Fields, -1)
	for _, thenutetransitionDB := range forBackup {

		var thenutetransitionWOP TheNuteTransitionWOP
		thenutetransitionDB.CopyBasicFieldsToTheNuteTransitionWOP(&thenutetransitionWOP)

		row := sh.AddRow()
		row.WriteStruct(&thenutetransitionWOP, -1)
	}
}

// RestoreXL from the "TheNuteTransition" sheet all TheNuteTransitionDB instances
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTheNuteTransitionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TheNuteTransition"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTheNuteTransition.rowVisitorTheNuteTransition)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) rowVisitorTheNuteTransition(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var thenutetransitionWOP TheNuteTransitionWOP
		row.ReadStruct(&thenutetransitionWOP)

		// add the unmarshalled struct to the stage
		thenutetransitionDB := new(TheNuteTransitionDB)
		thenutetransitionDB.CopyBasicFieldsFromTheNuteTransitionWOP(&thenutetransitionWOP)

		thenutetransitionDB_ID_atBackupTime := thenutetransitionDB.ID
		thenutetransitionDB.ID = 0
		query := backRepoTheNuteTransition.db.Create(thenutetransitionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[thenutetransitionDB.ID] = thenutetransitionDB
		BackRepoTheNuteTransitionid_atBckpTime_newID[thenutetransitionDB_ID_atBackupTime] = thenutetransitionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TheNuteTransitionDB.json" in dirPath that stores an array
// of TheNuteTransitionDB and stores it in the database
// the map BackRepoTheNuteTransitionid_atBckpTime_newID is updated accordingly
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTheNuteTransitionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TheNuteTransitionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TheNuteTransition file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TheNuteTransitionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TheNuteTransitionDBID_TheNuteTransitionDB
	for _, thenutetransitionDB := range forRestore {

		thenutetransitionDB_ID_atBackupTime := thenutetransitionDB.ID
		thenutetransitionDB.ID = 0
		query := backRepoTheNuteTransition.db.Create(thenutetransitionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[thenutetransitionDB.ID] = thenutetransitionDB
		BackRepoTheNuteTransitionid_atBckpTime_newID[thenutetransitionDB_ID_atBackupTime] = thenutetransitionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TheNuteTransition file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TheNuteTransition>id_atBckpTime_newID
// to compute new index
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) RestorePhaseTwo() {

	for _, thenutetransitionDB := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB {

		// next line of code is to avert unused variable compilation error
		_ = thenutetransitionDB

		// insertion point for reindexing pointers encoding
		// reindexing StartState field
		if thenutetransitionDB.StartStateID.Int64 != 0 {
			thenutetransitionDB.StartStateID.Int64 = int64(BackRepoKingArthurid_atBckpTime_newID[uint(thenutetransitionDB.StartStateID.Int64)])
			thenutetransitionDB.StartStateID.Valid = true
		}

		// reindexing EndState field
		if thenutetransitionDB.EndStateID.Int64 != 0 {
			thenutetransitionDB.EndStateID.Int64 = int64(BackRepoKingArthurid_atBckpTime_newID[uint(thenutetransitionDB.EndStateID.Int64)])
			thenutetransitionDB.EndStateID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTheNuteTransition.db.Model(thenutetransitionDB).Updates(*thenutetransitionDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTheNuteTransition.ResetReversePointers commits all staged instances of TheNuteTransition to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, thenutetransition := range backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr {
		backRepoTheNuteTransition.ResetReversePointersInstance(backRepo, idx, thenutetransition)
	}

	return
}

func (backRepoTheNuteTransition *BackRepoTheNuteTransitionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, thenutetransition *models.TheNuteTransition) (Error error) {

	// fetch matching thenutetransitionDB
	if thenutetransitionDB, ok := backRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionDB[idx]; ok {
		_ = thenutetransitionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTheNuteTransitionid_atBckpTime_newID map[uint]uint
