// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LancelotAgregation_sql sql.NullBool
var dummy_LancelotAgregation_time time.Duration
var dummy_LancelotAgregation_sort sort.Float64Slice

// LancelotAgregationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lancelotagregationAPI
type LancelotAgregationAPI struct {
	gorm.Model

	models.LancelotAgregation_WOP

	// encoding of pointers
	LancelotAgregationPointersEncoding LancelotAgregationPointersEncoding
}

// LancelotAgregationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LancelotAgregationPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ParameterUse is a slice of pointers to another Struct (optional or 0..1)
	ParameterUse IntSlice `gorm:"type:TEXT"`
}

// LancelotAgregationDB describes a lancelotagregation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lancelotagregationDB
type LancelotAgregationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field lancelotagregationDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	LancelotAgregationPointersEncoding
}

// LancelotAgregationDBs arrays lancelotagregationDBs
// swagger:response lancelotagregationDBsResponse
type LancelotAgregationDBs []LancelotAgregationDB

// LancelotAgregationDBResponse provides response
// swagger:response lancelotagregationDBResponse
type LancelotAgregationDBResponse struct {
	LancelotAgregationDB
}

// LancelotAgregationWOP is a LancelotAgregation without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LancelotAgregationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var LancelotAgregation_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLancelotAgregationStruct struct {
	// stores LancelotAgregationDB according to their gorm ID
	Map_LancelotAgregationDBID_LancelotAgregationDB map[uint]*LancelotAgregationDB

	// stores LancelotAgregationDB ID according to LancelotAgregation address
	Map_LancelotAgregationPtr_LancelotAgregationDBID map[*models.LancelotAgregation]uint

	// stores LancelotAgregation according to their gorm ID
	Map_LancelotAgregationDBID_LancelotAgregationPtr map[uint]*models.LancelotAgregation

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLancelotAgregation.stage
	return
}

func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) GetDB() *gorm.DB {
	return backRepoLancelotAgregation.db
}

// GetLancelotAgregationDBFromLancelotAgregationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) GetLancelotAgregationDBFromLancelotAgregationPtr(lancelotagregation *models.LancelotAgregation) (lancelotagregationDB *LancelotAgregationDB) {
	id := backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation]
	lancelotagregationDB = backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[id]
	return
}

// BackRepoLancelotAgregation.CommitPhaseOne commits all staged instances of LancelotAgregation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for lancelotagregation := range stage.LancelotAgregations {
		backRepoLancelotAgregation.CommitPhaseOneInstance(lancelotagregation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, lancelotagregation := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr {
		if _, ok := stage.LancelotAgregations[lancelotagregation]; !ok {
			backRepoLancelotAgregation.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLancelotAgregation.CommitDeleteInstance commits deletion of LancelotAgregation to the BackRepo
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CommitDeleteInstance(id uint) (Error error) {

	lancelotagregation := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr[id]

	// lancelotagregation is not staged anymore, remove lancelotagregationDB
	lancelotagregationDB := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[id]
	query := backRepoLancelotAgregation.db.Unscoped().Delete(&lancelotagregationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID, lancelotagregation)
	delete(backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr, id)
	delete(backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB, id)

	return
}

// BackRepoLancelotAgregation.CommitPhaseOneInstance commits lancelotagregation staged instances of LancelotAgregation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CommitPhaseOneInstance(lancelotagregation *models.LancelotAgregation) (Error error) {

	// check if the lancelotagregation is not commited yet
	if _, ok := backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation]; ok {
		return
	}

	// initiate lancelotagregation
	var lancelotagregationDB LancelotAgregationDB
	lancelotagregationDB.CopyBasicFieldsFromLancelotAgregation(lancelotagregation)

	query := backRepoLancelotAgregation.db.Create(&lancelotagregationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation] = lancelotagregationDB.ID
	backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr[lancelotagregationDB.ID] = lancelotagregation
	backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[lancelotagregationDB.ID] = &lancelotagregationDB

	return
}

// BackRepoLancelotAgregation.CommitPhaseTwo commits all staged instances of LancelotAgregation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, lancelotagregation := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr {
		backRepoLancelotAgregation.CommitPhaseTwoInstance(backRepo, idx, lancelotagregation)
	}

	return
}

// BackRepoLancelotAgregation.CommitPhaseTwoInstance commits {{structname }} of models.LancelotAgregation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, lancelotagregation *models.LancelotAgregation) (Error error) {

	// fetch matching lancelotagregationDB
	if lancelotagregationDB, ok := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[idx]; ok {

		lancelotagregationDB.CopyBasicFieldsFromLancelotAgregation(lancelotagregation)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		lancelotagregationDB.LancelotAgregationPointersEncoding.ParameterUse = make([]int, 0)
		// 2. encode
		for _, knightwhosayniAssocEnd := range lancelotagregation.ParameterUse {
			knightwhosayniAssocEnd_DB :=
				backRepo.BackRepoKnightWhoSayNi.GetKnightWhoSayNiDBFromKnightWhoSayNiPtr(knightwhosayniAssocEnd)

			// the stage might be inconsistant, meaning that the knightwhosayniAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if knightwhosayniAssocEnd_DB == nil {
				continue
			}

			lancelotagregationDB.LancelotAgregationPointersEncoding.ParameterUse =
				append(lancelotagregationDB.LancelotAgregationPointersEncoding.ParameterUse, int(knightwhosayniAssocEnd_DB.ID))
		}

		query := backRepoLancelotAgregation.db.Save(&lancelotagregationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LancelotAgregation intance %s", lancelotagregation.Name))
		return err
	}

	return
}

// BackRepoLancelotAgregation.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CheckoutPhaseOne() (Error error) {

	lancelotagregationDBArray := make([]LancelotAgregationDB, 0)
	query := backRepoLancelotAgregation.db.Find(&lancelotagregationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	lancelotagregationInstancesToBeRemovedFromTheStage := make(map[*models.LancelotAgregation]any)
	for key, value := range backRepoLancelotAgregation.stage.LancelotAgregations {
		lancelotagregationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, lancelotagregationDB := range lancelotagregationDBArray {
		backRepoLancelotAgregation.CheckoutPhaseOneInstance(&lancelotagregationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		lancelotagregation, ok := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr[lancelotagregationDB.ID]
		if ok {
			delete(lancelotagregationInstancesToBeRemovedFromTheStage, lancelotagregation)
		}
	}

	// remove from stage and back repo's 3 maps all lancelotagregations that are not in the checkout
	for lancelotagregation := range lancelotagregationInstancesToBeRemovedFromTheStage {
		lancelotagregation.Unstage(backRepoLancelotAgregation.GetStage())

		// remove instance from the back repo 3 maps
		lancelotagregationID := backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation]
		delete(backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID, lancelotagregation)
		delete(backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB, lancelotagregationID)
		delete(backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr, lancelotagregationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a lancelotagregationDB that has been found in the DB, updates the backRepo and stages the
// models version of the lancelotagregationDB
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CheckoutPhaseOneInstance(lancelotagregationDB *LancelotAgregationDB) (Error error) {

	lancelotagregation, ok := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr[lancelotagregationDB.ID]
	if !ok {
		lancelotagregation = new(models.LancelotAgregation)

		backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr[lancelotagregationDB.ID] = lancelotagregation
		backRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation] = lancelotagregationDB.ID

		// append model store with the new element
		lancelotagregation.Name = lancelotagregationDB.Name_Data.String
		lancelotagregation.Stage(backRepoLancelotAgregation.GetStage())
	}
	lancelotagregationDB.CopyBasicFieldsToLancelotAgregation(lancelotagregation)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	lancelotagregation.Stage(backRepoLancelotAgregation.GetStage())

	// preserve pointer to lancelotagregationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LancelotAgregationDBID_LancelotAgregationDB)[lancelotagregationDB hold variable pointers
	lancelotagregationDB_Data := *lancelotagregationDB
	preservedPtrToLancelotAgregation := &lancelotagregationDB_Data
	backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[lancelotagregationDB.ID] = preservedPtrToLancelotAgregation

	return
}

// BackRepoLancelotAgregation.CheckoutPhaseTwo Checkouts all staged instances of LancelotAgregation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lancelotagregationDB := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB {
		backRepoLancelotAgregation.CheckoutPhaseTwoInstance(backRepo, lancelotagregationDB)
	}
	return
}

// BackRepoLancelotAgregation.CheckoutPhaseTwoInstance Checkouts staged instances of LancelotAgregation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lancelotagregationDB *LancelotAgregationDB) (Error error) {

	lancelotagregation := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr[lancelotagregationDB.ID]

	lancelotagregationDB.DecodePointers(backRepo, lancelotagregation)

	return
}

func (lancelotagregationDB *LancelotAgregationDB) DecodePointers(backRepo *BackRepoStruct, lancelotagregation *models.LancelotAgregation) {

	// insertion point for checkout of pointer encoding
	// This loop redeem lancelotagregation.ParameterUse in the stage from the encode in the back repo
	// It parses all KnightWhoSayNiDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	lancelotagregation.ParameterUse = lancelotagregation.ParameterUse[:0]
	for _, _KnightWhoSayNiid := range lancelotagregationDB.LancelotAgregationPointersEncoding.ParameterUse {
		lancelotagregation.ParameterUse = append(lancelotagregation.ParameterUse, backRepo.BackRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[uint(_KnightWhoSayNiid)])
	}

	return
}

// CommitLancelotAgregation allows commit of a single lancelotagregation (if already staged)
func (backRepo *BackRepoStruct) CommitLancelotAgregation(lancelotagregation *models.LancelotAgregation) {
	backRepo.BackRepoLancelotAgregation.CommitPhaseOneInstance(lancelotagregation)
	if id, ok := backRepo.BackRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation]; ok {
		backRepo.BackRepoLancelotAgregation.CommitPhaseTwoInstance(backRepo, id, lancelotagregation)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLancelotAgregation allows checkout of a single lancelotagregation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLancelotAgregation(lancelotagregation *models.LancelotAgregation) {
	// check if the lancelotagregation is staged
	if _, ok := backRepo.BackRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation]; ok {

		if id, ok := backRepo.BackRepoLancelotAgregation.Map_LancelotAgregationPtr_LancelotAgregationDBID[lancelotagregation]; ok {
			var lancelotagregationDB LancelotAgregationDB
			lancelotagregationDB.ID = id

			if err := backRepo.BackRepoLancelotAgregation.db.First(&lancelotagregationDB, id).Error; err != nil {
				log.Fatalln("CheckoutLancelotAgregation : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLancelotAgregation.CheckoutPhaseOneInstance(&lancelotagregationDB)
			backRepo.BackRepoLancelotAgregation.CheckoutPhaseTwoInstance(backRepo, &lancelotagregationDB)
		}
	}
}

// CopyBasicFieldsFromLancelotAgregation
func (lancelotagregationDB *LancelotAgregationDB) CopyBasicFieldsFromLancelotAgregation(lancelotagregation *models.LancelotAgregation) {
	// insertion point for fields commit

	lancelotagregationDB.Name_Data.String = lancelotagregation.Name
	lancelotagregationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLancelotAgregation_WOP
func (lancelotagregationDB *LancelotAgregationDB) CopyBasicFieldsFromLancelotAgregation_WOP(lancelotagregation *models.LancelotAgregation_WOP) {
	// insertion point for fields commit

	lancelotagregationDB.Name_Data.String = lancelotagregation.Name
	lancelotagregationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLancelotAgregationWOP
func (lancelotagregationDB *LancelotAgregationDB) CopyBasicFieldsFromLancelotAgregationWOP(lancelotagregation *LancelotAgregationWOP) {
	// insertion point for fields commit

	lancelotagregationDB.Name_Data.String = lancelotagregation.Name
	lancelotagregationDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLancelotAgregation
func (lancelotagregationDB *LancelotAgregationDB) CopyBasicFieldsToLancelotAgregation(lancelotagregation *models.LancelotAgregation) {
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotagregation.Name = lancelotagregationDB.Name_Data.String
}

// CopyBasicFieldsToLancelotAgregation_WOP
func (lancelotagregationDB *LancelotAgregationDB) CopyBasicFieldsToLancelotAgregation_WOP(lancelotagregation *models.LancelotAgregation_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotagregation.Name = lancelotagregationDB.Name_Data.String
}

// CopyBasicFieldsToLancelotAgregationWOP
func (lancelotagregationDB *LancelotAgregationDB) CopyBasicFieldsToLancelotAgregationWOP(lancelotagregation *LancelotAgregationWOP) {
	lancelotagregation.ID = int(lancelotagregationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotagregation.Name = lancelotagregationDB.Name_Data.String
}

// Backup generates a json file from a slice of all LancelotAgregationDB instances in the backrepo
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LancelotAgregationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LancelotAgregationDB, 0)
	for _, lancelotagregationDB := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB {
		forBackup = append(forBackup, lancelotagregationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LancelotAgregation ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LancelotAgregation file", err.Error())
	}
}

// Backup generates a json file from a slice of all LancelotAgregationDB instances in the backrepo
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LancelotAgregationDB, 0)
	for _, lancelotagregationDB := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB {
		forBackup = append(forBackup, lancelotagregationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LancelotAgregation")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LancelotAgregation_Fields, -1)
	for _, lancelotagregationDB := range forBackup {

		var lancelotagregationWOP LancelotAgregationWOP
		lancelotagregationDB.CopyBasicFieldsToLancelotAgregationWOP(&lancelotagregationWOP)

		row := sh.AddRow()
		row.WriteStruct(&lancelotagregationWOP, -1)
	}
}

// RestoreXL from the "LancelotAgregation" sheet all LancelotAgregationDB instances
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLancelotAgregationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LancelotAgregation"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLancelotAgregation.rowVisitorLancelotAgregation)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) rowVisitorLancelotAgregation(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var lancelotagregationWOP LancelotAgregationWOP
		row.ReadStruct(&lancelotagregationWOP)

		// add the unmarshalled struct to the stage
		lancelotagregationDB := new(LancelotAgregationDB)
		lancelotagregationDB.CopyBasicFieldsFromLancelotAgregationWOP(&lancelotagregationWOP)

		lancelotagregationDB_ID_atBackupTime := lancelotagregationDB.ID
		lancelotagregationDB.ID = 0
		query := backRepoLancelotAgregation.db.Create(lancelotagregationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[lancelotagregationDB.ID] = lancelotagregationDB
		BackRepoLancelotAgregationid_atBckpTime_newID[lancelotagregationDB_ID_atBackupTime] = lancelotagregationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LancelotAgregationDB.json" in dirPath that stores an array
// of LancelotAgregationDB and stores it in the database
// the map BackRepoLancelotAgregationid_atBckpTime_newID is updated accordingly
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLancelotAgregationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LancelotAgregationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LancelotAgregation file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LancelotAgregationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LancelotAgregationDBID_LancelotAgregationDB
	for _, lancelotagregationDB := range forRestore {

		lancelotagregationDB_ID_atBackupTime := lancelotagregationDB.ID
		lancelotagregationDB.ID = 0
		query := backRepoLancelotAgregation.db.Create(lancelotagregationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[lancelotagregationDB.ID] = lancelotagregationDB
		BackRepoLancelotAgregationid_atBckpTime_newID[lancelotagregationDB_ID_atBackupTime] = lancelotagregationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LancelotAgregation file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LancelotAgregation>id_atBckpTime_newID
// to compute new index
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) RestorePhaseTwo() {

	for _, lancelotagregationDB := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB {

		// next line of code is to avert unused variable compilation error
		_ = lancelotagregationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLancelotAgregation.db.Model(lancelotagregationDB).Updates(*lancelotagregationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLancelotAgregation.ResetReversePointers commits all staged instances of LancelotAgregation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, lancelotagregation := range backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationPtr {
		backRepoLancelotAgregation.ResetReversePointersInstance(backRepo, idx, lancelotagregation)
	}

	return
}

func (backRepoLancelotAgregation *BackRepoLancelotAgregationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, lancelotagregation *models.LancelotAgregation) (Error error) {

	// fetch matching lancelotagregationDB
	if lancelotagregationDB, ok := backRepoLancelotAgregation.Map_LancelotAgregationDBID_LancelotAgregationDB[idx]; ok {
		_ = lancelotagregationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLancelotAgregationid_atBckpTime_newID map[uint]uint
