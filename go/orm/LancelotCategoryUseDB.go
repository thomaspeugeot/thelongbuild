// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LancelotCategoryUse_sql sql.NullBool
var dummy_LancelotCategoryUse_time time.Duration
var dummy_LancelotCategoryUse_sort sort.Float64Slice

// LancelotCategoryUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lancelotcategoryuseAPI
type LancelotCategoryUseAPI struct {
	gorm.Model

	models.LancelotCategoryUse_WOP

	// encoding of pointers
	LancelotCategoryUsePointersEncoding LancelotCategoryUsePointersEncoding
}

// LancelotCategoryUsePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LancelotCategoryUsePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ParameterCategory is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ParameterCategoryID sql.NullInt64
}

// LancelotCategoryUseDB describes a lancelotcategoryuse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lancelotcategoryuseDB
type LancelotCategoryUseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field lancelotcategoryuseDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	LancelotCategoryUsePointersEncoding
}

// LancelotCategoryUseDBs arrays lancelotcategoryuseDBs
// swagger:response lancelotcategoryuseDBsResponse
type LancelotCategoryUseDBs []LancelotCategoryUseDB

// LancelotCategoryUseDBResponse provides response
// swagger:response lancelotcategoryuseDBResponse
type LancelotCategoryUseDBResponse struct {
	LancelotCategoryUseDB
}

// LancelotCategoryUseWOP is a LancelotCategoryUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LancelotCategoryUseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var LancelotCategoryUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLancelotCategoryUseStruct struct {
	// stores LancelotCategoryUseDB according to their gorm ID
	Map_LancelotCategoryUseDBID_LancelotCategoryUseDB map[uint]*LancelotCategoryUseDB

	// stores LancelotCategoryUseDB ID according to LancelotCategoryUse address
	Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID map[*models.LancelotCategoryUse]uint

	// stores LancelotCategoryUse according to their gorm ID
	Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr map[uint]*models.LancelotCategoryUse

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLancelotCategoryUse.stage
	return
}

func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) GetDB() *gorm.DB {
	return backRepoLancelotCategoryUse.db
}

// GetLancelotCategoryUseDBFromLancelotCategoryUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) GetLancelotCategoryUseDBFromLancelotCategoryUsePtr(lancelotcategoryuse *models.LancelotCategoryUse) (lancelotcategoryuseDB *LancelotCategoryUseDB) {
	id := backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse]
	lancelotcategoryuseDB = backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[id]
	return
}

// BackRepoLancelotCategoryUse.CommitPhaseOne commits all staged instances of LancelotCategoryUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for lancelotcategoryuse := range stage.LancelotCategoryUses {
		backRepoLancelotCategoryUse.CommitPhaseOneInstance(lancelotcategoryuse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, lancelotcategoryuse := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr {
		if _, ok := stage.LancelotCategoryUses[lancelotcategoryuse]; !ok {
			backRepoLancelotCategoryUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLancelotCategoryUse.CommitDeleteInstance commits deletion of LancelotCategoryUse to the BackRepo
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CommitDeleteInstance(id uint) (Error error) {

	lancelotcategoryuse := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr[id]

	// lancelotcategoryuse is not staged anymore, remove lancelotcategoryuseDB
	lancelotcategoryuseDB := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[id]
	query := backRepoLancelotCategoryUse.db.Unscoped().Delete(&lancelotcategoryuseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID, lancelotcategoryuse)
	delete(backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr, id)
	delete(backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB, id)

	return
}

// BackRepoLancelotCategoryUse.CommitPhaseOneInstance commits lancelotcategoryuse staged instances of LancelotCategoryUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CommitPhaseOneInstance(lancelotcategoryuse *models.LancelotCategoryUse) (Error error) {

	// check if the lancelotcategoryuse is not commited yet
	if _, ok := backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse]; ok {
		return
	}

	// initiate lancelotcategoryuse
	var lancelotcategoryuseDB LancelotCategoryUseDB
	lancelotcategoryuseDB.CopyBasicFieldsFromLancelotCategoryUse(lancelotcategoryuse)

	query := backRepoLancelotCategoryUse.db.Create(&lancelotcategoryuseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse] = lancelotcategoryuseDB.ID
	backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr[lancelotcategoryuseDB.ID] = lancelotcategoryuse
	backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[lancelotcategoryuseDB.ID] = &lancelotcategoryuseDB

	return
}

// BackRepoLancelotCategoryUse.CommitPhaseTwo commits all staged instances of LancelotCategoryUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, lancelotcategoryuse := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr {
		backRepoLancelotCategoryUse.CommitPhaseTwoInstance(backRepo, idx, lancelotcategoryuse)
	}

	return
}

// BackRepoLancelotCategoryUse.CommitPhaseTwoInstance commits {{structname }} of models.LancelotCategoryUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, lancelotcategoryuse *models.LancelotCategoryUse) (Error error) {

	// fetch matching lancelotcategoryuseDB
	if lancelotcategoryuseDB, ok := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[idx]; ok {

		lancelotcategoryuseDB.CopyBasicFieldsFromLancelotCategoryUse(lancelotcategoryuse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value lancelotcategoryuse.ParameterCategory translates to updating the lancelotcategoryuse.ParameterCategoryID
		lancelotcategoryuseDB.ParameterCategoryID.Valid = true // allow for a 0 value (nil association)
		if lancelotcategoryuse.ParameterCategory != nil {
			if ParameterCategoryId, ok := backRepo.BackRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategoryuse.ParameterCategory]; ok {
				lancelotcategoryuseDB.ParameterCategoryID.Int64 = int64(ParameterCategoryId)
				lancelotcategoryuseDB.ParameterCategoryID.Valid = true
			}
		} else {
			lancelotcategoryuseDB.ParameterCategoryID.Int64 = 0
			lancelotcategoryuseDB.ParameterCategoryID.Valid = true
		}

		query := backRepoLancelotCategoryUse.db.Save(&lancelotcategoryuseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LancelotCategoryUse intance %s", lancelotcategoryuse.Name))
		return err
	}

	return
}

// BackRepoLancelotCategoryUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CheckoutPhaseOne() (Error error) {

	lancelotcategoryuseDBArray := make([]LancelotCategoryUseDB, 0)
	query := backRepoLancelotCategoryUse.db.Find(&lancelotcategoryuseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	lancelotcategoryuseInstancesToBeRemovedFromTheStage := make(map[*models.LancelotCategoryUse]any)
	for key, value := range backRepoLancelotCategoryUse.stage.LancelotCategoryUses {
		lancelotcategoryuseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, lancelotcategoryuseDB := range lancelotcategoryuseDBArray {
		backRepoLancelotCategoryUse.CheckoutPhaseOneInstance(&lancelotcategoryuseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		lancelotcategoryuse, ok := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr[lancelotcategoryuseDB.ID]
		if ok {
			delete(lancelotcategoryuseInstancesToBeRemovedFromTheStage, lancelotcategoryuse)
		}
	}

	// remove from stage and back repo's 3 maps all lancelotcategoryuses that are not in the checkout
	for lancelotcategoryuse := range lancelotcategoryuseInstancesToBeRemovedFromTheStage {
		lancelotcategoryuse.Unstage(backRepoLancelotCategoryUse.GetStage())

		// remove instance from the back repo 3 maps
		lancelotcategoryuseID := backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse]
		delete(backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID, lancelotcategoryuse)
		delete(backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB, lancelotcategoryuseID)
		delete(backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr, lancelotcategoryuseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a lancelotcategoryuseDB that has been found in the DB, updates the backRepo and stages the
// models version of the lancelotcategoryuseDB
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CheckoutPhaseOneInstance(lancelotcategoryuseDB *LancelotCategoryUseDB) (Error error) {

	lancelotcategoryuse, ok := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr[lancelotcategoryuseDB.ID]
	if !ok {
		lancelotcategoryuse = new(models.LancelotCategoryUse)

		backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr[lancelotcategoryuseDB.ID] = lancelotcategoryuse
		backRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse] = lancelotcategoryuseDB.ID

		// append model store with the new element
		lancelotcategoryuse.Name = lancelotcategoryuseDB.Name_Data.String
		lancelotcategoryuse.Stage(backRepoLancelotCategoryUse.GetStage())
	}
	lancelotcategoryuseDB.CopyBasicFieldsToLancelotCategoryUse(lancelotcategoryuse)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	lancelotcategoryuse.Stage(backRepoLancelotCategoryUse.GetStage())

	// preserve pointer to lancelotcategoryuseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LancelotCategoryUseDBID_LancelotCategoryUseDB)[lancelotcategoryuseDB hold variable pointers
	lancelotcategoryuseDB_Data := *lancelotcategoryuseDB
	preservedPtrToLancelotCategoryUse := &lancelotcategoryuseDB_Data
	backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[lancelotcategoryuseDB.ID] = preservedPtrToLancelotCategoryUse

	return
}

// BackRepoLancelotCategoryUse.CheckoutPhaseTwo Checkouts all staged instances of LancelotCategoryUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lancelotcategoryuseDB := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB {
		backRepoLancelotCategoryUse.CheckoutPhaseTwoInstance(backRepo, lancelotcategoryuseDB)
	}
	return
}

// BackRepoLancelotCategoryUse.CheckoutPhaseTwoInstance Checkouts staged instances of LancelotCategoryUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lancelotcategoryuseDB *LancelotCategoryUseDB) (Error error) {

	lancelotcategoryuse := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr[lancelotcategoryuseDB.ID]

	lancelotcategoryuseDB.DecodePointers(backRepo, lancelotcategoryuse)

	return
}

func (lancelotcategoryuseDB *LancelotCategoryUseDB) DecodePointers(backRepo *BackRepoStruct, lancelotcategoryuse *models.LancelotCategoryUse) {

	// insertion point for checkout of pointer encoding
	// ParameterCategory field
	lancelotcategoryuse.ParameterCategory = nil
	if lancelotcategoryuseDB.ParameterCategoryID.Int64 != 0 {
		lancelotcategoryuse.ParameterCategory = backRepo.BackRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[uint(lancelotcategoryuseDB.ParameterCategoryID.Int64)]
	}
	return
}

// CommitLancelotCategoryUse allows commit of a single lancelotcategoryuse (if already staged)
func (backRepo *BackRepoStruct) CommitLancelotCategoryUse(lancelotcategoryuse *models.LancelotCategoryUse) {
	backRepo.BackRepoLancelotCategoryUse.CommitPhaseOneInstance(lancelotcategoryuse)
	if id, ok := backRepo.BackRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse]; ok {
		backRepo.BackRepoLancelotCategoryUse.CommitPhaseTwoInstance(backRepo, id, lancelotcategoryuse)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLancelotCategoryUse allows checkout of a single lancelotcategoryuse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLancelotCategoryUse(lancelotcategoryuse *models.LancelotCategoryUse) {
	// check if the lancelotcategoryuse is staged
	if _, ok := backRepo.BackRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse]; ok {

		if id, ok := backRepo.BackRepoLancelotCategoryUse.Map_LancelotCategoryUsePtr_LancelotCategoryUseDBID[lancelotcategoryuse]; ok {
			var lancelotcategoryuseDB LancelotCategoryUseDB
			lancelotcategoryuseDB.ID = id

			if err := backRepo.BackRepoLancelotCategoryUse.db.First(&lancelotcategoryuseDB, id).Error; err != nil {
				log.Fatalln("CheckoutLancelotCategoryUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLancelotCategoryUse.CheckoutPhaseOneInstance(&lancelotcategoryuseDB)
			backRepo.BackRepoLancelotCategoryUse.CheckoutPhaseTwoInstance(backRepo, &lancelotcategoryuseDB)
		}
	}
}

// CopyBasicFieldsFromLancelotCategoryUse
func (lancelotcategoryuseDB *LancelotCategoryUseDB) CopyBasicFieldsFromLancelotCategoryUse(lancelotcategoryuse *models.LancelotCategoryUse) {
	// insertion point for fields commit

	lancelotcategoryuseDB.Name_Data.String = lancelotcategoryuse.Name
	lancelotcategoryuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLancelotCategoryUse_WOP
func (lancelotcategoryuseDB *LancelotCategoryUseDB) CopyBasicFieldsFromLancelotCategoryUse_WOP(lancelotcategoryuse *models.LancelotCategoryUse_WOP) {
	// insertion point for fields commit

	lancelotcategoryuseDB.Name_Data.String = lancelotcategoryuse.Name
	lancelotcategoryuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLancelotCategoryUseWOP
func (lancelotcategoryuseDB *LancelotCategoryUseDB) CopyBasicFieldsFromLancelotCategoryUseWOP(lancelotcategoryuse *LancelotCategoryUseWOP) {
	// insertion point for fields commit

	lancelotcategoryuseDB.Name_Data.String = lancelotcategoryuse.Name
	lancelotcategoryuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLancelotCategoryUse
func (lancelotcategoryuseDB *LancelotCategoryUseDB) CopyBasicFieldsToLancelotCategoryUse(lancelotcategoryuse *models.LancelotCategoryUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotcategoryuse.Name = lancelotcategoryuseDB.Name_Data.String
}

// CopyBasicFieldsToLancelotCategoryUse_WOP
func (lancelotcategoryuseDB *LancelotCategoryUseDB) CopyBasicFieldsToLancelotCategoryUse_WOP(lancelotcategoryuse *models.LancelotCategoryUse_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotcategoryuse.Name = lancelotcategoryuseDB.Name_Data.String
}

// CopyBasicFieldsToLancelotCategoryUseWOP
func (lancelotcategoryuseDB *LancelotCategoryUseDB) CopyBasicFieldsToLancelotCategoryUseWOP(lancelotcategoryuse *LancelotCategoryUseWOP) {
	lancelotcategoryuse.ID = int(lancelotcategoryuseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotcategoryuse.Name = lancelotcategoryuseDB.Name_Data.String
}

// Backup generates a json file from a slice of all LancelotCategoryUseDB instances in the backrepo
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LancelotCategoryUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LancelotCategoryUseDB, 0)
	for _, lancelotcategoryuseDB := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB {
		forBackup = append(forBackup, lancelotcategoryuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LancelotCategoryUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LancelotCategoryUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all LancelotCategoryUseDB instances in the backrepo
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LancelotCategoryUseDB, 0)
	for _, lancelotcategoryuseDB := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB {
		forBackup = append(forBackup, lancelotcategoryuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LancelotCategoryUse")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LancelotCategoryUse_Fields, -1)
	for _, lancelotcategoryuseDB := range forBackup {

		var lancelotcategoryuseWOP LancelotCategoryUseWOP
		lancelotcategoryuseDB.CopyBasicFieldsToLancelotCategoryUseWOP(&lancelotcategoryuseWOP)

		row := sh.AddRow()
		row.WriteStruct(&lancelotcategoryuseWOP, -1)
	}
}

// RestoreXL from the "LancelotCategoryUse" sheet all LancelotCategoryUseDB instances
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLancelotCategoryUseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LancelotCategoryUse"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLancelotCategoryUse.rowVisitorLancelotCategoryUse)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) rowVisitorLancelotCategoryUse(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var lancelotcategoryuseWOP LancelotCategoryUseWOP
		row.ReadStruct(&lancelotcategoryuseWOP)

		// add the unmarshalled struct to the stage
		lancelotcategoryuseDB := new(LancelotCategoryUseDB)
		lancelotcategoryuseDB.CopyBasicFieldsFromLancelotCategoryUseWOP(&lancelotcategoryuseWOP)

		lancelotcategoryuseDB_ID_atBackupTime := lancelotcategoryuseDB.ID
		lancelotcategoryuseDB.ID = 0
		query := backRepoLancelotCategoryUse.db.Create(lancelotcategoryuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[lancelotcategoryuseDB.ID] = lancelotcategoryuseDB
		BackRepoLancelotCategoryUseid_atBckpTime_newID[lancelotcategoryuseDB_ID_atBackupTime] = lancelotcategoryuseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LancelotCategoryUseDB.json" in dirPath that stores an array
// of LancelotCategoryUseDB and stores it in the database
// the map BackRepoLancelotCategoryUseid_atBckpTime_newID is updated accordingly
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLancelotCategoryUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LancelotCategoryUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LancelotCategoryUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LancelotCategoryUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LancelotCategoryUseDBID_LancelotCategoryUseDB
	for _, lancelotcategoryuseDB := range forRestore {

		lancelotcategoryuseDB_ID_atBackupTime := lancelotcategoryuseDB.ID
		lancelotcategoryuseDB.ID = 0
		query := backRepoLancelotCategoryUse.db.Create(lancelotcategoryuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[lancelotcategoryuseDB.ID] = lancelotcategoryuseDB
		BackRepoLancelotCategoryUseid_atBckpTime_newID[lancelotcategoryuseDB_ID_atBackupTime] = lancelotcategoryuseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LancelotCategoryUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LancelotCategoryUse>id_atBckpTime_newID
// to compute new index
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) RestorePhaseTwo() {

	for _, lancelotcategoryuseDB := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB {

		// next line of code is to avert unused variable compilation error
		_ = lancelotcategoryuseDB

		// insertion point for reindexing pointers encoding
		// reindexing ParameterCategory field
		if lancelotcategoryuseDB.ParameterCategoryID.Int64 != 0 {
			lancelotcategoryuseDB.ParameterCategoryID.Int64 = int64(BackRepoLancelotCategoryid_atBckpTime_newID[uint(lancelotcategoryuseDB.ParameterCategoryID.Int64)])
			lancelotcategoryuseDB.ParameterCategoryID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoLancelotCategoryUse.db.Model(lancelotcategoryuseDB).Updates(*lancelotcategoryuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLancelotCategoryUse.ResetReversePointers commits all staged instances of LancelotCategoryUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, lancelotcategoryuse := range backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUsePtr {
		backRepoLancelotCategoryUse.ResetReversePointersInstance(backRepo, idx, lancelotcategoryuse)
	}

	return
}

func (backRepoLancelotCategoryUse *BackRepoLancelotCategoryUseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, lancelotcategoryuse *models.LancelotCategoryUse) (Error error) {

	// fetch matching lancelotcategoryuseDB
	if lancelotcategoryuseDB, ok := backRepoLancelotCategoryUse.Map_LancelotCategoryUseDBID_LancelotCategoryUseDB[idx]; ok {
		_ = lancelotcategoryuseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLancelotCategoryUseid_atBckpTime_newID map[uint]uint
