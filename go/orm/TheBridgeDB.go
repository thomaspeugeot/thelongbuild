// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TheBridge_sql sql.NullBool
var dummy_TheBridge_time time.Duration
var dummy_TheBridge_sort sort.Float64Slice

// TheBridgeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model thebridgeAPI
type TheBridgeAPI struct {
	gorm.Model

	models.TheBridge_WOP

	// encoding of pointers
	TheBridgePointersEncoding TheBridgePointersEncoding
}

// TheBridgePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TheBridgePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field WhatIsYourPreferedColor is a slice of pointers to another Struct (optional or 0..1)
	WhatIsYourPreferedColor IntSlice `gorm:"type:TEXT"`

	// field GroupUse is a slice of pointers to another Struct (optional or 0..1)
	GroupUse IntSlice `gorm:"type:TEXT"`

	// field GeoObjectUse is a slice of pointers to another Struct (optional or 0..1)
	GeoObjectUse IntSlice `gorm:"type:TEXT"`

	// field MapUse is a slice of pointers to another Struct (optional or 0..1)
	MapUse IntSlice `gorm:"type:TEXT"`
}

// TheBridgeDB describes a thebridge in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model thebridgeDB
type TheBridgeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field thebridgeDB.Name
	Name_Data sql.NullString

	// Declation for basic field thebridgeDB.Description
	Description_Data sql.NullString

	// Declation for basic field thebridgeDB.IsNodeExpanded
	// provide the sql storage for the boolan
	IsNodeExpanded_Data sql.NullBool
	// encoding of pointers
	TheBridgePointersEncoding
}

// TheBridgeDBs arrays thebridgeDBs
// swagger:response thebridgeDBsResponse
type TheBridgeDBs []TheBridgeDB

// TheBridgeDBResponse provides response
// swagger:response thebridgeDBResponse
type TheBridgeDBResponse struct {
	TheBridgeDB
}

// TheBridgeWOP is a TheBridge without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TheBridgeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Description string `xlsx:"2"`

	IsNodeExpanded bool `xlsx:"3"`
	// insertion for WOP pointer fields
}

var TheBridge_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Description",
	"IsNodeExpanded",
}

type BackRepoTheBridgeStruct struct {
	// stores TheBridgeDB according to their gorm ID
	Map_TheBridgeDBID_TheBridgeDB map[uint]*TheBridgeDB

	// stores TheBridgeDB ID according to TheBridge address
	Map_TheBridgePtr_TheBridgeDBID map[*models.TheBridge]uint

	// stores TheBridge according to their gorm ID
	Map_TheBridgeDBID_TheBridgePtr map[uint]*models.TheBridge

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTheBridge *BackRepoTheBridgeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTheBridge.stage
	return
}

func (backRepoTheBridge *BackRepoTheBridgeStruct) GetDB() *gorm.DB {
	return backRepoTheBridge.db
}

// GetTheBridgeDBFromTheBridgePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTheBridge *BackRepoTheBridgeStruct) GetTheBridgeDBFromTheBridgePtr(thebridge *models.TheBridge) (thebridgeDB *TheBridgeDB) {
	id := backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge]
	thebridgeDB = backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[id]
	return
}

// BackRepoTheBridge.CommitPhaseOne commits all staged instances of TheBridge to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTheBridge *BackRepoTheBridgeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for thebridge := range stage.TheBridges {
		backRepoTheBridge.CommitPhaseOneInstance(thebridge)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, thebridge := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr {
		if _, ok := stage.TheBridges[thebridge]; !ok {
			backRepoTheBridge.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTheBridge.CommitDeleteInstance commits deletion of TheBridge to the BackRepo
func (backRepoTheBridge *BackRepoTheBridgeStruct) CommitDeleteInstance(id uint) (Error error) {

	thebridge := backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr[id]

	// thebridge is not staged anymore, remove thebridgeDB
	thebridgeDB := backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[id]
	query := backRepoTheBridge.db.Unscoped().Delete(&thebridgeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID, thebridge)
	delete(backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr, id)
	delete(backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB, id)

	return
}

// BackRepoTheBridge.CommitPhaseOneInstance commits thebridge staged instances of TheBridge to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTheBridge *BackRepoTheBridgeStruct) CommitPhaseOneInstance(thebridge *models.TheBridge) (Error error) {

	// check if the thebridge is not commited yet
	if _, ok := backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge]; ok {
		return
	}

	// initiate thebridge
	var thebridgeDB TheBridgeDB
	thebridgeDB.CopyBasicFieldsFromTheBridge(thebridge)

	query := backRepoTheBridge.db.Create(&thebridgeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge] = thebridgeDB.ID
	backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr[thebridgeDB.ID] = thebridge
	backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[thebridgeDB.ID] = &thebridgeDB

	return
}

// BackRepoTheBridge.CommitPhaseTwo commits all staged instances of TheBridge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheBridge *BackRepoTheBridgeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, thebridge := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr {
		backRepoTheBridge.CommitPhaseTwoInstance(backRepo, idx, thebridge)
	}

	return
}

// BackRepoTheBridge.CommitPhaseTwoInstance commits {{structname }} of models.TheBridge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheBridge *BackRepoTheBridgeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, thebridge *models.TheBridge) (Error error) {

	// fetch matching thebridgeDB
	if thebridgeDB, ok := backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[idx]; ok {

		thebridgeDB.CopyBasicFieldsFromTheBridge(thebridge)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		thebridgeDB.TheBridgePointersEncoding.WhatIsYourPreferedColor = make([]int, 0)
		// 2. encode
		for _, whatisyourpreferedcolorAssocEnd := range thebridge.WhatIsYourPreferedColor {
			whatisyourpreferedcolorAssocEnd_DB :=
				backRepo.BackRepoWhatIsYourPreferedColor.GetWhatIsYourPreferedColorDBFromWhatIsYourPreferedColorPtr(whatisyourpreferedcolorAssocEnd)

			// the stage might be inconsistant, meaning that the whatisyourpreferedcolorAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if whatisyourpreferedcolorAssocEnd_DB == nil {
				continue
			}

			thebridgeDB.TheBridgePointersEncoding.WhatIsYourPreferedColor =
				append(thebridgeDB.TheBridgePointersEncoding.WhatIsYourPreferedColor, int(whatisyourpreferedcolorAssocEnd_DB.ID))
		}

		// 1. reset
		thebridgeDB.TheBridgePointersEncoding.GroupUse = make([]int, 0)
		// 2. encode
		for _, groupuseAssocEnd := range thebridge.GroupUse {
			groupuseAssocEnd_DB :=
				backRepo.BackRepoGroupUse.GetGroupUseDBFromGroupUsePtr(groupuseAssocEnd)

			// the stage might be inconsistant, meaning that the groupuseAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupuseAssocEnd_DB == nil {
				continue
			}

			thebridgeDB.TheBridgePointersEncoding.GroupUse =
				append(thebridgeDB.TheBridgePointersEncoding.GroupUse, int(groupuseAssocEnd_DB.ID))
		}

		// 1. reset
		thebridgeDB.TheBridgePointersEncoding.GeoObjectUse = make([]int, 0)
		// 2. encode
		for _, geoobjectuseAssocEnd := range thebridge.GeoObjectUse {
			geoobjectuseAssocEnd_DB :=
				backRepo.BackRepoGeoObjectUse.GetGeoObjectUseDBFromGeoObjectUsePtr(geoobjectuseAssocEnd)

			// the stage might be inconsistant, meaning that the geoobjectuseAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if geoobjectuseAssocEnd_DB == nil {
				continue
			}

			thebridgeDB.TheBridgePointersEncoding.GeoObjectUse =
				append(thebridgeDB.TheBridgePointersEncoding.GeoObjectUse, int(geoobjectuseAssocEnd_DB.ID))
		}

		// 1. reset
		thebridgeDB.TheBridgePointersEncoding.MapUse = make([]int, 0)
		// 2. encode
		for _, mapobjectuseAssocEnd := range thebridge.MapUse {
			mapobjectuseAssocEnd_DB :=
				backRepo.BackRepoMapObjectUse.GetMapObjectUseDBFromMapObjectUsePtr(mapobjectuseAssocEnd)

			// the stage might be inconsistant, meaning that the mapobjectuseAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if mapobjectuseAssocEnd_DB == nil {
				continue
			}

			thebridgeDB.TheBridgePointersEncoding.MapUse =
				append(thebridgeDB.TheBridgePointersEncoding.MapUse, int(mapobjectuseAssocEnd_DB.ID))
		}

		query := backRepoTheBridge.db.Save(&thebridgeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TheBridge intance %s", thebridge.Name))
		return err
	}

	return
}

// BackRepoTheBridge.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTheBridge *BackRepoTheBridgeStruct) CheckoutPhaseOne() (Error error) {

	thebridgeDBArray := make([]TheBridgeDB, 0)
	query := backRepoTheBridge.db.Find(&thebridgeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	thebridgeInstancesToBeRemovedFromTheStage := make(map[*models.TheBridge]any)
	for key, value := range backRepoTheBridge.stage.TheBridges {
		thebridgeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, thebridgeDB := range thebridgeDBArray {
		backRepoTheBridge.CheckoutPhaseOneInstance(&thebridgeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		thebridge, ok := backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr[thebridgeDB.ID]
		if ok {
			delete(thebridgeInstancesToBeRemovedFromTheStage, thebridge)
		}
	}

	// remove from stage and back repo's 3 maps all thebridges that are not in the checkout
	for thebridge := range thebridgeInstancesToBeRemovedFromTheStage {
		thebridge.Unstage(backRepoTheBridge.GetStage())

		// remove instance from the back repo 3 maps
		thebridgeID := backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge]
		delete(backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID, thebridge)
		delete(backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB, thebridgeID)
		delete(backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr, thebridgeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a thebridgeDB that has been found in the DB, updates the backRepo and stages the
// models version of the thebridgeDB
func (backRepoTheBridge *BackRepoTheBridgeStruct) CheckoutPhaseOneInstance(thebridgeDB *TheBridgeDB) (Error error) {

	thebridge, ok := backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr[thebridgeDB.ID]
	if !ok {
		thebridge = new(models.TheBridge)

		backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr[thebridgeDB.ID] = thebridge
		backRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge] = thebridgeDB.ID

		// append model store with the new element
		thebridge.Name = thebridgeDB.Name_Data.String
		thebridge.Stage(backRepoTheBridge.GetStage())
	}
	thebridgeDB.CopyBasicFieldsToTheBridge(thebridge)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	thebridge.Stage(backRepoTheBridge.GetStage())

	// preserve pointer to thebridgeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TheBridgeDBID_TheBridgeDB)[thebridgeDB hold variable pointers
	thebridgeDB_Data := *thebridgeDB
	preservedPtrToTheBridge := &thebridgeDB_Data
	backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[thebridgeDB.ID] = preservedPtrToTheBridge

	return
}

// BackRepoTheBridge.CheckoutPhaseTwo Checkouts all staged instances of TheBridge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheBridge *BackRepoTheBridgeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, thebridgeDB := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB {
		backRepoTheBridge.CheckoutPhaseTwoInstance(backRepo, thebridgeDB)
	}
	return
}

// BackRepoTheBridge.CheckoutPhaseTwoInstance Checkouts staged instances of TheBridge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheBridge *BackRepoTheBridgeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, thebridgeDB *TheBridgeDB) (Error error) {

	thebridge := backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr[thebridgeDB.ID]

	thebridgeDB.DecodePointers(backRepo, thebridge)

	return
}

func (thebridgeDB *TheBridgeDB) DecodePointers(backRepo *BackRepoStruct, thebridge *models.TheBridge) {

	// insertion point for checkout of pointer encoding
	// This loop redeem thebridge.WhatIsYourPreferedColor in the stage from the encode in the back repo
	// It parses all WhatIsYourPreferedColorDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	thebridge.WhatIsYourPreferedColor = thebridge.WhatIsYourPreferedColor[:0]
	for _, _WhatIsYourPreferedColorid := range thebridgeDB.TheBridgePointersEncoding.WhatIsYourPreferedColor {
		thebridge.WhatIsYourPreferedColor = append(thebridge.WhatIsYourPreferedColor, backRepo.BackRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[uint(_WhatIsYourPreferedColorid)])
	}

	// This loop redeem thebridge.GroupUse in the stage from the encode in the back repo
	// It parses all GroupUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	thebridge.GroupUse = thebridge.GroupUse[:0]
	for _, _GroupUseid := range thebridgeDB.TheBridgePointersEncoding.GroupUse {
		thebridge.GroupUse = append(thebridge.GroupUse, backRepo.BackRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[uint(_GroupUseid)])
	}

	// This loop redeem thebridge.GeoObjectUse in the stage from the encode in the back repo
	// It parses all GeoObjectUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	thebridge.GeoObjectUse = thebridge.GeoObjectUse[:0]
	for _, _GeoObjectUseid := range thebridgeDB.TheBridgePointersEncoding.GeoObjectUse {
		thebridge.GeoObjectUse = append(thebridge.GeoObjectUse, backRepo.BackRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[uint(_GeoObjectUseid)])
	}

	// This loop redeem thebridge.MapUse in the stage from the encode in the back repo
	// It parses all MapObjectUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	thebridge.MapUse = thebridge.MapUse[:0]
	for _, _MapObjectUseid := range thebridgeDB.TheBridgePointersEncoding.MapUse {
		thebridge.MapUse = append(thebridge.MapUse, backRepo.BackRepoMapObjectUse.Map_MapObjectUseDBID_MapObjectUsePtr[uint(_MapObjectUseid)])
	}

	return
}

// CommitTheBridge allows commit of a single thebridge (if already staged)
func (backRepo *BackRepoStruct) CommitTheBridge(thebridge *models.TheBridge) {
	backRepo.BackRepoTheBridge.CommitPhaseOneInstance(thebridge)
	if id, ok := backRepo.BackRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge]; ok {
		backRepo.BackRepoTheBridge.CommitPhaseTwoInstance(backRepo, id, thebridge)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTheBridge allows checkout of a single thebridge (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTheBridge(thebridge *models.TheBridge) {
	// check if the thebridge is staged
	if _, ok := backRepo.BackRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge]; ok {

		if id, ok := backRepo.BackRepoTheBridge.Map_TheBridgePtr_TheBridgeDBID[thebridge]; ok {
			var thebridgeDB TheBridgeDB
			thebridgeDB.ID = id

			if err := backRepo.BackRepoTheBridge.db.First(&thebridgeDB, id).Error; err != nil {
				log.Fatalln("CheckoutTheBridge : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTheBridge.CheckoutPhaseOneInstance(&thebridgeDB)
			backRepo.BackRepoTheBridge.CheckoutPhaseTwoInstance(backRepo, &thebridgeDB)
		}
	}
}

// CopyBasicFieldsFromTheBridge
func (thebridgeDB *TheBridgeDB) CopyBasicFieldsFromTheBridge(thebridge *models.TheBridge) {
	// insertion point for fields commit

	thebridgeDB.Name_Data.String = thebridge.Name
	thebridgeDB.Name_Data.Valid = true

	thebridgeDB.Description_Data.String = thebridge.Description
	thebridgeDB.Description_Data.Valid = true

	thebridgeDB.IsNodeExpanded_Data.Bool = thebridge.IsNodeExpanded
	thebridgeDB.IsNodeExpanded_Data.Valid = true
}

// CopyBasicFieldsFromTheBridge_WOP
func (thebridgeDB *TheBridgeDB) CopyBasicFieldsFromTheBridge_WOP(thebridge *models.TheBridge_WOP) {
	// insertion point for fields commit

	thebridgeDB.Name_Data.String = thebridge.Name
	thebridgeDB.Name_Data.Valid = true

	thebridgeDB.Description_Data.String = thebridge.Description
	thebridgeDB.Description_Data.Valid = true

	thebridgeDB.IsNodeExpanded_Data.Bool = thebridge.IsNodeExpanded
	thebridgeDB.IsNodeExpanded_Data.Valid = true
}

// CopyBasicFieldsFromTheBridgeWOP
func (thebridgeDB *TheBridgeDB) CopyBasicFieldsFromTheBridgeWOP(thebridge *TheBridgeWOP) {
	// insertion point for fields commit

	thebridgeDB.Name_Data.String = thebridge.Name
	thebridgeDB.Name_Data.Valid = true

	thebridgeDB.Description_Data.String = thebridge.Description
	thebridgeDB.Description_Data.Valid = true

	thebridgeDB.IsNodeExpanded_Data.Bool = thebridge.IsNodeExpanded
	thebridgeDB.IsNodeExpanded_Data.Valid = true
}

// CopyBasicFieldsToTheBridge
func (thebridgeDB *TheBridgeDB) CopyBasicFieldsToTheBridge(thebridge *models.TheBridge) {
	// insertion point for checkout of basic fields (back repo to stage)
	thebridge.Name = thebridgeDB.Name_Data.String
	thebridge.Description = thebridgeDB.Description_Data.String
	thebridge.IsNodeExpanded = thebridgeDB.IsNodeExpanded_Data.Bool
}

// CopyBasicFieldsToTheBridge_WOP
func (thebridgeDB *TheBridgeDB) CopyBasicFieldsToTheBridge_WOP(thebridge *models.TheBridge_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	thebridge.Name = thebridgeDB.Name_Data.String
	thebridge.Description = thebridgeDB.Description_Data.String
	thebridge.IsNodeExpanded = thebridgeDB.IsNodeExpanded_Data.Bool
}

// CopyBasicFieldsToTheBridgeWOP
func (thebridgeDB *TheBridgeDB) CopyBasicFieldsToTheBridgeWOP(thebridge *TheBridgeWOP) {
	thebridge.ID = int(thebridgeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	thebridge.Name = thebridgeDB.Name_Data.String
	thebridge.Description = thebridgeDB.Description_Data.String
	thebridge.IsNodeExpanded = thebridgeDB.IsNodeExpanded_Data.Bool
}

// Backup generates a json file from a slice of all TheBridgeDB instances in the backrepo
func (backRepoTheBridge *BackRepoTheBridgeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TheBridgeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TheBridgeDB, 0)
	for _, thebridgeDB := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB {
		forBackup = append(forBackup, thebridgeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TheBridge ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TheBridge file", err.Error())
	}
}

// Backup generates a json file from a slice of all TheBridgeDB instances in the backrepo
func (backRepoTheBridge *BackRepoTheBridgeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TheBridgeDB, 0)
	for _, thebridgeDB := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB {
		forBackup = append(forBackup, thebridgeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TheBridge")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TheBridge_Fields, -1)
	for _, thebridgeDB := range forBackup {

		var thebridgeWOP TheBridgeWOP
		thebridgeDB.CopyBasicFieldsToTheBridgeWOP(&thebridgeWOP)

		row := sh.AddRow()
		row.WriteStruct(&thebridgeWOP, -1)
	}
}

// RestoreXL from the "TheBridge" sheet all TheBridgeDB instances
func (backRepoTheBridge *BackRepoTheBridgeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTheBridgeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TheBridge"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTheBridge.rowVisitorTheBridge)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTheBridge *BackRepoTheBridgeStruct) rowVisitorTheBridge(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var thebridgeWOP TheBridgeWOP
		row.ReadStruct(&thebridgeWOP)

		// add the unmarshalled struct to the stage
		thebridgeDB := new(TheBridgeDB)
		thebridgeDB.CopyBasicFieldsFromTheBridgeWOP(&thebridgeWOP)

		thebridgeDB_ID_atBackupTime := thebridgeDB.ID
		thebridgeDB.ID = 0
		query := backRepoTheBridge.db.Create(thebridgeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[thebridgeDB.ID] = thebridgeDB
		BackRepoTheBridgeid_atBckpTime_newID[thebridgeDB_ID_atBackupTime] = thebridgeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TheBridgeDB.json" in dirPath that stores an array
// of TheBridgeDB and stores it in the database
// the map BackRepoTheBridgeid_atBckpTime_newID is updated accordingly
func (backRepoTheBridge *BackRepoTheBridgeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTheBridgeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TheBridgeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TheBridge file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TheBridgeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TheBridgeDBID_TheBridgeDB
	for _, thebridgeDB := range forRestore {

		thebridgeDB_ID_atBackupTime := thebridgeDB.ID
		thebridgeDB.ID = 0
		query := backRepoTheBridge.db.Create(thebridgeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[thebridgeDB.ID] = thebridgeDB
		BackRepoTheBridgeid_atBckpTime_newID[thebridgeDB_ID_atBackupTime] = thebridgeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TheBridge file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TheBridge>id_atBckpTime_newID
// to compute new index
func (backRepoTheBridge *BackRepoTheBridgeStruct) RestorePhaseTwo() {

	for _, thebridgeDB := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB {

		// next line of code is to avert unused variable compilation error
		_ = thebridgeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoTheBridge.db.Model(thebridgeDB).Updates(*thebridgeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTheBridge.ResetReversePointers commits all staged instances of TheBridge to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheBridge *BackRepoTheBridgeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, thebridge := range backRepoTheBridge.Map_TheBridgeDBID_TheBridgePtr {
		backRepoTheBridge.ResetReversePointersInstance(backRepo, idx, thebridge)
	}

	return
}

func (backRepoTheBridge *BackRepoTheBridgeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, thebridge *models.TheBridge) (Error error) {

	// fetch matching thebridgeDB
	if thebridgeDB, ok := backRepoTheBridge.Map_TheBridgeDBID_TheBridgeDB[idx]; ok {
		_ = thebridgeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTheBridgeid_atBckpTime_newID map[uint]uint
