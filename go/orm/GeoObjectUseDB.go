// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GeoObjectUse_sql sql.NullBool
var dummy_GeoObjectUse_time time.Duration
var dummy_GeoObjectUse_sort sort.Float64Slice

// GeoObjectUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model geoobjectuseAPI
type GeoObjectUseAPI struct {
	gorm.Model

	models.GeoObjectUse_WOP

	// encoding of pointers
	GeoObjectUsePointersEncoding GeoObjectUsePointersEncoding
}

// GeoObjectUsePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GeoObjectUsePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field GeoObject is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GeoObjectID sql.NullInt64
}

// GeoObjectUseDB describes a geoobjectuse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model geoobjectuseDB
type GeoObjectUseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field geoobjectuseDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	GeoObjectUsePointersEncoding
}

// GeoObjectUseDBs arrays geoobjectuseDBs
// swagger:response geoobjectuseDBsResponse
type GeoObjectUseDBs []GeoObjectUseDB

// GeoObjectUseDBResponse provides response
// swagger:response geoobjectuseDBResponse
type GeoObjectUseDBResponse struct {
	GeoObjectUseDB
}

// GeoObjectUseWOP is a GeoObjectUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GeoObjectUseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var GeoObjectUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGeoObjectUseStruct struct {
	// stores GeoObjectUseDB according to their gorm ID
	Map_GeoObjectUseDBID_GeoObjectUseDB map[uint]*GeoObjectUseDB

	// stores GeoObjectUseDB ID according to GeoObjectUse address
	Map_GeoObjectUsePtr_GeoObjectUseDBID map[*models.GeoObjectUse]uint

	// stores GeoObjectUse according to their gorm ID
	Map_GeoObjectUseDBID_GeoObjectUsePtr map[uint]*models.GeoObjectUse

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGeoObjectUse.stage
	return
}

func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) GetDB() *gorm.DB {
	return backRepoGeoObjectUse.db
}

// GetGeoObjectUseDBFromGeoObjectUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) GetGeoObjectUseDBFromGeoObjectUsePtr(geoobjectuse *models.GeoObjectUse) (geoobjectuseDB *GeoObjectUseDB) {
	id := backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse]
	geoobjectuseDB = backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[id]
	return
}

// BackRepoGeoObjectUse.CommitPhaseOne commits all staged instances of GeoObjectUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for geoobjectuse := range stage.GeoObjectUses {
		backRepoGeoObjectUse.CommitPhaseOneInstance(geoobjectuse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, geoobjectuse := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr {
		if _, ok := stage.GeoObjectUses[geoobjectuse]; !ok {
			backRepoGeoObjectUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGeoObjectUse.CommitDeleteInstance commits deletion of GeoObjectUse to the BackRepo
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CommitDeleteInstance(id uint) (Error error) {

	geoobjectuse := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[id]

	// geoobjectuse is not staged anymore, remove geoobjectuseDB
	geoobjectuseDB := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[id]
	query := backRepoGeoObjectUse.db.Unscoped().Delete(&geoobjectuseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID, geoobjectuse)
	delete(backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr, id)
	delete(backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB, id)

	return
}

// BackRepoGeoObjectUse.CommitPhaseOneInstance commits geoobjectuse staged instances of GeoObjectUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CommitPhaseOneInstance(geoobjectuse *models.GeoObjectUse) (Error error) {

	// check if the geoobjectuse is not commited yet
	if _, ok := backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse]; ok {
		return
	}

	// initiate geoobjectuse
	var geoobjectuseDB GeoObjectUseDB
	geoobjectuseDB.CopyBasicFieldsFromGeoObjectUse(geoobjectuse)

	query := backRepoGeoObjectUse.db.Create(&geoobjectuseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse] = geoobjectuseDB.ID
	backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[geoobjectuseDB.ID] = geoobjectuse
	backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[geoobjectuseDB.ID] = &geoobjectuseDB

	return
}

// BackRepoGeoObjectUse.CommitPhaseTwo commits all staged instances of GeoObjectUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, geoobjectuse := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr {
		backRepoGeoObjectUse.CommitPhaseTwoInstance(backRepo, idx, geoobjectuse)
	}

	return
}

// BackRepoGeoObjectUse.CommitPhaseTwoInstance commits {{structname }} of models.GeoObjectUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, geoobjectuse *models.GeoObjectUse) (Error error) {

	// fetch matching geoobjectuseDB
	if geoobjectuseDB, ok := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[idx]; ok {

		geoobjectuseDB.CopyBasicFieldsFromGeoObjectUse(geoobjectuse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value geoobjectuse.GeoObject translates to updating the geoobjectuse.GeoObjectID
		geoobjectuseDB.GeoObjectID.Valid = true // allow for a 0 value (nil association)
		if geoobjectuse.GeoObject != nil {
			if GeoObjectId, ok := backRepo.BackRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobjectuse.GeoObject]; ok {
				geoobjectuseDB.GeoObjectID.Int64 = int64(GeoObjectId)
				geoobjectuseDB.GeoObjectID.Valid = true
			}
		} else {
			geoobjectuseDB.GeoObjectID.Int64 = 0
			geoobjectuseDB.GeoObjectID.Valid = true
		}

		query := backRepoGeoObjectUse.db.Save(&geoobjectuseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GeoObjectUse intance %s", geoobjectuse.Name))
		return err
	}

	return
}

// BackRepoGeoObjectUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CheckoutPhaseOne() (Error error) {

	geoobjectuseDBArray := make([]GeoObjectUseDB, 0)
	query := backRepoGeoObjectUse.db.Find(&geoobjectuseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	geoobjectuseInstancesToBeRemovedFromTheStage := make(map[*models.GeoObjectUse]any)
	for key, value := range backRepoGeoObjectUse.stage.GeoObjectUses {
		geoobjectuseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, geoobjectuseDB := range geoobjectuseDBArray {
		backRepoGeoObjectUse.CheckoutPhaseOneInstance(&geoobjectuseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		geoobjectuse, ok := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[geoobjectuseDB.ID]
		if ok {
			delete(geoobjectuseInstancesToBeRemovedFromTheStage, geoobjectuse)
		}
	}

	// remove from stage and back repo's 3 maps all geoobjectuses that are not in the checkout
	for geoobjectuse := range geoobjectuseInstancesToBeRemovedFromTheStage {
		geoobjectuse.Unstage(backRepoGeoObjectUse.GetStage())

		// remove instance from the back repo 3 maps
		geoobjectuseID := backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse]
		delete(backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID, geoobjectuse)
		delete(backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB, geoobjectuseID)
		delete(backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr, geoobjectuseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a geoobjectuseDB that has been found in the DB, updates the backRepo and stages the
// models version of the geoobjectuseDB
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CheckoutPhaseOneInstance(geoobjectuseDB *GeoObjectUseDB) (Error error) {

	geoobjectuse, ok := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[geoobjectuseDB.ID]
	if !ok {
		geoobjectuse = new(models.GeoObjectUse)

		backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[geoobjectuseDB.ID] = geoobjectuse
		backRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse] = geoobjectuseDB.ID

		// append model store with the new element
		geoobjectuse.Name = geoobjectuseDB.Name_Data.String
		geoobjectuse.Stage(backRepoGeoObjectUse.GetStage())
	}
	geoobjectuseDB.CopyBasicFieldsToGeoObjectUse(geoobjectuse)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	geoobjectuse.Stage(backRepoGeoObjectUse.GetStage())

	// preserve pointer to geoobjectuseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GeoObjectUseDBID_GeoObjectUseDB)[geoobjectuseDB hold variable pointers
	geoobjectuseDB_Data := *geoobjectuseDB
	preservedPtrToGeoObjectUse := &geoobjectuseDB_Data
	backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[geoobjectuseDB.ID] = preservedPtrToGeoObjectUse

	return
}

// BackRepoGeoObjectUse.CheckoutPhaseTwo Checkouts all staged instances of GeoObjectUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, geoobjectuseDB := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB {
		backRepoGeoObjectUse.CheckoutPhaseTwoInstance(backRepo, geoobjectuseDB)
	}
	return
}

// BackRepoGeoObjectUse.CheckoutPhaseTwoInstance Checkouts staged instances of GeoObjectUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, geoobjectuseDB *GeoObjectUseDB) (Error error) {

	geoobjectuse := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr[geoobjectuseDB.ID]

	geoobjectuseDB.DecodePointers(backRepo, geoobjectuse)

	return
}

func (geoobjectuseDB *GeoObjectUseDB) DecodePointers(backRepo *BackRepoStruct, geoobjectuse *models.GeoObjectUse) {

	// insertion point for checkout of pointer encoding
	// GeoObject field
	geoobjectuse.GeoObject = nil
	if geoobjectuseDB.GeoObjectID.Int64 != 0 {
		geoobjectuse.GeoObject = backRepo.BackRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[uint(geoobjectuseDB.GeoObjectID.Int64)]
	}
	return
}

// CommitGeoObjectUse allows commit of a single geoobjectuse (if already staged)
func (backRepo *BackRepoStruct) CommitGeoObjectUse(geoobjectuse *models.GeoObjectUse) {
	backRepo.BackRepoGeoObjectUse.CommitPhaseOneInstance(geoobjectuse)
	if id, ok := backRepo.BackRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse]; ok {
		backRepo.BackRepoGeoObjectUse.CommitPhaseTwoInstance(backRepo, id, geoobjectuse)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGeoObjectUse allows checkout of a single geoobjectuse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGeoObjectUse(geoobjectuse *models.GeoObjectUse) {
	// check if the geoobjectuse is staged
	if _, ok := backRepo.BackRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse]; ok {

		if id, ok := backRepo.BackRepoGeoObjectUse.Map_GeoObjectUsePtr_GeoObjectUseDBID[geoobjectuse]; ok {
			var geoobjectuseDB GeoObjectUseDB
			geoobjectuseDB.ID = id

			if err := backRepo.BackRepoGeoObjectUse.db.First(&geoobjectuseDB, id).Error; err != nil {
				log.Fatalln("CheckoutGeoObjectUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGeoObjectUse.CheckoutPhaseOneInstance(&geoobjectuseDB)
			backRepo.BackRepoGeoObjectUse.CheckoutPhaseTwoInstance(backRepo, &geoobjectuseDB)
		}
	}
}

// CopyBasicFieldsFromGeoObjectUse
func (geoobjectuseDB *GeoObjectUseDB) CopyBasicFieldsFromGeoObjectUse(geoobjectuse *models.GeoObjectUse) {
	// insertion point for fields commit

	geoobjectuseDB.Name_Data.String = geoobjectuse.Name
	geoobjectuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGeoObjectUse_WOP
func (geoobjectuseDB *GeoObjectUseDB) CopyBasicFieldsFromGeoObjectUse_WOP(geoobjectuse *models.GeoObjectUse_WOP) {
	// insertion point for fields commit

	geoobjectuseDB.Name_Data.String = geoobjectuse.Name
	geoobjectuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGeoObjectUseWOP
func (geoobjectuseDB *GeoObjectUseDB) CopyBasicFieldsFromGeoObjectUseWOP(geoobjectuse *GeoObjectUseWOP) {
	// insertion point for fields commit

	geoobjectuseDB.Name_Data.String = geoobjectuse.Name
	geoobjectuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGeoObjectUse
func (geoobjectuseDB *GeoObjectUseDB) CopyBasicFieldsToGeoObjectUse(geoobjectuse *models.GeoObjectUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	geoobjectuse.Name = geoobjectuseDB.Name_Data.String
}

// CopyBasicFieldsToGeoObjectUse_WOP
func (geoobjectuseDB *GeoObjectUseDB) CopyBasicFieldsToGeoObjectUse_WOP(geoobjectuse *models.GeoObjectUse_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	geoobjectuse.Name = geoobjectuseDB.Name_Data.String
}

// CopyBasicFieldsToGeoObjectUseWOP
func (geoobjectuseDB *GeoObjectUseDB) CopyBasicFieldsToGeoObjectUseWOP(geoobjectuse *GeoObjectUseWOP) {
	geoobjectuse.ID = int(geoobjectuseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	geoobjectuse.Name = geoobjectuseDB.Name_Data.String
}

// Backup generates a json file from a slice of all GeoObjectUseDB instances in the backrepo
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GeoObjectUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GeoObjectUseDB, 0)
	for _, geoobjectuseDB := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB {
		forBackup = append(forBackup, geoobjectuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GeoObjectUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GeoObjectUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all GeoObjectUseDB instances in the backrepo
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GeoObjectUseDB, 0)
	for _, geoobjectuseDB := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB {
		forBackup = append(forBackup, geoobjectuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GeoObjectUse")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GeoObjectUse_Fields, -1)
	for _, geoobjectuseDB := range forBackup {

		var geoobjectuseWOP GeoObjectUseWOP
		geoobjectuseDB.CopyBasicFieldsToGeoObjectUseWOP(&geoobjectuseWOP)

		row := sh.AddRow()
		row.WriteStruct(&geoobjectuseWOP, -1)
	}
}

// RestoreXL from the "GeoObjectUse" sheet all GeoObjectUseDB instances
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGeoObjectUseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GeoObjectUse"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGeoObjectUse.rowVisitorGeoObjectUse)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) rowVisitorGeoObjectUse(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var geoobjectuseWOP GeoObjectUseWOP
		row.ReadStruct(&geoobjectuseWOP)

		// add the unmarshalled struct to the stage
		geoobjectuseDB := new(GeoObjectUseDB)
		geoobjectuseDB.CopyBasicFieldsFromGeoObjectUseWOP(&geoobjectuseWOP)

		geoobjectuseDB_ID_atBackupTime := geoobjectuseDB.ID
		geoobjectuseDB.ID = 0
		query := backRepoGeoObjectUse.db.Create(geoobjectuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[geoobjectuseDB.ID] = geoobjectuseDB
		BackRepoGeoObjectUseid_atBckpTime_newID[geoobjectuseDB_ID_atBackupTime] = geoobjectuseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GeoObjectUseDB.json" in dirPath that stores an array
// of GeoObjectUseDB and stores it in the database
// the map BackRepoGeoObjectUseid_atBckpTime_newID is updated accordingly
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGeoObjectUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GeoObjectUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GeoObjectUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GeoObjectUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GeoObjectUseDBID_GeoObjectUseDB
	for _, geoobjectuseDB := range forRestore {

		geoobjectuseDB_ID_atBackupTime := geoobjectuseDB.ID
		geoobjectuseDB.ID = 0
		query := backRepoGeoObjectUse.db.Create(geoobjectuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[geoobjectuseDB.ID] = geoobjectuseDB
		BackRepoGeoObjectUseid_atBckpTime_newID[geoobjectuseDB_ID_atBackupTime] = geoobjectuseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GeoObjectUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GeoObjectUse>id_atBckpTime_newID
// to compute new index
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) RestorePhaseTwo() {

	for _, geoobjectuseDB := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB {

		// next line of code is to avert unused variable compilation error
		_ = geoobjectuseDB

		// insertion point for reindexing pointers encoding
		// reindexing GeoObject field
		if geoobjectuseDB.GeoObjectID.Int64 != 0 {
			geoobjectuseDB.GeoObjectID.Int64 = int64(BackRepoGeoObjectid_atBckpTime_newID[uint(geoobjectuseDB.GeoObjectID.Int64)])
			geoobjectuseDB.GeoObjectID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoGeoObjectUse.db.Model(geoobjectuseDB).Updates(*geoobjectuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGeoObjectUse.ResetReversePointers commits all staged instances of GeoObjectUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, geoobjectuse := range backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUsePtr {
		backRepoGeoObjectUse.ResetReversePointersInstance(backRepo, idx, geoobjectuse)
	}

	return
}

func (backRepoGeoObjectUse *BackRepoGeoObjectUseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, geoobjectuse *models.GeoObjectUse) (Error error) {

	// fetch matching geoobjectuseDB
	if geoobjectuseDB, ok := backRepoGeoObjectUse.Map_GeoObjectUseDBID_GeoObjectUseDB[idx]; ok {
		_ = geoobjectuseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGeoObjectUseid_atBckpTime_newID map[uint]uint
