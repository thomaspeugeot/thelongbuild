// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_KingArthurShape_sql sql.NullBool
var dummy_KingArthurShape_time time.Duration
var dummy_KingArthurShape_sort sort.Float64Slice

// KingArthurShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model kingarthurshapeAPI
type KingArthurShapeAPI struct {
	gorm.Model

	models.KingArthurShape_WOP

	// encoding of pointers
	KingArthurShapePointersEncoding KingArthurShapePointersEncoding
}

// KingArthurShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type KingArthurShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ActorState is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ActorStateID sql.NullInt64
}

// KingArthurShapeDB describes a kingarthurshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model kingarthurshapeDB
type KingArthurShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field kingarthurshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field kingarthurshapeDB.X
	X_Data sql.NullFloat64

	// Declation for basic field kingarthurshapeDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field kingarthurshapeDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field kingarthurshapeDB.Height
	Height_Data sql.NullFloat64

	// Declation for basic field kingarthurshapeDB.FillColor
	FillColor_Data sql.NullString

	// Declation for basic field kingarthurshapeDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field kingarthurshapeDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field kingarthurshapeDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field kingarthurshapeDB.RX
	RX_Data sql.NullFloat64
	// encoding of pointers
	KingArthurShapePointersEncoding
}

// KingArthurShapeDBs arrays kingarthurshapeDBs
// swagger:response kingarthurshapeDBsResponse
type KingArthurShapeDBs []KingArthurShapeDB

// KingArthurShapeDBResponse provides response
// swagger:response kingarthurshapeDBResponse
type KingArthurShapeDBResponse struct {
	KingArthurShapeDB
}

// KingArthurShapeWOP is a KingArthurShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type KingArthurShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	X float64 `xlsx:"2"`

	Y float64 `xlsx:"3"`

	Width float64 `xlsx:"4"`

	Height float64 `xlsx:"5"`

	FillColor string `xlsx:"6"`

	FillOpacity float64 `xlsx:"7"`

	Stroke string `xlsx:"8"`

	StrokeWidth float64 `xlsx:"9"`

	RX float64 `xlsx:"10"`
	// insertion for WOP pointer fields
}

var KingArthurShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"X",
	"Y",
	"Width",
	"Height",
	"FillColor",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"RX",
}

type BackRepoKingArthurShapeStruct struct {
	// stores KingArthurShapeDB according to their gorm ID
	Map_KingArthurShapeDBID_KingArthurShapeDB map[uint]*KingArthurShapeDB

	// stores KingArthurShapeDB ID according to KingArthurShape address
	Map_KingArthurShapePtr_KingArthurShapeDBID map[*models.KingArthurShape]uint

	// stores KingArthurShape according to their gorm ID
	Map_KingArthurShapeDBID_KingArthurShapePtr map[uint]*models.KingArthurShape

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKingArthurShape.stage
	return
}

func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) GetDB() *gorm.DB {
	return backRepoKingArthurShape.db
}

// GetKingArthurShapeDBFromKingArthurShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) GetKingArthurShapeDBFromKingArthurShapePtr(kingarthurshape *models.KingArthurShape) (kingarthurshapeDB *KingArthurShapeDB) {
	id := backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape]
	kingarthurshapeDB = backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[id]
	return
}

// BackRepoKingArthurShape.CommitPhaseOne commits all staged instances of KingArthurShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for kingarthurshape := range stage.KingArthurShapes {
		backRepoKingArthurShape.CommitPhaseOneInstance(kingarthurshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, kingarthurshape := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr {
		if _, ok := stage.KingArthurShapes[kingarthurshape]; !ok {
			backRepoKingArthurShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKingArthurShape.CommitDeleteInstance commits deletion of KingArthurShape to the BackRepo
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	kingarthurshape := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[id]

	// kingarthurshape is not staged anymore, remove kingarthurshapeDB
	kingarthurshapeDB := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[id]
	query := backRepoKingArthurShape.db.Unscoped().Delete(&kingarthurshapeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID, kingarthurshape)
	delete(backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr, id)
	delete(backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB, id)

	return
}

// BackRepoKingArthurShape.CommitPhaseOneInstance commits kingarthurshape staged instances of KingArthurShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CommitPhaseOneInstance(kingarthurshape *models.KingArthurShape) (Error error) {

	// check if the kingarthurshape is not commited yet
	if _, ok := backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape]; ok {
		return
	}

	// initiate kingarthurshape
	var kingarthurshapeDB KingArthurShapeDB
	kingarthurshapeDB.CopyBasicFieldsFromKingArthurShape(kingarthurshape)

	query := backRepoKingArthurShape.db.Create(&kingarthurshapeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape] = kingarthurshapeDB.ID
	backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[kingarthurshapeDB.ID] = kingarthurshape
	backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[kingarthurshapeDB.ID] = &kingarthurshapeDB

	return
}

// BackRepoKingArthurShape.CommitPhaseTwo commits all staged instances of KingArthurShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, kingarthurshape := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr {
		backRepoKingArthurShape.CommitPhaseTwoInstance(backRepo, idx, kingarthurshape)
	}

	return
}

// BackRepoKingArthurShape.CommitPhaseTwoInstance commits {{structname }} of models.KingArthurShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, kingarthurshape *models.KingArthurShape) (Error error) {

	// fetch matching kingarthurshapeDB
	if kingarthurshapeDB, ok := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[idx]; ok {

		kingarthurshapeDB.CopyBasicFieldsFromKingArthurShape(kingarthurshape)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value kingarthurshape.ActorState translates to updating the kingarthurshape.ActorStateID
		kingarthurshapeDB.ActorStateID.Valid = true // allow for a 0 value (nil association)
		if kingarthurshape.ActorState != nil {
			if ActorStateId, ok := backRepo.BackRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthurshape.ActorState]; ok {
				kingarthurshapeDB.ActorStateID.Int64 = int64(ActorStateId)
				kingarthurshapeDB.ActorStateID.Valid = true
			}
		} else {
			kingarthurshapeDB.ActorStateID.Int64 = 0
			kingarthurshapeDB.ActorStateID.Valid = true
		}

		query := backRepoKingArthurShape.db.Save(&kingarthurshapeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown KingArthurShape intance %s", kingarthurshape.Name))
		return err
	}

	return
}

// BackRepoKingArthurShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CheckoutPhaseOne() (Error error) {

	kingarthurshapeDBArray := make([]KingArthurShapeDB, 0)
	query := backRepoKingArthurShape.db.Find(&kingarthurshapeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	kingarthurshapeInstancesToBeRemovedFromTheStage := make(map[*models.KingArthurShape]any)
	for key, value := range backRepoKingArthurShape.stage.KingArthurShapes {
		kingarthurshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, kingarthurshapeDB := range kingarthurshapeDBArray {
		backRepoKingArthurShape.CheckoutPhaseOneInstance(&kingarthurshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		kingarthurshape, ok := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[kingarthurshapeDB.ID]
		if ok {
			delete(kingarthurshapeInstancesToBeRemovedFromTheStage, kingarthurshape)
		}
	}

	// remove from stage and back repo's 3 maps all kingarthurshapes that are not in the checkout
	for kingarthurshape := range kingarthurshapeInstancesToBeRemovedFromTheStage {
		kingarthurshape.Unstage(backRepoKingArthurShape.GetStage())

		// remove instance from the back repo 3 maps
		kingarthurshapeID := backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape]
		delete(backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID, kingarthurshape)
		delete(backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB, kingarthurshapeID)
		delete(backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr, kingarthurshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a kingarthurshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the kingarthurshapeDB
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CheckoutPhaseOneInstance(kingarthurshapeDB *KingArthurShapeDB) (Error error) {

	kingarthurshape, ok := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[kingarthurshapeDB.ID]
	if !ok {
		kingarthurshape = new(models.KingArthurShape)

		backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[kingarthurshapeDB.ID] = kingarthurshape
		backRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape] = kingarthurshapeDB.ID

		// append model store with the new element
		kingarthurshape.Name = kingarthurshapeDB.Name_Data.String
		kingarthurshape.Stage(backRepoKingArthurShape.GetStage())
	}
	kingarthurshapeDB.CopyBasicFieldsToKingArthurShape(kingarthurshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	kingarthurshape.Stage(backRepoKingArthurShape.GetStage())

	// preserve pointer to kingarthurshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_KingArthurShapeDBID_KingArthurShapeDB)[kingarthurshapeDB hold variable pointers
	kingarthurshapeDB_Data := *kingarthurshapeDB
	preservedPtrToKingArthurShape := &kingarthurshapeDB_Data
	backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[kingarthurshapeDB.ID] = preservedPtrToKingArthurShape

	return
}

// BackRepoKingArthurShape.CheckoutPhaseTwo Checkouts all staged instances of KingArthurShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, kingarthurshapeDB := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB {
		backRepoKingArthurShape.CheckoutPhaseTwoInstance(backRepo, kingarthurshapeDB)
	}
	return
}

// BackRepoKingArthurShape.CheckoutPhaseTwoInstance Checkouts staged instances of KingArthurShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, kingarthurshapeDB *KingArthurShapeDB) (Error error) {

	kingarthurshape := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[kingarthurshapeDB.ID]

	kingarthurshapeDB.DecodePointers(backRepo, kingarthurshape)

	return
}

func (kingarthurshapeDB *KingArthurShapeDB) DecodePointers(backRepo *BackRepoStruct, kingarthurshape *models.KingArthurShape) {

	// insertion point for checkout of pointer encoding
	// ActorState field
	kingarthurshape.ActorState = nil
	if kingarthurshapeDB.ActorStateID.Int64 != 0 {
		kingarthurshape.ActorState = backRepo.BackRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[uint(kingarthurshapeDB.ActorStateID.Int64)]
	}
	return
}

// CommitKingArthurShape allows commit of a single kingarthurshape (if already staged)
func (backRepo *BackRepoStruct) CommitKingArthurShape(kingarthurshape *models.KingArthurShape) {
	backRepo.BackRepoKingArthurShape.CommitPhaseOneInstance(kingarthurshape)
	if id, ok := backRepo.BackRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape]; ok {
		backRepo.BackRepoKingArthurShape.CommitPhaseTwoInstance(backRepo, id, kingarthurshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKingArthurShape allows checkout of a single kingarthurshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKingArthurShape(kingarthurshape *models.KingArthurShape) {
	// check if the kingarthurshape is staged
	if _, ok := backRepo.BackRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape]; ok {

		if id, ok := backRepo.BackRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[kingarthurshape]; ok {
			var kingarthurshapeDB KingArthurShapeDB
			kingarthurshapeDB.ID = id

			if err := backRepo.BackRepoKingArthurShape.db.First(&kingarthurshapeDB, id).Error; err != nil {
				log.Fatalln("CheckoutKingArthurShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKingArthurShape.CheckoutPhaseOneInstance(&kingarthurshapeDB)
			backRepo.BackRepoKingArthurShape.CheckoutPhaseTwoInstance(backRepo, &kingarthurshapeDB)
		}
	}
}

// CopyBasicFieldsFromKingArthurShape
func (kingarthurshapeDB *KingArthurShapeDB) CopyBasicFieldsFromKingArthurShape(kingarthurshape *models.KingArthurShape) {
	// insertion point for fields commit

	kingarthurshapeDB.Name_Data.String = kingarthurshape.Name
	kingarthurshapeDB.Name_Data.Valid = true

	kingarthurshapeDB.X_Data.Float64 = kingarthurshape.X
	kingarthurshapeDB.X_Data.Valid = true

	kingarthurshapeDB.Y_Data.Float64 = kingarthurshape.Y
	kingarthurshapeDB.Y_Data.Valid = true

	kingarthurshapeDB.Width_Data.Float64 = kingarthurshape.Width
	kingarthurshapeDB.Width_Data.Valid = true

	kingarthurshapeDB.Height_Data.Float64 = kingarthurshape.Height
	kingarthurshapeDB.Height_Data.Valid = true

	kingarthurshapeDB.FillColor_Data.String = kingarthurshape.FillColor
	kingarthurshapeDB.FillColor_Data.Valid = true

	kingarthurshapeDB.FillOpacity_Data.Float64 = kingarthurshape.FillOpacity
	kingarthurshapeDB.FillOpacity_Data.Valid = true

	kingarthurshapeDB.Stroke_Data.String = kingarthurshape.Stroke
	kingarthurshapeDB.Stroke_Data.Valid = true

	kingarthurshapeDB.StrokeWidth_Data.Float64 = kingarthurshape.StrokeWidth
	kingarthurshapeDB.StrokeWidth_Data.Valid = true

	kingarthurshapeDB.RX_Data.Float64 = kingarthurshape.RX
	kingarthurshapeDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromKingArthurShape_WOP
func (kingarthurshapeDB *KingArthurShapeDB) CopyBasicFieldsFromKingArthurShape_WOP(kingarthurshape *models.KingArthurShape_WOP) {
	// insertion point for fields commit

	kingarthurshapeDB.Name_Data.String = kingarthurshape.Name
	kingarthurshapeDB.Name_Data.Valid = true

	kingarthurshapeDB.X_Data.Float64 = kingarthurshape.X
	kingarthurshapeDB.X_Data.Valid = true

	kingarthurshapeDB.Y_Data.Float64 = kingarthurshape.Y
	kingarthurshapeDB.Y_Data.Valid = true

	kingarthurshapeDB.Width_Data.Float64 = kingarthurshape.Width
	kingarthurshapeDB.Width_Data.Valid = true

	kingarthurshapeDB.Height_Data.Float64 = kingarthurshape.Height
	kingarthurshapeDB.Height_Data.Valid = true

	kingarthurshapeDB.FillColor_Data.String = kingarthurshape.FillColor
	kingarthurshapeDB.FillColor_Data.Valid = true

	kingarthurshapeDB.FillOpacity_Data.Float64 = kingarthurshape.FillOpacity
	kingarthurshapeDB.FillOpacity_Data.Valid = true

	kingarthurshapeDB.Stroke_Data.String = kingarthurshape.Stroke
	kingarthurshapeDB.Stroke_Data.Valid = true

	kingarthurshapeDB.StrokeWidth_Data.Float64 = kingarthurshape.StrokeWidth
	kingarthurshapeDB.StrokeWidth_Data.Valid = true

	kingarthurshapeDB.RX_Data.Float64 = kingarthurshape.RX
	kingarthurshapeDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromKingArthurShapeWOP
func (kingarthurshapeDB *KingArthurShapeDB) CopyBasicFieldsFromKingArthurShapeWOP(kingarthurshape *KingArthurShapeWOP) {
	// insertion point for fields commit

	kingarthurshapeDB.Name_Data.String = kingarthurshape.Name
	kingarthurshapeDB.Name_Data.Valid = true

	kingarthurshapeDB.X_Data.Float64 = kingarthurshape.X
	kingarthurshapeDB.X_Data.Valid = true

	kingarthurshapeDB.Y_Data.Float64 = kingarthurshape.Y
	kingarthurshapeDB.Y_Data.Valid = true

	kingarthurshapeDB.Width_Data.Float64 = kingarthurshape.Width
	kingarthurshapeDB.Width_Data.Valid = true

	kingarthurshapeDB.Height_Data.Float64 = kingarthurshape.Height
	kingarthurshapeDB.Height_Data.Valid = true

	kingarthurshapeDB.FillColor_Data.String = kingarthurshape.FillColor
	kingarthurshapeDB.FillColor_Data.Valid = true

	kingarthurshapeDB.FillOpacity_Data.Float64 = kingarthurshape.FillOpacity
	kingarthurshapeDB.FillOpacity_Data.Valid = true

	kingarthurshapeDB.Stroke_Data.String = kingarthurshape.Stroke
	kingarthurshapeDB.Stroke_Data.Valid = true

	kingarthurshapeDB.StrokeWidth_Data.Float64 = kingarthurshape.StrokeWidth
	kingarthurshapeDB.StrokeWidth_Data.Valid = true

	kingarthurshapeDB.RX_Data.Float64 = kingarthurshape.RX
	kingarthurshapeDB.RX_Data.Valid = true
}

// CopyBasicFieldsToKingArthurShape
func (kingarthurshapeDB *KingArthurShapeDB) CopyBasicFieldsToKingArthurShape(kingarthurshape *models.KingArthurShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	kingarthurshape.Name = kingarthurshapeDB.Name_Data.String
	kingarthurshape.X = kingarthurshapeDB.X_Data.Float64
	kingarthurshape.Y = kingarthurshapeDB.Y_Data.Float64
	kingarthurshape.Width = kingarthurshapeDB.Width_Data.Float64
	kingarthurshape.Height = kingarthurshapeDB.Height_Data.Float64
	kingarthurshape.FillColor = kingarthurshapeDB.FillColor_Data.String
	kingarthurshape.FillOpacity = kingarthurshapeDB.FillOpacity_Data.Float64
	kingarthurshape.Stroke = kingarthurshapeDB.Stroke_Data.String
	kingarthurshape.StrokeWidth = kingarthurshapeDB.StrokeWidth_Data.Float64
	kingarthurshape.RX = kingarthurshapeDB.RX_Data.Float64
}

// CopyBasicFieldsToKingArthurShape_WOP
func (kingarthurshapeDB *KingArthurShapeDB) CopyBasicFieldsToKingArthurShape_WOP(kingarthurshape *models.KingArthurShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	kingarthurshape.Name = kingarthurshapeDB.Name_Data.String
	kingarthurshape.X = kingarthurshapeDB.X_Data.Float64
	kingarthurshape.Y = kingarthurshapeDB.Y_Data.Float64
	kingarthurshape.Width = kingarthurshapeDB.Width_Data.Float64
	kingarthurshape.Height = kingarthurshapeDB.Height_Data.Float64
	kingarthurshape.FillColor = kingarthurshapeDB.FillColor_Data.String
	kingarthurshape.FillOpacity = kingarthurshapeDB.FillOpacity_Data.Float64
	kingarthurshape.Stroke = kingarthurshapeDB.Stroke_Data.String
	kingarthurshape.StrokeWidth = kingarthurshapeDB.StrokeWidth_Data.Float64
	kingarthurshape.RX = kingarthurshapeDB.RX_Data.Float64
}

// CopyBasicFieldsToKingArthurShapeWOP
func (kingarthurshapeDB *KingArthurShapeDB) CopyBasicFieldsToKingArthurShapeWOP(kingarthurshape *KingArthurShapeWOP) {
	kingarthurshape.ID = int(kingarthurshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	kingarthurshape.Name = kingarthurshapeDB.Name_Data.String
	kingarthurshape.X = kingarthurshapeDB.X_Data.Float64
	kingarthurshape.Y = kingarthurshapeDB.Y_Data.Float64
	kingarthurshape.Width = kingarthurshapeDB.Width_Data.Float64
	kingarthurshape.Height = kingarthurshapeDB.Height_Data.Float64
	kingarthurshape.FillColor = kingarthurshapeDB.FillColor_Data.String
	kingarthurshape.FillOpacity = kingarthurshapeDB.FillOpacity_Data.Float64
	kingarthurshape.Stroke = kingarthurshapeDB.Stroke_Data.String
	kingarthurshape.StrokeWidth = kingarthurshapeDB.StrokeWidth_Data.Float64
	kingarthurshape.RX = kingarthurshapeDB.RX_Data.Float64
}

// Backup generates a json file from a slice of all KingArthurShapeDB instances in the backrepo
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "KingArthurShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KingArthurShapeDB, 0)
	for _, kingarthurshapeDB := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB {
		forBackup = append(forBackup, kingarthurshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json KingArthurShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json KingArthurShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all KingArthurShapeDB instances in the backrepo
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KingArthurShapeDB, 0)
	for _, kingarthurshapeDB := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB {
		forBackup = append(forBackup, kingarthurshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("KingArthurShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&KingArthurShape_Fields, -1)
	for _, kingarthurshapeDB := range forBackup {

		var kingarthurshapeWOP KingArthurShapeWOP
		kingarthurshapeDB.CopyBasicFieldsToKingArthurShapeWOP(&kingarthurshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&kingarthurshapeWOP, -1)
	}
}

// RestoreXL from the "KingArthurShape" sheet all KingArthurShapeDB instances
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKingArthurShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["KingArthurShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKingArthurShape.rowVisitorKingArthurShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) rowVisitorKingArthurShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var kingarthurshapeWOP KingArthurShapeWOP
		row.ReadStruct(&kingarthurshapeWOP)

		// add the unmarshalled struct to the stage
		kingarthurshapeDB := new(KingArthurShapeDB)
		kingarthurshapeDB.CopyBasicFieldsFromKingArthurShapeWOP(&kingarthurshapeWOP)

		kingarthurshapeDB_ID_atBackupTime := kingarthurshapeDB.ID
		kingarthurshapeDB.ID = 0
		query := backRepoKingArthurShape.db.Create(kingarthurshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[kingarthurshapeDB.ID] = kingarthurshapeDB
		BackRepoKingArthurShapeid_atBckpTime_newID[kingarthurshapeDB_ID_atBackupTime] = kingarthurshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "KingArthurShapeDB.json" in dirPath that stores an array
// of KingArthurShapeDB and stores it in the database
// the map BackRepoKingArthurShapeid_atBckpTime_newID is updated accordingly
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKingArthurShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "KingArthurShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json KingArthurShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*KingArthurShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_KingArthurShapeDBID_KingArthurShapeDB
	for _, kingarthurshapeDB := range forRestore {

		kingarthurshapeDB_ID_atBackupTime := kingarthurshapeDB.ID
		kingarthurshapeDB.ID = 0
		query := backRepoKingArthurShape.db.Create(kingarthurshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[kingarthurshapeDB.ID] = kingarthurshapeDB
		BackRepoKingArthurShapeid_atBckpTime_newID[kingarthurshapeDB_ID_atBackupTime] = kingarthurshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json KingArthurShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<KingArthurShape>id_atBckpTime_newID
// to compute new index
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) RestorePhaseTwo() {

	for _, kingarthurshapeDB := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = kingarthurshapeDB

		// insertion point for reindexing pointers encoding
		// reindexing ActorState field
		if kingarthurshapeDB.ActorStateID.Int64 != 0 {
			kingarthurshapeDB.ActorStateID.Int64 = int64(BackRepoKingArthurid_atBckpTime_newID[uint(kingarthurshapeDB.ActorStateID.Int64)])
			kingarthurshapeDB.ActorStateID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoKingArthurShape.db.Model(kingarthurshapeDB).Updates(*kingarthurshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoKingArthurShape.ResetReversePointers commits all staged instances of KingArthurShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, kingarthurshape := range backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr {
		backRepoKingArthurShape.ResetReversePointersInstance(backRepo, idx, kingarthurshape)
	}

	return
}

func (backRepoKingArthurShape *BackRepoKingArthurShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, kingarthurshape *models.KingArthurShape) (Error error) {

	// fetch matching kingarthurshapeDB
	if kingarthurshapeDB, ok := backRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapeDB[idx]; ok {
		_ = kingarthurshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKingArthurShapeid_atBckpTime_newID map[uint]uint
