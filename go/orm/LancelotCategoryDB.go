// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_LancelotCategory_sql sql.NullBool
var dummy_LancelotCategory_time time.Duration
var dummy_LancelotCategory_sort sort.Float64Slice

// LancelotCategoryAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lancelotcategoryAPI
type LancelotCategoryAPI struct {
	gorm.Model

	models.LancelotCategory_WOP

	// encoding of pointers
	LancelotCategoryPointersEncoding LancelotCategoryPointersEncoding
}

// LancelotCategoryPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LancelotCategoryPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ParameterUse is a slice of pointers to another Struct (optional or 0..1)
	ParameterUse IntSlice `gorm:"type:TEXT"`
}

// LancelotCategoryDB describes a lancelotcategory in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lancelotcategoryDB
type LancelotCategoryDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field lancelotcategoryDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	LancelotCategoryPointersEncoding
}

// LancelotCategoryDBs arrays lancelotcategoryDBs
// swagger:response lancelotcategoryDBsResponse
type LancelotCategoryDBs []LancelotCategoryDB

// LancelotCategoryDBResponse provides response
// swagger:response lancelotcategoryDBResponse
type LancelotCategoryDBResponse struct {
	LancelotCategoryDB
}

// LancelotCategoryWOP is a LancelotCategory without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LancelotCategoryWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var LancelotCategory_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoLancelotCategoryStruct struct {
	// stores LancelotCategoryDB according to their gorm ID
	Map_LancelotCategoryDBID_LancelotCategoryDB map[uint]*LancelotCategoryDB

	// stores LancelotCategoryDB ID according to LancelotCategory address
	Map_LancelotCategoryPtr_LancelotCategoryDBID map[*models.LancelotCategory]uint

	// stores LancelotCategory according to their gorm ID
	Map_LancelotCategoryDBID_LancelotCategoryPtr map[uint]*models.LancelotCategory

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoLancelotCategory.stage
	return
}

func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) GetDB() *gorm.DB {
	return backRepoLancelotCategory.db
}

// GetLancelotCategoryDBFromLancelotCategoryPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) GetLancelotCategoryDBFromLancelotCategoryPtr(lancelotcategory *models.LancelotCategory) (lancelotcategoryDB *LancelotCategoryDB) {
	id := backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory]
	lancelotcategoryDB = backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[id]
	return
}

// BackRepoLancelotCategory.CommitPhaseOne commits all staged instances of LancelotCategory to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for lancelotcategory := range stage.LancelotCategorys {
		backRepoLancelotCategory.CommitPhaseOneInstance(lancelotcategory)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, lancelotcategory := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr {
		if _, ok := stage.LancelotCategorys[lancelotcategory]; !ok {
			backRepoLancelotCategory.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLancelotCategory.CommitDeleteInstance commits deletion of LancelotCategory to the BackRepo
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CommitDeleteInstance(id uint) (Error error) {

	lancelotcategory := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[id]

	// lancelotcategory is not staged anymore, remove lancelotcategoryDB
	lancelotcategoryDB := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[id]
	query := backRepoLancelotCategory.db.Unscoped().Delete(&lancelotcategoryDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID, lancelotcategory)
	delete(backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr, id)
	delete(backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB, id)

	return
}

// BackRepoLancelotCategory.CommitPhaseOneInstance commits lancelotcategory staged instances of LancelotCategory to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CommitPhaseOneInstance(lancelotcategory *models.LancelotCategory) (Error error) {

	// check if the lancelotcategory is not commited yet
	if _, ok := backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory]; ok {
		return
	}

	// initiate lancelotcategory
	var lancelotcategoryDB LancelotCategoryDB
	lancelotcategoryDB.CopyBasicFieldsFromLancelotCategory(lancelotcategory)

	query := backRepoLancelotCategory.db.Create(&lancelotcategoryDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory] = lancelotcategoryDB.ID
	backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[lancelotcategoryDB.ID] = lancelotcategory
	backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[lancelotcategoryDB.ID] = &lancelotcategoryDB

	return
}

// BackRepoLancelotCategory.CommitPhaseTwo commits all staged instances of LancelotCategory to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, lancelotcategory := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr {
		backRepoLancelotCategory.CommitPhaseTwoInstance(backRepo, idx, lancelotcategory)
	}

	return
}

// BackRepoLancelotCategory.CommitPhaseTwoInstance commits {{structname }} of models.LancelotCategory to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, lancelotcategory *models.LancelotCategory) (Error error) {

	// fetch matching lancelotcategoryDB
	if lancelotcategoryDB, ok := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[idx]; ok {

		lancelotcategoryDB.CopyBasicFieldsFromLancelotCategory(lancelotcategory)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		lancelotcategoryDB.LancelotCategoryPointersEncoding.ParameterUse = make([]int, 0)
		// 2. encode
		for _, knightwhosayniAssocEnd := range lancelotcategory.ParameterUse {
			knightwhosayniAssocEnd_DB :=
				backRepo.BackRepoKnightWhoSayNi.GetKnightWhoSayNiDBFromKnightWhoSayNiPtr(knightwhosayniAssocEnd)

			// the stage might be inconsistant, meaning that the knightwhosayniAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if knightwhosayniAssocEnd_DB == nil {
				continue
			}

			lancelotcategoryDB.LancelotCategoryPointersEncoding.ParameterUse =
				append(lancelotcategoryDB.LancelotCategoryPointersEncoding.ParameterUse, int(knightwhosayniAssocEnd_DB.ID))
		}

		query := backRepoLancelotCategory.db.Save(&lancelotcategoryDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown LancelotCategory intance %s", lancelotcategory.Name))
		return err
	}

	return
}

// BackRepoLancelotCategory.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CheckoutPhaseOne() (Error error) {

	lancelotcategoryDBArray := make([]LancelotCategoryDB, 0)
	query := backRepoLancelotCategory.db.Find(&lancelotcategoryDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	lancelotcategoryInstancesToBeRemovedFromTheStage := make(map[*models.LancelotCategory]any)
	for key, value := range backRepoLancelotCategory.stage.LancelotCategorys {
		lancelotcategoryInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, lancelotcategoryDB := range lancelotcategoryDBArray {
		backRepoLancelotCategory.CheckoutPhaseOneInstance(&lancelotcategoryDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		lancelotcategory, ok := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[lancelotcategoryDB.ID]
		if ok {
			delete(lancelotcategoryInstancesToBeRemovedFromTheStage, lancelotcategory)
		}
	}

	// remove from stage and back repo's 3 maps all lancelotcategorys that are not in the checkout
	for lancelotcategory := range lancelotcategoryInstancesToBeRemovedFromTheStage {
		lancelotcategory.Unstage(backRepoLancelotCategory.GetStage())

		// remove instance from the back repo 3 maps
		lancelotcategoryID := backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory]
		delete(backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID, lancelotcategory)
		delete(backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB, lancelotcategoryID)
		delete(backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr, lancelotcategoryID)
	}

	return
}

// CheckoutPhaseOneInstance takes a lancelotcategoryDB that has been found in the DB, updates the backRepo and stages the
// models version of the lancelotcategoryDB
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CheckoutPhaseOneInstance(lancelotcategoryDB *LancelotCategoryDB) (Error error) {

	lancelotcategory, ok := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[lancelotcategoryDB.ID]
	if !ok {
		lancelotcategory = new(models.LancelotCategory)

		backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[lancelotcategoryDB.ID] = lancelotcategory
		backRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory] = lancelotcategoryDB.ID

		// append model store with the new element
		lancelotcategory.Name = lancelotcategoryDB.Name_Data.String
		lancelotcategory.Stage(backRepoLancelotCategory.GetStage())
	}
	lancelotcategoryDB.CopyBasicFieldsToLancelotCategory(lancelotcategory)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	lancelotcategory.Stage(backRepoLancelotCategory.GetStage())

	// preserve pointer to lancelotcategoryDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LancelotCategoryDBID_LancelotCategoryDB)[lancelotcategoryDB hold variable pointers
	lancelotcategoryDB_Data := *lancelotcategoryDB
	preservedPtrToLancelotCategory := &lancelotcategoryDB_Data
	backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[lancelotcategoryDB.ID] = preservedPtrToLancelotCategory

	return
}

// BackRepoLancelotCategory.CheckoutPhaseTwo Checkouts all staged instances of LancelotCategory to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lancelotcategoryDB := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB {
		backRepoLancelotCategory.CheckoutPhaseTwoInstance(backRepo, lancelotcategoryDB)
	}
	return
}

// BackRepoLancelotCategory.CheckoutPhaseTwoInstance Checkouts staged instances of LancelotCategory to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lancelotcategoryDB *LancelotCategoryDB) (Error error) {

	lancelotcategory := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr[lancelotcategoryDB.ID]

	lancelotcategoryDB.DecodePointers(backRepo, lancelotcategory)

	return
}

func (lancelotcategoryDB *LancelotCategoryDB) DecodePointers(backRepo *BackRepoStruct, lancelotcategory *models.LancelotCategory) {

	// insertion point for checkout of pointer encoding
	// This loop redeem lancelotcategory.ParameterUse in the stage from the encode in the back repo
	// It parses all KnightWhoSayNiDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	lancelotcategory.ParameterUse = lancelotcategory.ParameterUse[:0]
	for _, _KnightWhoSayNiid := range lancelotcategoryDB.LancelotCategoryPointersEncoding.ParameterUse {
		lancelotcategory.ParameterUse = append(lancelotcategory.ParameterUse, backRepo.BackRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[uint(_KnightWhoSayNiid)])
	}

	return
}

// CommitLancelotCategory allows commit of a single lancelotcategory (if already staged)
func (backRepo *BackRepoStruct) CommitLancelotCategory(lancelotcategory *models.LancelotCategory) {
	backRepo.BackRepoLancelotCategory.CommitPhaseOneInstance(lancelotcategory)
	if id, ok := backRepo.BackRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory]; ok {
		backRepo.BackRepoLancelotCategory.CommitPhaseTwoInstance(backRepo, id, lancelotcategory)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLancelotCategory allows checkout of a single lancelotcategory (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLancelotCategory(lancelotcategory *models.LancelotCategory) {
	// check if the lancelotcategory is staged
	if _, ok := backRepo.BackRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory]; ok {

		if id, ok := backRepo.BackRepoLancelotCategory.Map_LancelotCategoryPtr_LancelotCategoryDBID[lancelotcategory]; ok {
			var lancelotcategoryDB LancelotCategoryDB
			lancelotcategoryDB.ID = id

			if err := backRepo.BackRepoLancelotCategory.db.First(&lancelotcategoryDB, id).Error; err != nil {
				log.Fatalln("CheckoutLancelotCategory : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLancelotCategory.CheckoutPhaseOneInstance(&lancelotcategoryDB)
			backRepo.BackRepoLancelotCategory.CheckoutPhaseTwoInstance(backRepo, &lancelotcategoryDB)
		}
	}
}

// CopyBasicFieldsFromLancelotCategory
func (lancelotcategoryDB *LancelotCategoryDB) CopyBasicFieldsFromLancelotCategory(lancelotcategory *models.LancelotCategory) {
	// insertion point for fields commit

	lancelotcategoryDB.Name_Data.String = lancelotcategory.Name
	lancelotcategoryDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLancelotCategory_WOP
func (lancelotcategoryDB *LancelotCategoryDB) CopyBasicFieldsFromLancelotCategory_WOP(lancelotcategory *models.LancelotCategory_WOP) {
	// insertion point for fields commit

	lancelotcategoryDB.Name_Data.String = lancelotcategory.Name
	lancelotcategoryDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromLancelotCategoryWOP
func (lancelotcategoryDB *LancelotCategoryDB) CopyBasicFieldsFromLancelotCategoryWOP(lancelotcategory *LancelotCategoryWOP) {
	// insertion point for fields commit

	lancelotcategoryDB.Name_Data.String = lancelotcategory.Name
	lancelotcategoryDB.Name_Data.Valid = true
}

// CopyBasicFieldsToLancelotCategory
func (lancelotcategoryDB *LancelotCategoryDB) CopyBasicFieldsToLancelotCategory(lancelotcategory *models.LancelotCategory) {
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotcategory.Name = lancelotcategoryDB.Name_Data.String
}

// CopyBasicFieldsToLancelotCategory_WOP
func (lancelotcategoryDB *LancelotCategoryDB) CopyBasicFieldsToLancelotCategory_WOP(lancelotcategory *models.LancelotCategory_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotcategory.Name = lancelotcategoryDB.Name_Data.String
}

// CopyBasicFieldsToLancelotCategoryWOP
func (lancelotcategoryDB *LancelotCategoryDB) CopyBasicFieldsToLancelotCategoryWOP(lancelotcategory *LancelotCategoryWOP) {
	lancelotcategory.ID = int(lancelotcategoryDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	lancelotcategory.Name = lancelotcategoryDB.Name_Data.String
}

// Backup generates a json file from a slice of all LancelotCategoryDB instances in the backrepo
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LancelotCategoryDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LancelotCategoryDB, 0)
	for _, lancelotcategoryDB := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB {
		forBackup = append(forBackup, lancelotcategoryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json LancelotCategory ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json LancelotCategory file", err.Error())
	}
}

// Backup generates a json file from a slice of all LancelotCategoryDB instances in the backrepo
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LancelotCategoryDB, 0)
	for _, lancelotcategoryDB := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB {
		forBackup = append(forBackup, lancelotcategoryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("LancelotCategory")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&LancelotCategory_Fields, -1)
	for _, lancelotcategoryDB := range forBackup {

		var lancelotcategoryWOP LancelotCategoryWOP
		lancelotcategoryDB.CopyBasicFieldsToLancelotCategoryWOP(&lancelotcategoryWOP)

		row := sh.AddRow()
		row.WriteStruct(&lancelotcategoryWOP, -1)
	}
}

// RestoreXL from the "LancelotCategory" sheet all LancelotCategoryDB instances
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLancelotCategoryid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["LancelotCategory"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLancelotCategory.rowVisitorLancelotCategory)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) rowVisitorLancelotCategory(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var lancelotcategoryWOP LancelotCategoryWOP
		row.ReadStruct(&lancelotcategoryWOP)

		// add the unmarshalled struct to the stage
		lancelotcategoryDB := new(LancelotCategoryDB)
		lancelotcategoryDB.CopyBasicFieldsFromLancelotCategoryWOP(&lancelotcategoryWOP)

		lancelotcategoryDB_ID_atBackupTime := lancelotcategoryDB.ID
		lancelotcategoryDB.ID = 0
		query := backRepoLancelotCategory.db.Create(lancelotcategoryDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[lancelotcategoryDB.ID] = lancelotcategoryDB
		BackRepoLancelotCategoryid_atBckpTime_newID[lancelotcategoryDB_ID_atBackupTime] = lancelotcategoryDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LancelotCategoryDB.json" in dirPath that stores an array
// of LancelotCategoryDB and stores it in the database
// the map BackRepoLancelotCategoryid_atBckpTime_newID is updated accordingly
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLancelotCategoryid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LancelotCategoryDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json LancelotCategory file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LancelotCategoryDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LancelotCategoryDBID_LancelotCategoryDB
	for _, lancelotcategoryDB := range forRestore {

		lancelotcategoryDB_ID_atBackupTime := lancelotcategoryDB.ID
		lancelotcategoryDB.ID = 0
		query := backRepoLancelotCategory.db.Create(lancelotcategoryDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[lancelotcategoryDB.ID] = lancelotcategoryDB
		BackRepoLancelotCategoryid_atBckpTime_newID[lancelotcategoryDB_ID_atBackupTime] = lancelotcategoryDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json LancelotCategory file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<LancelotCategory>id_atBckpTime_newID
// to compute new index
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) RestorePhaseTwo() {

	for _, lancelotcategoryDB := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB {

		// next line of code is to avert unused variable compilation error
		_ = lancelotcategoryDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoLancelotCategory.db.Model(lancelotcategoryDB).Updates(*lancelotcategoryDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoLancelotCategory.ResetReversePointers commits all staged instances of LancelotCategory to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, lancelotcategory := range backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryPtr {
		backRepoLancelotCategory.ResetReversePointersInstance(backRepo, idx, lancelotcategory)
	}

	return
}

func (backRepoLancelotCategory *BackRepoLancelotCategoryStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, lancelotcategory *models.LancelotCategory) (Error error) {

	// fetch matching lancelotcategoryDB
	if lancelotcategoryDB, ok := backRepoLancelotCategory.Map_LancelotCategoryDBID_LancelotCategoryDB[idx]; ok {
		_ = lancelotcategoryDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLancelotCategoryid_atBckpTime_newID map[uint]uint
