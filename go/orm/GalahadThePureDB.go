// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GalahadThePure_sql sql.NullBool
var dummy_GalahadThePure_time time.Duration
var dummy_GalahadThePure_sort sort.Float64Slice

// GalahadThePureAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model galahadthepureAPI
type GalahadThePureAPI struct {
	gorm.Model

	models.GalahadThePure_WOP

	// encoding of pointers
	GalahadThePurePointersEncoding GalahadThePurePointersEncoding
}

// GalahadThePurePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GalahadThePurePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GalahadThePureDB describes a galahadthepure in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model galahadthepureDB
type GalahadThePureDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field galahadthepureDB.Name
	Name_Data sql.NullString

	// Declation for basic field galahadthepureDB.Description
	Description_Data sql.NullString
	// encoding of pointers
	GalahadThePurePointersEncoding
}

// GalahadThePureDBs arrays galahadthepureDBs
// swagger:response galahadthepureDBsResponse
type GalahadThePureDBs []GalahadThePureDB

// GalahadThePureDBResponse provides response
// swagger:response galahadthepureDBResponse
type GalahadThePureDBResponse struct {
	GalahadThePureDB
}

// GalahadThePureWOP is a GalahadThePure without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GalahadThePureWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Description string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var GalahadThePure_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Description",
}

type BackRepoGalahadThePureStruct struct {
	// stores GalahadThePureDB according to their gorm ID
	Map_GalahadThePureDBID_GalahadThePureDB map[uint]*GalahadThePureDB

	// stores GalahadThePureDB ID according to GalahadThePure address
	Map_GalahadThePurePtr_GalahadThePureDBID map[*models.GalahadThePure]uint

	// stores GalahadThePure according to their gorm ID
	Map_GalahadThePureDBID_GalahadThePurePtr map[uint]*models.GalahadThePure

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGalahadThePure.stage
	return
}

func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) GetDB() *gorm.DB {
	return backRepoGalahadThePure.db
}

// GetGalahadThePureDBFromGalahadThePurePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) GetGalahadThePureDBFromGalahadThePurePtr(galahadthepure *models.GalahadThePure) (galahadthepureDB *GalahadThePureDB) {
	id := backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure]
	galahadthepureDB = backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[id]
	return
}

// BackRepoGalahadThePure.CommitPhaseOne commits all staged instances of GalahadThePure to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for galahadthepure := range stage.GalahadThePures {
		backRepoGalahadThePure.CommitPhaseOneInstance(galahadthepure)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, galahadthepure := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr {
		if _, ok := stage.GalahadThePures[galahadthepure]; !ok {
			backRepoGalahadThePure.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGalahadThePure.CommitDeleteInstance commits deletion of GalahadThePure to the BackRepo
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CommitDeleteInstance(id uint) (Error error) {

	galahadthepure := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[id]

	// galahadthepure is not staged anymore, remove galahadthepureDB
	galahadthepureDB := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[id]
	query := backRepoGalahadThePure.db.Unscoped().Delete(&galahadthepureDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID, galahadthepure)
	delete(backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr, id)
	delete(backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB, id)

	return
}

// BackRepoGalahadThePure.CommitPhaseOneInstance commits galahadthepure staged instances of GalahadThePure to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CommitPhaseOneInstance(galahadthepure *models.GalahadThePure) (Error error) {

	// check if the galahadthepure is not commited yet
	if _, ok := backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure]; ok {
		return
	}

	// initiate galahadthepure
	var galahadthepureDB GalahadThePureDB
	galahadthepureDB.CopyBasicFieldsFromGalahadThePure(galahadthepure)

	query := backRepoGalahadThePure.db.Create(&galahadthepureDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure] = galahadthepureDB.ID
	backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[galahadthepureDB.ID] = galahadthepure
	backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[galahadthepureDB.ID] = &galahadthepureDB

	return
}

// BackRepoGalahadThePure.CommitPhaseTwo commits all staged instances of GalahadThePure to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, galahadthepure := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr {
		backRepoGalahadThePure.CommitPhaseTwoInstance(backRepo, idx, galahadthepure)
	}

	return
}

// BackRepoGalahadThePure.CommitPhaseTwoInstance commits {{structname }} of models.GalahadThePure to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, galahadthepure *models.GalahadThePure) (Error error) {

	// fetch matching galahadthepureDB
	if galahadthepureDB, ok := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[idx]; ok {

		galahadthepureDB.CopyBasicFieldsFromGalahadThePure(galahadthepure)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGalahadThePure.db.Save(&galahadthepureDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GalahadThePure intance %s", galahadthepure.Name))
		return err
	}

	return
}

// BackRepoGalahadThePure.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CheckoutPhaseOne() (Error error) {

	galahadthepureDBArray := make([]GalahadThePureDB, 0)
	query := backRepoGalahadThePure.db.Find(&galahadthepureDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	galahadthepureInstancesToBeRemovedFromTheStage := make(map[*models.GalahadThePure]any)
	for key, value := range backRepoGalahadThePure.stage.GalahadThePures {
		galahadthepureInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, galahadthepureDB := range galahadthepureDBArray {
		backRepoGalahadThePure.CheckoutPhaseOneInstance(&galahadthepureDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		galahadthepure, ok := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[galahadthepureDB.ID]
		if ok {
			delete(galahadthepureInstancesToBeRemovedFromTheStage, galahadthepure)
		}
	}

	// remove from stage and back repo's 3 maps all galahadthepures that are not in the checkout
	for galahadthepure := range galahadthepureInstancesToBeRemovedFromTheStage {
		galahadthepure.Unstage(backRepoGalahadThePure.GetStage())

		// remove instance from the back repo 3 maps
		galahadthepureID := backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure]
		delete(backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID, galahadthepure)
		delete(backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB, galahadthepureID)
		delete(backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr, galahadthepureID)
	}

	return
}

// CheckoutPhaseOneInstance takes a galahadthepureDB that has been found in the DB, updates the backRepo and stages the
// models version of the galahadthepureDB
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CheckoutPhaseOneInstance(galahadthepureDB *GalahadThePureDB) (Error error) {

	galahadthepure, ok := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[galahadthepureDB.ID]
	if !ok {
		galahadthepure = new(models.GalahadThePure)

		backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[galahadthepureDB.ID] = galahadthepure
		backRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure] = galahadthepureDB.ID

		// append model store with the new element
		galahadthepure.Name = galahadthepureDB.Name_Data.String
		galahadthepure.Stage(backRepoGalahadThePure.GetStage())
	}
	galahadthepureDB.CopyBasicFieldsToGalahadThePure(galahadthepure)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	galahadthepure.Stage(backRepoGalahadThePure.GetStage())

	// preserve pointer to galahadthepureDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GalahadThePureDBID_GalahadThePureDB)[galahadthepureDB hold variable pointers
	galahadthepureDB_Data := *galahadthepureDB
	preservedPtrToGalahadThePure := &galahadthepureDB_Data
	backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[galahadthepureDB.ID] = preservedPtrToGalahadThePure

	return
}

// BackRepoGalahadThePure.CheckoutPhaseTwo Checkouts all staged instances of GalahadThePure to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, galahadthepureDB := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB {
		backRepoGalahadThePure.CheckoutPhaseTwoInstance(backRepo, galahadthepureDB)
	}
	return
}

// BackRepoGalahadThePure.CheckoutPhaseTwoInstance Checkouts staged instances of GalahadThePure to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, galahadthepureDB *GalahadThePureDB) (Error error) {

	galahadthepure := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[galahadthepureDB.ID]

	galahadthepureDB.DecodePointers(backRepo, galahadthepure)

	return
}

func (galahadthepureDB *GalahadThePureDB) DecodePointers(backRepo *BackRepoStruct, galahadthepure *models.GalahadThePure) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGalahadThePure allows commit of a single galahadthepure (if already staged)
func (backRepo *BackRepoStruct) CommitGalahadThePure(galahadthepure *models.GalahadThePure) {
	backRepo.BackRepoGalahadThePure.CommitPhaseOneInstance(galahadthepure)
	if id, ok := backRepo.BackRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure]; ok {
		backRepo.BackRepoGalahadThePure.CommitPhaseTwoInstance(backRepo, id, galahadthepure)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGalahadThePure allows checkout of a single galahadthepure (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGalahadThePure(galahadthepure *models.GalahadThePure) {
	// check if the galahadthepure is staged
	if _, ok := backRepo.BackRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure]; ok {

		if id, ok := backRepo.BackRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[galahadthepure]; ok {
			var galahadthepureDB GalahadThePureDB
			galahadthepureDB.ID = id

			if err := backRepo.BackRepoGalahadThePure.db.First(&galahadthepureDB, id).Error; err != nil {
				log.Fatalln("CheckoutGalahadThePure : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGalahadThePure.CheckoutPhaseOneInstance(&galahadthepureDB)
			backRepo.BackRepoGalahadThePure.CheckoutPhaseTwoInstance(backRepo, &galahadthepureDB)
		}
	}
}

// CopyBasicFieldsFromGalahadThePure
func (galahadthepureDB *GalahadThePureDB) CopyBasicFieldsFromGalahadThePure(galahadthepure *models.GalahadThePure) {
	// insertion point for fields commit

	galahadthepureDB.Name_Data.String = galahadthepure.Name
	galahadthepureDB.Name_Data.Valid = true

	galahadthepureDB.Description_Data.String = galahadthepure.Description
	galahadthepureDB.Description_Data.Valid = true
}

// CopyBasicFieldsFromGalahadThePure_WOP
func (galahadthepureDB *GalahadThePureDB) CopyBasicFieldsFromGalahadThePure_WOP(galahadthepure *models.GalahadThePure_WOP) {
	// insertion point for fields commit

	galahadthepureDB.Name_Data.String = galahadthepure.Name
	galahadthepureDB.Name_Data.Valid = true

	galahadthepureDB.Description_Data.String = galahadthepure.Description
	galahadthepureDB.Description_Data.Valid = true
}

// CopyBasicFieldsFromGalahadThePureWOP
func (galahadthepureDB *GalahadThePureDB) CopyBasicFieldsFromGalahadThePureWOP(galahadthepure *GalahadThePureWOP) {
	// insertion point for fields commit

	galahadthepureDB.Name_Data.String = galahadthepure.Name
	galahadthepureDB.Name_Data.Valid = true

	galahadthepureDB.Description_Data.String = galahadthepure.Description
	galahadthepureDB.Description_Data.Valid = true
}

// CopyBasicFieldsToGalahadThePure
func (galahadthepureDB *GalahadThePureDB) CopyBasicFieldsToGalahadThePure(galahadthepure *models.GalahadThePure) {
	// insertion point for checkout of basic fields (back repo to stage)
	galahadthepure.Name = galahadthepureDB.Name_Data.String
	galahadthepure.Description = galahadthepureDB.Description_Data.String
}

// CopyBasicFieldsToGalahadThePure_WOP
func (galahadthepureDB *GalahadThePureDB) CopyBasicFieldsToGalahadThePure_WOP(galahadthepure *models.GalahadThePure_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	galahadthepure.Name = galahadthepureDB.Name_Data.String
	galahadthepure.Description = galahadthepureDB.Description_Data.String
}

// CopyBasicFieldsToGalahadThePureWOP
func (galahadthepureDB *GalahadThePureDB) CopyBasicFieldsToGalahadThePureWOP(galahadthepure *GalahadThePureWOP) {
	galahadthepure.ID = int(galahadthepureDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	galahadthepure.Name = galahadthepureDB.Name_Data.String
	galahadthepure.Description = galahadthepureDB.Description_Data.String
}

// Backup generates a json file from a slice of all GalahadThePureDB instances in the backrepo
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GalahadThePureDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GalahadThePureDB, 0)
	for _, galahadthepureDB := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB {
		forBackup = append(forBackup, galahadthepureDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GalahadThePure ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GalahadThePure file", err.Error())
	}
}

// Backup generates a json file from a slice of all GalahadThePureDB instances in the backrepo
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GalahadThePureDB, 0)
	for _, galahadthepureDB := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB {
		forBackup = append(forBackup, galahadthepureDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GalahadThePure")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GalahadThePure_Fields, -1)
	for _, galahadthepureDB := range forBackup {

		var galahadthepureWOP GalahadThePureWOP
		galahadthepureDB.CopyBasicFieldsToGalahadThePureWOP(&galahadthepureWOP)

		row := sh.AddRow()
		row.WriteStruct(&galahadthepureWOP, -1)
	}
}

// RestoreXL from the "GalahadThePure" sheet all GalahadThePureDB instances
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGalahadThePureid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GalahadThePure"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGalahadThePure.rowVisitorGalahadThePure)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) rowVisitorGalahadThePure(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var galahadthepureWOP GalahadThePureWOP
		row.ReadStruct(&galahadthepureWOP)

		// add the unmarshalled struct to the stage
		galahadthepureDB := new(GalahadThePureDB)
		galahadthepureDB.CopyBasicFieldsFromGalahadThePureWOP(&galahadthepureWOP)

		galahadthepureDB_ID_atBackupTime := galahadthepureDB.ID
		galahadthepureDB.ID = 0
		query := backRepoGalahadThePure.db.Create(galahadthepureDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[galahadthepureDB.ID] = galahadthepureDB
		BackRepoGalahadThePureid_atBckpTime_newID[galahadthepureDB_ID_atBackupTime] = galahadthepureDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GalahadThePureDB.json" in dirPath that stores an array
// of GalahadThePureDB and stores it in the database
// the map BackRepoGalahadThePureid_atBckpTime_newID is updated accordingly
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGalahadThePureid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GalahadThePureDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GalahadThePure file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GalahadThePureDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GalahadThePureDBID_GalahadThePureDB
	for _, galahadthepureDB := range forRestore {

		galahadthepureDB_ID_atBackupTime := galahadthepureDB.ID
		galahadthepureDB.ID = 0
		query := backRepoGalahadThePure.db.Create(galahadthepureDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[galahadthepureDB.ID] = galahadthepureDB
		BackRepoGalahadThePureid_atBckpTime_newID[galahadthepureDB_ID_atBackupTime] = galahadthepureDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GalahadThePure file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GalahadThePure>id_atBckpTime_newID
// to compute new index
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) RestorePhaseTwo() {

	for _, galahadthepureDB := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB {

		// next line of code is to avert unused variable compilation error
		_ = galahadthepureDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGalahadThePure.db.Model(galahadthepureDB).Updates(*galahadthepureDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGalahadThePure.ResetReversePointers commits all staged instances of GalahadThePure to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, galahadthepure := range backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr {
		backRepoGalahadThePure.ResetReversePointersInstance(backRepo, idx, galahadthepure)
	}

	return
}

func (backRepoGalahadThePure *BackRepoGalahadThePureStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, galahadthepure *models.GalahadThePure) (Error error) {

	// fetch matching galahadthepureDB
	if galahadthepureDB, ok := backRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePureDB[idx]; ok {
		_ = galahadthepureDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGalahadThePureid_atBckpTime_newID map[uint]uint
