// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Repository_sql sql.NullBool
var dummy_Repository_time time.Duration
var dummy_Repository_sort sort.Float64Slice

// RepositoryAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model repositoryAPI
type RepositoryAPI struct {
	gorm.Model

	models.Repository_WOP

	// encoding of pointers
	RepositoryPointersEncoding RepositoryPointersEncoding
}

// RepositoryPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RepositoryPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ParameterUse is a slice of pointers to another Struct (optional or 0..1)
	ParameterUse IntSlice `gorm:"type:TEXT"`

	// field GroupUse is a slice of pointers to another Struct (optional or 0..1)
	GroupUse IntSlice `gorm:"type:TEXT"`
}

// RepositoryDB describes a repository in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model repositoryDB
type RepositoryDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field repositoryDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	RepositoryPointersEncoding
}

// RepositoryDBs arrays repositoryDBs
// swagger:response repositoryDBsResponse
type RepositoryDBs []RepositoryDB

// RepositoryDBResponse provides response
// swagger:response repositoryDBResponse
type RepositoryDBResponse struct {
	RepositoryDB
}

// RepositoryWOP is a Repository without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RepositoryWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Repository_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoRepositoryStruct struct {
	// stores RepositoryDB according to their gorm ID
	Map_RepositoryDBID_RepositoryDB map[uint]*RepositoryDB

	// stores RepositoryDB ID according to Repository address
	Map_RepositoryPtr_RepositoryDBID map[*models.Repository]uint

	// stores Repository according to their gorm ID
	Map_RepositoryDBID_RepositoryPtr map[uint]*models.Repository

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRepository *BackRepoRepositoryStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRepository.stage
	return
}

func (backRepoRepository *BackRepoRepositoryStruct) GetDB() *gorm.DB {
	return backRepoRepository.db
}

// GetRepositoryDBFromRepositoryPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRepository *BackRepoRepositoryStruct) GetRepositoryDBFromRepositoryPtr(repository *models.Repository) (repositoryDB *RepositoryDB) {
	id := backRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository]
	repositoryDB = backRepoRepository.Map_RepositoryDBID_RepositoryDB[id]
	return
}

// BackRepoRepository.CommitPhaseOne commits all staged instances of Repository to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRepository *BackRepoRepositoryStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for repository := range stage.Repositorys {
		backRepoRepository.CommitPhaseOneInstance(repository)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, repository := range backRepoRepository.Map_RepositoryDBID_RepositoryPtr {
		if _, ok := stage.Repositorys[repository]; !ok {
			backRepoRepository.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRepository.CommitDeleteInstance commits deletion of Repository to the BackRepo
func (backRepoRepository *BackRepoRepositoryStruct) CommitDeleteInstance(id uint) (Error error) {

	repository := backRepoRepository.Map_RepositoryDBID_RepositoryPtr[id]

	// repository is not staged anymore, remove repositoryDB
	repositoryDB := backRepoRepository.Map_RepositoryDBID_RepositoryDB[id]
	query := backRepoRepository.db.Unscoped().Delete(&repositoryDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRepository.Map_RepositoryPtr_RepositoryDBID, repository)
	delete(backRepoRepository.Map_RepositoryDBID_RepositoryPtr, id)
	delete(backRepoRepository.Map_RepositoryDBID_RepositoryDB, id)

	return
}

// BackRepoRepository.CommitPhaseOneInstance commits repository staged instances of Repository to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRepository *BackRepoRepositoryStruct) CommitPhaseOneInstance(repository *models.Repository) (Error error) {

	// check if the repository is not commited yet
	if _, ok := backRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository]; ok {
		return
	}

	// initiate repository
	var repositoryDB RepositoryDB
	repositoryDB.CopyBasicFieldsFromRepository(repository)

	query := backRepoRepository.db.Create(&repositoryDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository] = repositoryDB.ID
	backRepoRepository.Map_RepositoryDBID_RepositoryPtr[repositoryDB.ID] = repository
	backRepoRepository.Map_RepositoryDBID_RepositoryDB[repositoryDB.ID] = &repositoryDB

	return
}

// BackRepoRepository.CommitPhaseTwo commits all staged instances of Repository to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepository *BackRepoRepositoryStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, repository := range backRepoRepository.Map_RepositoryDBID_RepositoryPtr {
		backRepoRepository.CommitPhaseTwoInstance(backRepo, idx, repository)
	}

	return
}

// BackRepoRepository.CommitPhaseTwoInstance commits {{structname }} of models.Repository to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepository *BackRepoRepositoryStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, repository *models.Repository) (Error error) {

	// fetch matching repositoryDB
	if repositoryDB, ok := backRepoRepository.Map_RepositoryDBID_RepositoryDB[idx]; ok {

		repositoryDB.CopyBasicFieldsFromRepository(repository)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		repositoryDB.RepositoryPointersEncoding.ParameterUse = make([]int, 0)
		// 2. encode
		for _, knightwhosayniAssocEnd := range repository.ParameterUse {
			knightwhosayniAssocEnd_DB :=
				backRepo.BackRepoKnightWhoSayNi.GetKnightWhoSayNiDBFromKnightWhoSayNiPtr(knightwhosayniAssocEnd)

			// the stage might be inconsistant, meaning that the knightwhosayniAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if knightwhosayniAssocEnd_DB == nil {
				continue
			}

			repositoryDB.RepositoryPointersEncoding.ParameterUse =
				append(repositoryDB.RepositoryPointersEncoding.ParameterUse, int(knightwhosayniAssocEnd_DB.ID))
		}

		// 1. reset
		repositoryDB.RepositoryPointersEncoding.GroupUse = make([]int, 0)
		// 2. encode
		for _, groupuseAssocEnd := range repository.GroupUse {
			groupuseAssocEnd_DB :=
				backRepo.BackRepoGroupUse.GetGroupUseDBFromGroupUsePtr(groupuseAssocEnd)

			// the stage might be inconsistant, meaning that the groupuseAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupuseAssocEnd_DB == nil {
				continue
			}

			repositoryDB.RepositoryPointersEncoding.GroupUse =
				append(repositoryDB.RepositoryPointersEncoding.GroupUse, int(groupuseAssocEnd_DB.ID))
		}

		query := backRepoRepository.db.Save(&repositoryDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Repository intance %s", repository.Name))
		return err
	}

	return
}

// BackRepoRepository.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRepository *BackRepoRepositoryStruct) CheckoutPhaseOne() (Error error) {

	repositoryDBArray := make([]RepositoryDB, 0)
	query := backRepoRepository.db.Find(&repositoryDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	repositoryInstancesToBeRemovedFromTheStage := make(map[*models.Repository]any)
	for key, value := range backRepoRepository.stage.Repositorys {
		repositoryInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, repositoryDB := range repositoryDBArray {
		backRepoRepository.CheckoutPhaseOneInstance(&repositoryDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		repository, ok := backRepoRepository.Map_RepositoryDBID_RepositoryPtr[repositoryDB.ID]
		if ok {
			delete(repositoryInstancesToBeRemovedFromTheStage, repository)
		}
	}

	// remove from stage and back repo's 3 maps all repositorys that are not in the checkout
	for repository := range repositoryInstancesToBeRemovedFromTheStage {
		repository.Unstage(backRepoRepository.GetStage())

		// remove instance from the back repo 3 maps
		repositoryID := backRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository]
		delete(backRepoRepository.Map_RepositoryPtr_RepositoryDBID, repository)
		delete(backRepoRepository.Map_RepositoryDBID_RepositoryDB, repositoryID)
		delete(backRepoRepository.Map_RepositoryDBID_RepositoryPtr, repositoryID)
	}

	return
}

// CheckoutPhaseOneInstance takes a repositoryDB that has been found in the DB, updates the backRepo and stages the
// models version of the repositoryDB
func (backRepoRepository *BackRepoRepositoryStruct) CheckoutPhaseOneInstance(repositoryDB *RepositoryDB) (Error error) {

	repository, ok := backRepoRepository.Map_RepositoryDBID_RepositoryPtr[repositoryDB.ID]
	if !ok {
		repository = new(models.Repository)

		backRepoRepository.Map_RepositoryDBID_RepositoryPtr[repositoryDB.ID] = repository
		backRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository] = repositoryDB.ID

		// append model store with the new element
		repository.Name = repositoryDB.Name_Data.String
		repository.Stage(backRepoRepository.GetStage())
	}
	repositoryDB.CopyBasicFieldsToRepository(repository)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	repository.Stage(backRepoRepository.GetStage())

	// preserve pointer to repositoryDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RepositoryDBID_RepositoryDB)[repositoryDB hold variable pointers
	repositoryDB_Data := *repositoryDB
	preservedPtrToRepository := &repositoryDB_Data
	backRepoRepository.Map_RepositoryDBID_RepositoryDB[repositoryDB.ID] = preservedPtrToRepository

	return
}

// BackRepoRepository.CheckoutPhaseTwo Checkouts all staged instances of Repository to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepository *BackRepoRepositoryStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, repositoryDB := range backRepoRepository.Map_RepositoryDBID_RepositoryDB {
		backRepoRepository.CheckoutPhaseTwoInstance(backRepo, repositoryDB)
	}
	return
}

// BackRepoRepository.CheckoutPhaseTwoInstance Checkouts staged instances of Repository to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepository *BackRepoRepositoryStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, repositoryDB *RepositoryDB) (Error error) {

	repository := backRepoRepository.Map_RepositoryDBID_RepositoryPtr[repositoryDB.ID]

	repositoryDB.DecodePointers(backRepo, repository)

	return
}

func (repositoryDB *RepositoryDB) DecodePointers(backRepo *BackRepoStruct, repository *models.Repository) {

	// insertion point for checkout of pointer encoding
	// This loop redeem repository.ParameterUse in the stage from the encode in the back repo
	// It parses all KnightWhoSayNiDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	repository.ParameterUse = repository.ParameterUse[:0]
	for _, _KnightWhoSayNiid := range repositoryDB.RepositoryPointersEncoding.ParameterUse {
		repository.ParameterUse = append(repository.ParameterUse, backRepo.BackRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[uint(_KnightWhoSayNiid)])
	}

	// This loop redeem repository.GroupUse in the stage from the encode in the back repo
	// It parses all GroupUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	repository.GroupUse = repository.GroupUse[:0]
	for _, _GroupUseid := range repositoryDB.RepositoryPointersEncoding.GroupUse {
		repository.GroupUse = append(repository.GroupUse, backRepo.BackRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[uint(_GroupUseid)])
	}

	return
}

// CommitRepository allows commit of a single repository (if already staged)
func (backRepo *BackRepoStruct) CommitRepository(repository *models.Repository) {
	backRepo.BackRepoRepository.CommitPhaseOneInstance(repository)
	if id, ok := backRepo.BackRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository]; ok {
		backRepo.BackRepoRepository.CommitPhaseTwoInstance(backRepo, id, repository)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRepository allows checkout of a single repository (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRepository(repository *models.Repository) {
	// check if the repository is staged
	if _, ok := backRepo.BackRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository]; ok {

		if id, ok := backRepo.BackRepoRepository.Map_RepositoryPtr_RepositoryDBID[repository]; ok {
			var repositoryDB RepositoryDB
			repositoryDB.ID = id

			if err := backRepo.BackRepoRepository.db.First(&repositoryDB, id).Error; err != nil {
				log.Fatalln("CheckoutRepository : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRepository.CheckoutPhaseOneInstance(&repositoryDB)
			backRepo.BackRepoRepository.CheckoutPhaseTwoInstance(backRepo, &repositoryDB)
		}
	}
}

// CopyBasicFieldsFromRepository
func (repositoryDB *RepositoryDB) CopyBasicFieldsFromRepository(repository *models.Repository) {
	// insertion point for fields commit

	repositoryDB.Name_Data.String = repository.Name
	repositoryDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRepository_WOP
func (repositoryDB *RepositoryDB) CopyBasicFieldsFromRepository_WOP(repository *models.Repository_WOP) {
	// insertion point for fields commit

	repositoryDB.Name_Data.String = repository.Name
	repositoryDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRepositoryWOP
func (repositoryDB *RepositoryDB) CopyBasicFieldsFromRepositoryWOP(repository *RepositoryWOP) {
	// insertion point for fields commit

	repositoryDB.Name_Data.String = repository.Name
	repositoryDB.Name_Data.Valid = true
}

// CopyBasicFieldsToRepository
func (repositoryDB *RepositoryDB) CopyBasicFieldsToRepository(repository *models.Repository) {
	// insertion point for checkout of basic fields (back repo to stage)
	repository.Name = repositoryDB.Name_Data.String
}

// CopyBasicFieldsToRepository_WOP
func (repositoryDB *RepositoryDB) CopyBasicFieldsToRepository_WOP(repository *models.Repository_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	repository.Name = repositoryDB.Name_Data.String
}

// CopyBasicFieldsToRepositoryWOP
func (repositoryDB *RepositoryDB) CopyBasicFieldsToRepositoryWOP(repository *RepositoryWOP) {
	repository.ID = int(repositoryDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	repository.Name = repositoryDB.Name_Data.String
}

// Backup generates a json file from a slice of all RepositoryDB instances in the backrepo
func (backRepoRepository *BackRepoRepositoryStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RepositoryDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RepositoryDB, 0)
	for _, repositoryDB := range backRepoRepository.Map_RepositoryDBID_RepositoryDB {
		forBackup = append(forBackup, repositoryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Repository ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Repository file", err.Error())
	}
}

// Backup generates a json file from a slice of all RepositoryDB instances in the backrepo
func (backRepoRepository *BackRepoRepositoryStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RepositoryDB, 0)
	for _, repositoryDB := range backRepoRepository.Map_RepositoryDBID_RepositoryDB {
		forBackup = append(forBackup, repositoryDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Repository")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Repository_Fields, -1)
	for _, repositoryDB := range forBackup {

		var repositoryWOP RepositoryWOP
		repositoryDB.CopyBasicFieldsToRepositoryWOP(&repositoryWOP)

		row := sh.AddRow()
		row.WriteStruct(&repositoryWOP, -1)
	}
}

// RestoreXL from the "Repository" sheet all RepositoryDB instances
func (backRepoRepository *BackRepoRepositoryStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRepositoryid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Repository"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRepository.rowVisitorRepository)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRepository *BackRepoRepositoryStruct) rowVisitorRepository(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var repositoryWOP RepositoryWOP
		row.ReadStruct(&repositoryWOP)

		// add the unmarshalled struct to the stage
		repositoryDB := new(RepositoryDB)
		repositoryDB.CopyBasicFieldsFromRepositoryWOP(&repositoryWOP)

		repositoryDB_ID_atBackupTime := repositoryDB.ID
		repositoryDB.ID = 0
		query := backRepoRepository.db.Create(repositoryDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRepository.Map_RepositoryDBID_RepositoryDB[repositoryDB.ID] = repositoryDB
		BackRepoRepositoryid_atBckpTime_newID[repositoryDB_ID_atBackupTime] = repositoryDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RepositoryDB.json" in dirPath that stores an array
// of RepositoryDB and stores it in the database
// the map BackRepoRepositoryid_atBckpTime_newID is updated accordingly
func (backRepoRepository *BackRepoRepositoryStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRepositoryid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RepositoryDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Repository file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RepositoryDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RepositoryDBID_RepositoryDB
	for _, repositoryDB := range forRestore {

		repositoryDB_ID_atBackupTime := repositoryDB.ID
		repositoryDB.ID = 0
		query := backRepoRepository.db.Create(repositoryDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRepository.Map_RepositoryDBID_RepositoryDB[repositoryDB.ID] = repositoryDB
		BackRepoRepositoryid_atBckpTime_newID[repositoryDB_ID_atBackupTime] = repositoryDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Repository file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Repository>id_atBckpTime_newID
// to compute new index
func (backRepoRepository *BackRepoRepositoryStruct) RestorePhaseTwo() {

	for _, repositoryDB := range backRepoRepository.Map_RepositoryDBID_RepositoryDB {

		// next line of code is to avert unused variable compilation error
		_ = repositoryDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRepository.db.Model(repositoryDB).Updates(*repositoryDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRepository.ResetReversePointers commits all staged instances of Repository to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRepository *BackRepoRepositoryStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, repository := range backRepoRepository.Map_RepositoryDBID_RepositoryPtr {
		backRepoRepository.ResetReversePointersInstance(backRepo, idx, repository)
	}

	return
}

func (backRepoRepository *BackRepoRepositoryStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, repository *models.Repository) (Error error) {

	// fetch matching repositoryDB
	if repositoryDB, ok := backRepoRepository.Map_RepositoryDBID_RepositoryDB[idx]; ok {
		_ = repositoryDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRepositoryid_atBckpTime_newID map[uint]uint
