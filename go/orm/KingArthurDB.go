// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_KingArthur_sql sql.NullBool
var dummy_KingArthur_time time.Duration
var dummy_KingArthur_sort sort.Float64Slice

// KingArthurAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model kingarthurAPI
type KingArthurAPI struct {
	gorm.Model

	models.KingArthur_WOP

	// encoding of pointers
	KingArthurPointersEncoding KingArthurPointersEncoding
}

// KingArthurPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type KingArthurPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// KingArthurDB describes a kingarthur in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model kingarthurDB
type KingArthurDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field kingarthurDB.Name
	Name_Data sql.NullString

	// Declation for basic field kingarthurDB.IsWithProbaility
	// provide the sql storage for the boolan
	IsWithProbaility_Data sql.NullBool

	// Declation for basic field kingarthurDB.Probability
	Probability_Data sql.NullString
	// encoding of pointers
	KingArthurPointersEncoding
}

// KingArthurDBs arrays kingarthurDBs
// swagger:response kingarthurDBsResponse
type KingArthurDBs []KingArthurDB

// KingArthurDBResponse provides response
// swagger:response kingarthurDBResponse
type KingArthurDBResponse struct {
	KingArthurDB
}

// KingArthurWOP is a KingArthur without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type KingArthurWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsWithProbaility bool `xlsx:"2"`

	Probability models.ProbabilityEnum `xlsx:"3"`
	// insertion for WOP pointer fields
}

var KingArthur_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsWithProbaility",
	"Probability",
}

type BackRepoKingArthurStruct struct {
	// stores KingArthurDB according to their gorm ID
	Map_KingArthurDBID_KingArthurDB map[uint]*KingArthurDB

	// stores KingArthurDB ID according to KingArthur address
	Map_KingArthurPtr_KingArthurDBID map[*models.KingArthur]uint

	// stores KingArthur according to their gorm ID
	Map_KingArthurDBID_KingArthurPtr map[uint]*models.KingArthur

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoKingArthur *BackRepoKingArthurStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKingArthur.stage
	return
}

func (backRepoKingArthur *BackRepoKingArthurStruct) GetDB() *gorm.DB {
	return backRepoKingArthur.db
}

// GetKingArthurDBFromKingArthurPtr is a handy function to access the back repo instance from the stage instance
func (backRepoKingArthur *BackRepoKingArthurStruct) GetKingArthurDBFromKingArthurPtr(kingarthur *models.KingArthur) (kingarthurDB *KingArthurDB) {
	id := backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur]
	kingarthurDB = backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[id]
	return
}

// BackRepoKingArthur.CommitPhaseOne commits all staged instances of KingArthur to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKingArthur *BackRepoKingArthurStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for kingarthur := range stage.KingArthurs {
		backRepoKingArthur.CommitPhaseOneInstance(kingarthur)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, kingarthur := range backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr {
		if _, ok := stage.KingArthurs[kingarthur]; !ok {
			backRepoKingArthur.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKingArthur.CommitDeleteInstance commits deletion of KingArthur to the BackRepo
func (backRepoKingArthur *BackRepoKingArthurStruct) CommitDeleteInstance(id uint) (Error error) {

	kingarthur := backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[id]

	// kingarthur is not staged anymore, remove kingarthurDB
	kingarthurDB := backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[id]
	query := backRepoKingArthur.db.Unscoped().Delete(&kingarthurDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID, kingarthur)
	delete(backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr, id)
	delete(backRepoKingArthur.Map_KingArthurDBID_KingArthurDB, id)

	return
}

// BackRepoKingArthur.CommitPhaseOneInstance commits kingarthur staged instances of KingArthur to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKingArthur *BackRepoKingArthurStruct) CommitPhaseOneInstance(kingarthur *models.KingArthur) (Error error) {

	// check if the kingarthur is not commited yet
	if _, ok := backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur]; ok {
		return
	}

	// initiate kingarthur
	var kingarthurDB KingArthurDB
	kingarthurDB.CopyBasicFieldsFromKingArthur(kingarthur)

	query := backRepoKingArthur.db.Create(&kingarthurDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur] = kingarthurDB.ID
	backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[kingarthurDB.ID] = kingarthur
	backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[kingarthurDB.ID] = &kingarthurDB

	return
}

// BackRepoKingArthur.CommitPhaseTwo commits all staged instances of KingArthur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthur *BackRepoKingArthurStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, kingarthur := range backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr {
		backRepoKingArthur.CommitPhaseTwoInstance(backRepo, idx, kingarthur)
	}

	return
}

// BackRepoKingArthur.CommitPhaseTwoInstance commits {{structname }} of models.KingArthur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthur *BackRepoKingArthurStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, kingarthur *models.KingArthur) (Error error) {

	// fetch matching kingarthurDB
	if kingarthurDB, ok := backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[idx]; ok {

		kingarthurDB.CopyBasicFieldsFromKingArthur(kingarthur)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoKingArthur.db.Save(&kingarthurDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown KingArthur intance %s", kingarthur.Name))
		return err
	}

	return
}

// BackRepoKingArthur.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKingArthur *BackRepoKingArthurStruct) CheckoutPhaseOne() (Error error) {

	kingarthurDBArray := make([]KingArthurDB, 0)
	query := backRepoKingArthur.db.Find(&kingarthurDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	kingarthurInstancesToBeRemovedFromTheStage := make(map[*models.KingArthur]any)
	for key, value := range backRepoKingArthur.stage.KingArthurs {
		kingarthurInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, kingarthurDB := range kingarthurDBArray {
		backRepoKingArthur.CheckoutPhaseOneInstance(&kingarthurDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		kingarthur, ok := backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[kingarthurDB.ID]
		if ok {
			delete(kingarthurInstancesToBeRemovedFromTheStage, kingarthur)
		}
	}

	// remove from stage and back repo's 3 maps all kingarthurs that are not in the checkout
	for kingarthur := range kingarthurInstancesToBeRemovedFromTheStage {
		kingarthur.Unstage(backRepoKingArthur.GetStage())

		// remove instance from the back repo 3 maps
		kingarthurID := backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur]
		delete(backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID, kingarthur)
		delete(backRepoKingArthur.Map_KingArthurDBID_KingArthurDB, kingarthurID)
		delete(backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr, kingarthurID)
	}

	return
}

// CheckoutPhaseOneInstance takes a kingarthurDB that has been found in the DB, updates the backRepo and stages the
// models version of the kingarthurDB
func (backRepoKingArthur *BackRepoKingArthurStruct) CheckoutPhaseOneInstance(kingarthurDB *KingArthurDB) (Error error) {

	kingarthur, ok := backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[kingarthurDB.ID]
	if !ok {
		kingarthur = new(models.KingArthur)

		backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[kingarthurDB.ID] = kingarthur
		backRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur] = kingarthurDB.ID

		// append model store with the new element
		kingarthur.Name = kingarthurDB.Name_Data.String
		kingarthur.Stage(backRepoKingArthur.GetStage())
	}
	kingarthurDB.CopyBasicFieldsToKingArthur(kingarthur)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	kingarthur.Stage(backRepoKingArthur.GetStage())

	// preserve pointer to kingarthurDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_KingArthurDBID_KingArthurDB)[kingarthurDB hold variable pointers
	kingarthurDB_Data := *kingarthurDB
	preservedPtrToKingArthur := &kingarthurDB_Data
	backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[kingarthurDB.ID] = preservedPtrToKingArthur

	return
}

// BackRepoKingArthur.CheckoutPhaseTwo Checkouts all staged instances of KingArthur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthur *BackRepoKingArthurStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, kingarthurDB := range backRepoKingArthur.Map_KingArthurDBID_KingArthurDB {
		backRepoKingArthur.CheckoutPhaseTwoInstance(backRepo, kingarthurDB)
	}
	return
}

// BackRepoKingArthur.CheckoutPhaseTwoInstance Checkouts staged instances of KingArthur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthur *BackRepoKingArthurStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, kingarthurDB *KingArthurDB) (Error error) {

	kingarthur := backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[kingarthurDB.ID]

	kingarthurDB.DecodePointers(backRepo, kingarthur)

	return
}

func (kingarthurDB *KingArthurDB) DecodePointers(backRepo *BackRepoStruct, kingarthur *models.KingArthur) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitKingArthur allows commit of a single kingarthur (if already staged)
func (backRepo *BackRepoStruct) CommitKingArthur(kingarthur *models.KingArthur) {
	backRepo.BackRepoKingArthur.CommitPhaseOneInstance(kingarthur)
	if id, ok := backRepo.BackRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur]; ok {
		backRepo.BackRepoKingArthur.CommitPhaseTwoInstance(backRepo, id, kingarthur)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKingArthur allows checkout of a single kingarthur (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKingArthur(kingarthur *models.KingArthur) {
	// check if the kingarthur is staged
	if _, ok := backRepo.BackRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur]; ok {

		if id, ok := backRepo.BackRepoKingArthur.Map_KingArthurPtr_KingArthurDBID[kingarthur]; ok {
			var kingarthurDB KingArthurDB
			kingarthurDB.ID = id

			if err := backRepo.BackRepoKingArthur.db.First(&kingarthurDB, id).Error; err != nil {
				log.Fatalln("CheckoutKingArthur : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKingArthur.CheckoutPhaseOneInstance(&kingarthurDB)
			backRepo.BackRepoKingArthur.CheckoutPhaseTwoInstance(backRepo, &kingarthurDB)
		}
	}
}

// CopyBasicFieldsFromKingArthur
func (kingarthurDB *KingArthurDB) CopyBasicFieldsFromKingArthur(kingarthur *models.KingArthur) {
	// insertion point for fields commit

	kingarthurDB.Name_Data.String = kingarthur.Name
	kingarthurDB.Name_Data.Valid = true

	kingarthurDB.IsWithProbaility_Data.Bool = kingarthur.IsWithProbaility
	kingarthurDB.IsWithProbaility_Data.Valid = true

	kingarthurDB.Probability_Data.String = kingarthur.Probability.ToString()
	kingarthurDB.Probability_Data.Valid = true
}

// CopyBasicFieldsFromKingArthur_WOP
func (kingarthurDB *KingArthurDB) CopyBasicFieldsFromKingArthur_WOP(kingarthur *models.KingArthur_WOP) {
	// insertion point for fields commit

	kingarthurDB.Name_Data.String = kingarthur.Name
	kingarthurDB.Name_Data.Valid = true

	kingarthurDB.IsWithProbaility_Data.Bool = kingarthur.IsWithProbaility
	kingarthurDB.IsWithProbaility_Data.Valid = true

	kingarthurDB.Probability_Data.String = kingarthur.Probability.ToString()
	kingarthurDB.Probability_Data.Valid = true
}

// CopyBasicFieldsFromKingArthurWOP
func (kingarthurDB *KingArthurDB) CopyBasicFieldsFromKingArthurWOP(kingarthur *KingArthurWOP) {
	// insertion point for fields commit

	kingarthurDB.Name_Data.String = kingarthur.Name
	kingarthurDB.Name_Data.Valid = true

	kingarthurDB.IsWithProbaility_Data.Bool = kingarthur.IsWithProbaility
	kingarthurDB.IsWithProbaility_Data.Valid = true

	kingarthurDB.Probability_Data.String = kingarthur.Probability.ToString()
	kingarthurDB.Probability_Data.Valid = true
}

// CopyBasicFieldsToKingArthur
func (kingarthurDB *KingArthurDB) CopyBasicFieldsToKingArthur(kingarthur *models.KingArthur) {
	// insertion point for checkout of basic fields (back repo to stage)
	kingarthur.Name = kingarthurDB.Name_Data.String
	kingarthur.IsWithProbaility = kingarthurDB.IsWithProbaility_Data.Bool
	kingarthur.Probability.FromString(kingarthurDB.Probability_Data.String)
}

// CopyBasicFieldsToKingArthur_WOP
func (kingarthurDB *KingArthurDB) CopyBasicFieldsToKingArthur_WOP(kingarthur *models.KingArthur_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	kingarthur.Name = kingarthurDB.Name_Data.String
	kingarthur.IsWithProbaility = kingarthurDB.IsWithProbaility_Data.Bool
	kingarthur.Probability.FromString(kingarthurDB.Probability_Data.String)
}

// CopyBasicFieldsToKingArthurWOP
func (kingarthurDB *KingArthurDB) CopyBasicFieldsToKingArthurWOP(kingarthur *KingArthurWOP) {
	kingarthur.ID = int(kingarthurDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	kingarthur.Name = kingarthurDB.Name_Data.String
	kingarthur.IsWithProbaility = kingarthurDB.IsWithProbaility_Data.Bool
	kingarthur.Probability.FromString(kingarthurDB.Probability_Data.String)
}

// Backup generates a json file from a slice of all KingArthurDB instances in the backrepo
func (backRepoKingArthur *BackRepoKingArthurStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "KingArthurDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KingArthurDB, 0)
	for _, kingarthurDB := range backRepoKingArthur.Map_KingArthurDBID_KingArthurDB {
		forBackup = append(forBackup, kingarthurDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json KingArthur ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json KingArthur file", err.Error())
	}
}

// Backup generates a json file from a slice of all KingArthurDB instances in the backrepo
func (backRepoKingArthur *BackRepoKingArthurStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KingArthurDB, 0)
	for _, kingarthurDB := range backRepoKingArthur.Map_KingArthurDBID_KingArthurDB {
		forBackup = append(forBackup, kingarthurDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("KingArthur")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&KingArthur_Fields, -1)
	for _, kingarthurDB := range forBackup {

		var kingarthurWOP KingArthurWOP
		kingarthurDB.CopyBasicFieldsToKingArthurWOP(&kingarthurWOP)

		row := sh.AddRow()
		row.WriteStruct(&kingarthurWOP, -1)
	}
}

// RestoreXL from the "KingArthur" sheet all KingArthurDB instances
func (backRepoKingArthur *BackRepoKingArthurStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKingArthurid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["KingArthur"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKingArthur.rowVisitorKingArthur)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKingArthur *BackRepoKingArthurStruct) rowVisitorKingArthur(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var kingarthurWOP KingArthurWOP
		row.ReadStruct(&kingarthurWOP)

		// add the unmarshalled struct to the stage
		kingarthurDB := new(KingArthurDB)
		kingarthurDB.CopyBasicFieldsFromKingArthurWOP(&kingarthurWOP)

		kingarthurDB_ID_atBackupTime := kingarthurDB.ID
		kingarthurDB.ID = 0
		query := backRepoKingArthur.db.Create(kingarthurDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[kingarthurDB.ID] = kingarthurDB
		BackRepoKingArthurid_atBckpTime_newID[kingarthurDB_ID_atBackupTime] = kingarthurDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "KingArthurDB.json" in dirPath that stores an array
// of KingArthurDB and stores it in the database
// the map BackRepoKingArthurid_atBckpTime_newID is updated accordingly
func (backRepoKingArthur *BackRepoKingArthurStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKingArthurid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "KingArthurDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json KingArthur file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*KingArthurDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_KingArthurDBID_KingArthurDB
	for _, kingarthurDB := range forRestore {

		kingarthurDB_ID_atBackupTime := kingarthurDB.ID
		kingarthurDB.ID = 0
		query := backRepoKingArthur.db.Create(kingarthurDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[kingarthurDB.ID] = kingarthurDB
		BackRepoKingArthurid_atBckpTime_newID[kingarthurDB_ID_atBackupTime] = kingarthurDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json KingArthur file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<KingArthur>id_atBckpTime_newID
// to compute new index
func (backRepoKingArthur *BackRepoKingArthurStruct) RestorePhaseTwo() {

	for _, kingarthurDB := range backRepoKingArthur.Map_KingArthurDBID_KingArthurDB {

		// next line of code is to avert unused variable compilation error
		_ = kingarthurDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoKingArthur.db.Model(kingarthurDB).Updates(*kingarthurDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoKingArthur.ResetReversePointers commits all staged instances of KingArthur to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKingArthur *BackRepoKingArthurStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, kingarthur := range backRepoKingArthur.Map_KingArthurDBID_KingArthurPtr {
		backRepoKingArthur.ResetReversePointersInstance(backRepo, idx, kingarthur)
	}

	return
}

func (backRepoKingArthur *BackRepoKingArthurStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, kingarthur *models.KingArthur) (Error error) {

	// fetch matching kingarthurDB
	if kingarthurDB, ok := backRepoKingArthur.Map_KingArthurDBID_KingArthurDB[idx]; ok {
		_ = kingarthurDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKingArthurid_atBckpTime_newID map[uint]uint
