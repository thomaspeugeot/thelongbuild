// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_KnightWhoSayNi_sql sql.NullBool
var dummy_KnightWhoSayNi_time time.Duration
var dummy_KnightWhoSayNi_sort sort.Float64Slice

// KnightWhoSayNiAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model knightwhosayniAPI
type KnightWhoSayNiAPI struct {
	gorm.Model

	models.KnightWhoSayNi_WOP

	// encoding of pointers
	KnightWhoSayNiPointersEncoding KnightWhoSayNiPointersEncoding
}

// KnightWhoSayNiPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type KnightWhoSayNiPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Parameter is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ParameterID sql.NullInt64
}

// KnightWhoSayNiDB describes a knightwhosayni in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model knightwhosayniDB
type KnightWhoSayNiDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field knightwhosayniDB.Name
	Name_Data sql.NullString

	// Declation for basic field knightwhosayniDB.Direction
	Direction_Data sql.NullString

	// Declation for basic field knightwhosayniDB.X
	X_Data sql.NullFloat64

	// Declation for basic field knightwhosayniDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field knightwhosayniDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field knightwhosayniDB.Height
	Height_Data sql.NullFloat64

	// Declation for basic field knightwhosayniDB.FillColor
	FillColor_Data sql.NullString

	// Declation for basic field knightwhosayniDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field knightwhosayniDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field knightwhosayniDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field knightwhosayniDB.RX
	RX_Data sql.NullFloat64
	// encoding of pointers
	KnightWhoSayNiPointersEncoding
}

// KnightWhoSayNiDBs arrays knightwhosayniDBs
// swagger:response knightwhosayniDBsResponse
type KnightWhoSayNiDBs []KnightWhoSayNiDB

// KnightWhoSayNiDBResponse provides response
// swagger:response knightwhosayniDBResponse
type KnightWhoSayNiDBResponse struct {
	KnightWhoSayNiDB
}

// KnightWhoSayNiWOP is a KnightWhoSayNi without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type KnightWhoSayNiWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Direction models.DirectionType `xlsx:"2"`

	X float64 `xlsx:"3"`

	Y float64 `xlsx:"4"`

	Width float64 `xlsx:"5"`

	Height float64 `xlsx:"6"`

	FillColor string `xlsx:"7"`

	FillOpacity float64 `xlsx:"8"`

	Stroke string `xlsx:"9"`

	StrokeWidth float64 `xlsx:"10"`

	RX float64 `xlsx:"11"`
	// insertion for WOP pointer fields
}

var KnightWhoSayNi_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Direction",
	"X",
	"Y",
	"Width",
	"Height",
	"FillColor",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"RX",
}

type BackRepoKnightWhoSayNiStruct struct {
	// stores KnightWhoSayNiDB according to their gorm ID
	Map_KnightWhoSayNiDBID_KnightWhoSayNiDB map[uint]*KnightWhoSayNiDB

	// stores KnightWhoSayNiDB ID according to KnightWhoSayNi address
	Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID map[*models.KnightWhoSayNi]uint

	// stores KnightWhoSayNi according to their gorm ID
	Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr map[uint]*models.KnightWhoSayNi

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoKnightWhoSayNi.stage
	return
}

func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) GetDB() *gorm.DB {
	return backRepoKnightWhoSayNi.db
}

// GetKnightWhoSayNiDBFromKnightWhoSayNiPtr is a handy function to access the back repo instance from the stage instance
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) GetKnightWhoSayNiDBFromKnightWhoSayNiPtr(knightwhosayni *models.KnightWhoSayNi) (knightwhosayniDB *KnightWhoSayNiDB) {
	id := backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni]
	knightwhosayniDB = backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[id]
	return
}

// BackRepoKnightWhoSayNi.CommitPhaseOne commits all staged instances of KnightWhoSayNi to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for knightwhosayni := range stage.KnightWhoSayNis {
		backRepoKnightWhoSayNi.CommitPhaseOneInstance(knightwhosayni)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, knightwhosayni := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr {
		if _, ok := stage.KnightWhoSayNis[knightwhosayni]; !ok {
			backRepoKnightWhoSayNi.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoKnightWhoSayNi.CommitDeleteInstance commits deletion of KnightWhoSayNi to the BackRepo
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CommitDeleteInstance(id uint) (Error error) {

	knightwhosayni := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[id]

	// knightwhosayni is not staged anymore, remove knightwhosayniDB
	knightwhosayniDB := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[id]
	query := backRepoKnightWhoSayNi.db.Unscoped().Delete(&knightwhosayniDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID, knightwhosayni)
	delete(backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr, id)
	delete(backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB, id)

	return
}

// BackRepoKnightWhoSayNi.CommitPhaseOneInstance commits knightwhosayni staged instances of KnightWhoSayNi to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CommitPhaseOneInstance(knightwhosayni *models.KnightWhoSayNi) (Error error) {

	// check if the knightwhosayni is not commited yet
	if _, ok := backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni]; ok {
		return
	}

	// initiate knightwhosayni
	var knightwhosayniDB KnightWhoSayNiDB
	knightwhosayniDB.CopyBasicFieldsFromKnightWhoSayNi(knightwhosayni)

	query := backRepoKnightWhoSayNi.db.Create(&knightwhosayniDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni] = knightwhosayniDB.ID
	backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[knightwhosayniDB.ID] = knightwhosayni
	backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[knightwhosayniDB.ID] = &knightwhosayniDB

	return
}

// BackRepoKnightWhoSayNi.CommitPhaseTwo commits all staged instances of KnightWhoSayNi to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, knightwhosayni := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr {
		backRepoKnightWhoSayNi.CommitPhaseTwoInstance(backRepo, idx, knightwhosayni)
	}

	return
}

// BackRepoKnightWhoSayNi.CommitPhaseTwoInstance commits {{structname }} of models.KnightWhoSayNi to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, knightwhosayni *models.KnightWhoSayNi) (Error error) {

	// fetch matching knightwhosayniDB
	if knightwhosayniDB, ok := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[idx]; ok {

		knightwhosayniDB.CopyBasicFieldsFromKnightWhoSayNi(knightwhosayni)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value knightwhosayni.Parameter translates to updating the knightwhosayni.ParameterID
		knightwhosayniDB.ParameterID.Valid = true // allow for a 0 value (nil association)
		if knightwhosayni.Parameter != nil {
			if ParameterId, ok := backRepo.BackRepoLancelot.Map_LancelotPtr_LancelotDBID[knightwhosayni.Parameter]; ok {
				knightwhosayniDB.ParameterID.Int64 = int64(ParameterId)
				knightwhosayniDB.ParameterID.Valid = true
			}
		} else {
			knightwhosayniDB.ParameterID.Int64 = 0
			knightwhosayniDB.ParameterID.Valid = true
		}

		query := backRepoKnightWhoSayNi.db.Save(&knightwhosayniDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown KnightWhoSayNi intance %s", knightwhosayni.Name))
		return err
	}

	return
}

// BackRepoKnightWhoSayNi.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CheckoutPhaseOne() (Error error) {

	knightwhosayniDBArray := make([]KnightWhoSayNiDB, 0)
	query := backRepoKnightWhoSayNi.db.Find(&knightwhosayniDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	knightwhosayniInstancesToBeRemovedFromTheStage := make(map[*models.KnightWhoSayNi]any)
	for key, value := range backRepoKnightWhoSayNi.stage.KnightWhoSayNis {
		knightwhosayniInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, knightwhosayniDB := range knightwhosayniDBArray {
		backRepoKnightWhoSayNi.CheckoutPhaseOneInstance(&knightwhosayniDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		knightwhosayni, ok := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[knightwhosayniDB.ID]
		if ok {
			delete(knightwhosayniInstancesToBeRemovedFromTheStage, knightwhosayni)
		}
	}

	// remove from stage and back repo's 3 maps all knightwhosaynis that are not in the checkout
	for knightwhosayni := range knightwhosayniInstancesToBeRemovedFromTheStage {
		knightwhosayni.Unstage(backRepoKnightWhoSayNi.GetStage())

		// remove instance from the back repo 3 maps
		knightwhosayniID := backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni]
		delete(backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID, knightwhosayni)
		delete(backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB, knightwhosayniID)
		delete(backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr, knightwhosayniID)
	}

	return
}

// CheckoutPhaseOneInstance takes a knightwhosayniDB that has been found in the DB, updates the backRepo and stages the
// models version of the knightwhosayniDB
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CheckoutPhaseOneInstance(knightwhosayniDB *KnightWhoSayNiDB) (Error error) {

	knightwhosayni, ok := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[knightwhosayniDB.ID]
	if !ok {
		knightwhosayni = new(models.KnightWhoSayNi)

		backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[knightwhosayniDB.ID] = knightwhosayni
		backRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni] = knightwhosayniDB.ID

		// append model store with the new element
		knightwhosayni.Name = knightwhosayniDB.Name_Data.String
		knightwhosayni.Stage(backRepoKnightWhoSayNi.GetStage())
	}
	knightwhosayniDB.CopyBasicFieldsToKnightWhoSayNi(knightwhosayni)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	knightwhosayni.Stage(backRepoKnightWhoSayNi.GetStage())

	// preserve pointer to knightwhosayniDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_KnightWhoSayNiDBID_KnightWhoSayNiDB)[knightwhosayniDB hold variable pointers
	knightwhosayniDB_Data := *knightwhosayniDB
	preservedPtrToKnightWhoSayNi := &knightwhosayniDB_Data
	backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[knightwhosayniDB.ID] = preservedPtrToKnightWhoSayNi

	return
}

// BackRepoKnightWhoSayNi.CheckoutPhaseTwo Checkouts all staged instances of KnightWhoSayNi to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, knightwhosayniDB := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB {
		backRepoKnightWhoSayNi.CheckoutPhaseTwoInstance(backRepo, knightwhosayniDB)
	}
	return
}

// BackRepoKnightWhoSayNi.CheckoutPhaseTwoInstance Checkouts staged instances of KnightWhoSayNi to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, knightwhosayniDB *KnightWhoSayNiDB) (Error error) {

	knightwhosayni := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr[knightwhosayniDB.ID]

	knightwhosayniDB.DecodePointers(backRepo, knightwhosayni)

	return
}

func (knightwhosayniDB *KnightWhoSayNiDB) DecodePointers(backRepo *BackRepoStruct, knightwhosayni *models.KnightWhoSayNi) {

	// insertion point for checkout of pointer encoding
	// Parameter field
	knightwhosayni.Parameter = nil
	if knightwhosayniDB.ParameterID.Int64 != 0 {
		knightwhosayni.Parameter = backRepo.BackRepoLancelot.Map_LancelotDBID_LancelotPtr[uint(knightwhosayniDB.ParameterID.Int64)]
	}
	return
}

// CommitKnightWhoSayNi allows commit of a single knightwhosayni (if already staged)
func (backRepo *BackRepoStruct) CommitKnightWhoSayNi(knightwhosayni *models.KnightWhoSayNi) {
	backRepo.BackRepoKnightWhoSayNi.CommitPhaseOneInstance(knightwhosayni)
	if id, ok := backRepo.BackRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni]; ok {
		backRepo.BackRepoKnightWhoSayNi.CommitPhaseTwoInstance(backRepo, id, knightwhosayni)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitKnightWhoSayNi allows checkout of a single knightwhosayni (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutKnightWhoSayNi(knightwhosayni *models.KnightWhoSayNi) {
	// check if the knightwhosayni is staged
	if _, ok := backRepo.BackRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni]; ok {

		if id, ok := backRepo.BackRepoKnightWhoSayNi.Map_KnightWhoSayNiPtr_KnightWhoSayNiDBID[knightwhosayni]; ok {
			var knightwhosayniDB KnightWhoSayNiDB
			knightwhosayniDB.ID = id

			if err := backRepo.BackRepoKnightWhoSayNi.db.First(&knightwhosayniDB, id).Error; err != nil {
				log.Fatalln("CheckoutKnightWhoSayNi : Problem with getting object with id:", id)
			}
			backRepo.BackRepoKnightWhoSayNi.CheckoutPhaseOneInstance(&knightwhosayniDB)
			backRepo.BackRepoKnightWhoSayNi.CheckoutPhaseTwoInstance(backRepo, &knightwhosayniDB)
		}
	}
}

// CopyBasicFieldsFromKnightWhoSayNi
func (knightwhosayniDB *KnightWhoSayNiDB) CopyBasicFieldsFromKnightWhoSayNi(knightwhosayni *models.KnightWhoSayNi) {
	// insertion point for fields commit

	knightwhosayniDB.Name_Data.String = knightwhosayni.Name
	knightwhosayniDB.Name_Data.Valid = true

	knightwhosayniDB.Direction_Data.String = knightwhosayni.Direction.ToString()
	knightwhosayniDB.Direction_Data.Valid = true

	knightwhosayniDB.X_Data.Float64 = knightwhosayni.X
	knightwhosayniDB.X_Data.Valid = true

	knightwhosayniDB.Y_Data.Float64 = knightwhosayni.Y
	knightwhosayniDB.Y_Data.Valid = true

	knightwhosayniDB.Width_Data.Float64 = knightwhosayni.Width
	knightwhosayniDB.Width_Data.Valid = true

	knightwhosayniDB.Height_Data.Float64 = knightwhosayni.Height
	knightwhosayniDB.Height_Data.Valid = true

	knightwhosayniDB.FillColor_Data.String = knightwhosayni.FillColor
	knightwhosayniDB.FillColor_Data.Valid = true

	knightwhosayniDB.FillOpacity_Data.Float64 = knightwhosayni.FillOpacity
	knightwhosayniDB.FillOpacity_Data.Valid = true

	knightwhosayniDB.Stroke_Data.String = knightwhosayni.Stroke
	knightwhosayniDB.Stroke_Data.Valid = true

	knightwhosayniDB.StrokeWidth_Data.Float64 = knightwhosayni.StrokeWidth
	knightwhosayniDB.StrokeWidth_Data.Valid = true

	knightwhosayniDB.RX_Data.Float64 = knightwhosayni.RX
	knightwhosayniDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromKnightWhoSayNi_WOP
func (knightwhosayniDB *KnightWhoSayNiDB) CopyBasicFieldsFromKnightWhoSayNi_WOP(knightwhosayni *models.KnightWhoSayNi_WOP) {
	// insertion point for fields commit

	knightwhosayniDB.Name_Data.String = knightwhosayni.Name
	knightwhosayniDB.Name_Data.Valid = true

	knightwhosayniDB.Direction_Data.String = knightwhosayni.Direction.ToString()
	knightwhosayniDB.Direction_Data.Valid = true

	knightwhosayniDB.X_Data.Float64 = knightwhosayni.X
	knightwhosayniDB.X_Data.Valid = true

	knightwhosayniDB.Y_Data.Float64 = knightwhosayni.Y
	knightwhosayniDB.Y_Data.Valid = true

	knightwhosayniDB.Width_Data.Float64 = knightwhosayni.Width
	knightwhosayniDB.Width_Data.Valid = true

	knightwhosayniDB.Height_Data.Float64 = knightwhosayni.Height
	knightwhosayniDB.Height_Data.Valid = true

	knightwhosayniDB.FillColor_Data.String = knightwhosayni.FillColor
	knightwhosayniDB.FillColor_Data.Valid = true

	knightwhosayniDB.FillOpacity_Data.Float64 = knightwhosayni.FillOpacity
	knightwhosayniDB.FillOpacity_Data.Valid = true

	knightwhosayniDB.Stroke_Data.String = knightwhosayni.Stroke
	knightwhosayniDB.Stroke_Data.Valid = true

	knightwhosayniDB.StrokeWidth_Data.Float64 = knightwhosayni.StrokeWidth
	knightwhosayniDB.StrokeWidth_Data.Valid = true

	knightwhosayniDB.RX_Data.Float64 = knightwhosayni.RX
	knightwhosayniDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromKnightWhoSayNiWOP
func (knightwhosayniDB *KnightWhoSayNiDB) CopyBasicFieldsFromKnightWhoSayNiWOP(knightwhosayni *KnightWhoSayNiWOP) {
	// insertion point for fields commit

	knightwhosayniDB.Name_Data.String = knightwhosayni.Name
	knightwhosayniDB.Name_Data.Valid = true

	knightwhosayniDB.Direction_Data.String = knightwhosayni.Direction.ToString()
	knightwhosayniDB.Direction_Data.Valid = true

	knightwhosayniDB.X_Data.Float64 = knightwhosayni.X
	knightwhosayniDB.X_Data.Valid = true

	knightwhosayniDB.Y_Data.Float64 = knightwhosayni.Y
	knightwhosayniDB.Y_Data.Valid = true

	knightwhosayniDB.Width_Data.Float64 = knightwhosayni.Width
	knightwhosayniDB.Width_Data.Valid = true

	knightwhosayniDB.Height_Data.Float64 = knightwhosayni.Height
	knightwhosayniDB.Height_Data.Valid = true

	knightwhosayniDB.FillColor_Data.String = knightwhosayni.FillColor
	knightwhosayniDB.FillColor_Data.Valid = true

	knightwhosayniDB.FillOpacity_Data.Float64 = knightwhosayni.FillOpacity
	knightwhosayniDB.FillOpacity_Data.Valid = true

	knightwhosayniDB.Stroke_Data.String = knightwhosayni.Stroke
	knightwhosayniDB.Stroke_Data.Valid = true

	knightwhosayniDB.StrokeWidth_Data.Float64 = knightwhosayni.StrokeWidth
	knightwhosayniDB.StrokeWidth_Data.Valid = true

	knightwhosayniDB.RX_Data.Float64 = knightwhosayni.RX
	knightwhosayniDB.RX_Data.Valid = true
}

// CopyBasicFieldsToKnightWhoSayNi
func (knightwhosayniDB *KnightWhoSayNiDB) CopyBasicFieldsToKnightWhoSayNi(knightwhosayni *models.KnightWhoSayNi) {
	// insertion point for checkout of basic fields (back repo to stage)
	knightwhosayni.Name = knightwhosayniDB.Name_Data.String
	knightwhosayni.Direction.FromString(knightwhosayniDB.Direction_Data.String)
	knightwhosayni.X = knightwhosayniDB.X_Data.Float64
	knightwhosayni.Y = knightwhosayniDB.Y_Data.Float64
	knightwhosayni.Width = knightwhosayniDB.Width_Data.Float64
	knightwhosayni.Height = knightwhosayniDB.Height_Data.Float64
	knightwhosayni.FillColor = knightwhosayniDB.FillColor_Data.String
	knightwhosayni.FillOpacity = knightwhosayniDB.FillOpacity_Data.Float64
	knightwhosayni.Stroke = knightwhosayniDB.Stroke_Data.String
	knightwhosayni.StrokeWidth = knightwhosayniDB.StrokeWidth_Data.Float64
	knightwhosayni.RX = knightwhosayniDB.RX_Data.Float64
}

// CopyBasicFieldsToKnightWhoSayNi_WOP
func (knightwhosayniDB *KnightWhoSayNiDB) CopyBasicFieldsToKnightWhoSayNi_WOP(knightwhosayni *models.KnightWhoSayNi_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	knightwhosayni.Name = knightwhosayniDB.Name_Data.String
	knightwhosayni.Direction.FromString(knightwhosayniDB.Direction_Data.String)
	knightwhosayni.X = knightwhosayniDB.X_Data.Float64
	knightwhosayni.Y = knightwhosayniDB.Y_Data.Float64
	knightwhosayni.Width = knightwhosayniDB.Width_Data.Float64
	knightwhosayni.Height = knightwhosayniDB.Height_Data.Float64
	knightwhosayni.FillColor = knightwhosayniDB.FillColor_Data.String
	knightwhosayni.FillOpacity = knightwhosayniDB.FillOpacity_Data.Float64
	knightwhosayni.Stroke = knightwhosayniDB.Stroke_Data.String
	knightwhosayni.StrokeWidth = knightwhosayniDB.StrokeWidth_Data.Float64
	knightwhosayni.RX = knightwhosayniDB.RX_Data.Float64
}

// CopyBasicFieldsToKnightWhoSayNiWOP
func (knightwhosayniDB *KnightWhoSayNiDB) CopyBasicFieldsToKnightWhoSayNiWOP(knightwhosayni *KnightWhoSayNiWOP) {
	knightwhosayni.ID = int(knightwhosayniDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	knightwhosayni.Name = knightwhosayniDB.Name_Data.String
	knightwhosayni.Direction.FromString(knightwhosayniDB.Direction_Data.String)
	knightwhosayni.X = knightwhosayniDB.X_Data.Float64
	knightwhosayni.Y = knightwhosayniDB.Y_Data.Float64
	knightwhosayni.Width = knightwhosayniDB.Width_Data.Float64
	knightwhosayni.Height = knightwhosayniDB.Height_Data.Float64
	knightwhosayni.FillColor = knightwhosayniDB.FillColor_Data.String
	knightwhosayni.FillOpacity = knightwhosayniDB.FillOpacity_Data.Float64
	knightwhosayni.Stroke = knightwhosayniDB.Stroke_Data.String
	knightwhosayni.StrokeWidth = knightwhosayniDB.StrokeWidth_Data.Float64
	knightwhosayni.RX = knightwhosayniDB.RX_Data.Float64
}

// Backup generates a json file from a slice of all KnightWhoSayNiDB instances in the backrepo
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "KnightWhoSayNiDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KnightWhoSayNiDB, 0)
	for _, knightwhosayniDB := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB {
		forBackup = append(forBackup, knightwhosayniDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json KnightWhoSayNi ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json KnightWhoSayNi file", err.Error())
	}
}

// Backup generates a json file from a slice of all KnightWhoSayNiDB instances in the backrepo
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*KnightWhoSayNiDB, 0)
	for _, knightwhosayniDB := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB {
		forBackup = append(forBackup, knightwhosayniDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("KnightWhoSayNi")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&KnightWhoSayNi_Fields, -1)
	for _, knightwhosayniDB := range forBackup {

		var knightwhosayniWOP KnightWhoSayNiWOP
		knightwhosayniDB.CopyBasicFieldsToKnightWhoSayNiWOP(&knightwhosayniWOP)

		row := sh.AddRow()
		row.WriteStruct(&knightwhosayniWOP, -1)
	}
}

// RestoreXL from the "KnightWhoSayNi" sheet all KnightWhoSayNiDB instances
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoKnightWhoSayNiid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["KnightWhoSayNi"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoKnightWhoSayNi.rowVisitorKnightWhoSayNi)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) rowVisitorKnightWhoSayNi(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var knightwhosayniWOP KnightWhoSayNiWOP
		row.ReadStruct(&knightwhosayniWOP)

		// add the unmarshalled struct to the stage
		knightwhosayniDB := new(KnightWhoSayNiDB)
		knightwhosayniDB.CopyBasicFieldsFromKnightWhoSayNiWOP(&knightwhosayniWOP)

		knightwhosayniDB_ID_atBackupTime := knightwhosayniDB.ID
		knightwhosayniDB.ID = 0
		query := backRepoKnightWhoSayNi.db.Create(knightwhosayniDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[knightwhosayniDB.ID] = knightwhosayniDB
		BackRepoKnightWhoSayNiid_atBckpTime_newID[knightwhosayniDB_ID_atBackupTime] = knightwhosayniDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "KnightWhoSayNiDB.json" in dirPath that stores an array
// of KnightWhoSayNiDB and stores it in the database
// the map BackRepoKnightWhoSayNiid_atBckpTime_newID is updated accordingly
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoKnightWhoSayNiid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "KnightWhoSayNiDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json KnightWhoSayNi file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*KnightWhoSayNiDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_KnightWhoSayNiDBID_KnightWhoSayNiDB
	for _, knightwhosayniDB := range forRestore {

		knightwhosayniDB_ID_atBackupTime := knightwhosayniDB.ID
		knightwhosayniDB.ID = 0
		query := backRepoKnightWhoSayNi.db.Create(knightwhosayniDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[knightwhosayniDB.ID] = knightwhosayniDB
		BackRepoKnightWhoSayNiid_atBckpTime_newID[knightwhosayniDB_ID_atBackupTime] = knightwhosayniDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json KnightWhoSayNi file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<KnightWhoSayNi>id_atBckpTime_newID
// to compute new index
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) RestorePhaseTwo() {

	for _, knightwhosayniDB := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB {

		// next line of code is to avert unused variable compilation error
		_ = knightwhosayniDB

		// insertion point for reindexing pointers encoding
		// reindexing Parameter field
		if knightwhosayniDB.ParameterID.Int64 != 0 {
			knightwhosayniDB.ParameterID.Int64 = int64(BackRepoLancelotid_atBckpTime_newID[uint(knightwhosayniDB.ParameterID.Int64)])
			knightwhosayniDB.ParameterID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoKnightWhoSayNi.db.Model(knightwhosayniDB).Updates(*knightwhosayniDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoKnightWhoSayNi.ResetReversePointers commits all staged instances of KnightWhoSayNi to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, knightwhosayni := range backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiPtr {
		backRepoKnightWhoSayNi.ResetReversePointersInstance(backRepo, idx, knightwhosayni)
	}

	return
}

func (backRepoKnightWhoSayNi *BackRepoKnightWhoSayNiStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, knightwhosayni *models.KnightWhoSayNi) (Error error) {

	// fetch matching knightwhosayniDB
	if knightwhosayniDB, ok := backRepoKnightWhoSayNi.Map_KnightWhoSayNiDBID_KnightWhoSayNiDB[idx]; ok {
		_ = knightwhosayniDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoKnightWhoSayNiid_atBckpTime_newID map[uint]uint
