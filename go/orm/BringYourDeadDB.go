// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BringYourDead_sql sql.NullBool
var dummy_BringYourDead_time time.Duration
var dummy_BringYourDead_sort sort.Float64Slice

// BringYourDeadAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bringyourdeadAPI
type BringYourDeadAPI struct {
	gorm.Model

	models.BringYourDead_WOP

	// encoding of pointers
	BringYourDeadPointersEncoding BringYourDeadPointersEncoding
}

// BringYourDeadPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BringYourDeadPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Lancelots is a slice of pointers to another Struct (optional or 0..1)
	Lancelots IntSlice `gorm:"type:TEXT"`
}

// BringYourDeadDB describes a bringyourdead in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bringyourdeadDB
type BringYourDeadDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bringyourdeadDB.Name
	Name_Data sql.NullString

	// Declation for basic field bringyourdeadDB.Tag
	Tag_Data sql.NullString

	// Declation for basic field bringyourdeadDB.Description
	Description_Data sql.NullString
	// encoding of pointers
	BringYourDeadPointersEncoding
}

// BringYourDeadDBs arrays bringyourdeadDBs
// swagger:response bringyourdeadDBsResponse
type BringYourDeadDBs []BringYourDeadDB

// BringYourDeadDBResponse provides response
// swagger:response bringyourdeadDBResponse
type BringYourDeadDBResponse struct {
	BringYourDeadDB
}

// BringYourDeadWOP is a BringYourDead without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BringYourDeadWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Tag string `xlsx:"2"`

	Description string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var BringYourDead_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Tag",
	"Description",
}

type BackRepoBringYourDeadStruct struct {
	// stores BringYourDeadDB according to their gorm ID
	Map_BringYourDeadDBID_BringYourDeadDB map[uint]*BringYourDeadDB

	// stores BringYourDeadDB ID according to BringYourDead address
	Map_BringYourDeadPtr_BringYourDeadDBID map[*models.BringYourDead]uint

	// stores BringYourDead according to their gorm ID
	Map_BringYourDeadDBID_BringYourDeadPtr map[uint]*models.BringYourDead

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBringYourDead *BackRepoBringYourDeadStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBringYourDead.stage
	return
}

func (backRepoBringYourDead *BackRepoBringYourDeadStruct) GetDB() *gorm.DB {
	return backRepoBringYourDead.db
}

// GetBringYourDeadDBFromBringYourDeadPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) GetBringYourDeadDBFromBringYourDeadPtr(bringyourdead *models.BringYourDead) (bringyourdeadDB *BringYourDeadDB) {
	id := backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead]
	bringyourdeadDB = backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[id]
	return
}

// BackRepoBringYourDead.CommitPhaseOne commits all staged instances of BringYourDead to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bringyourdead := range stage.BringYourDeads {
		backRepoBringYourDead.CommitPhaseOneInstance(bringyourdead)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bringyourdead := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr {
		if _, ok := stage.BringYourDeads[bringyourdead]; !ok {
			backRepoBringYourDead.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBringYourDead.CommitDeleteInstance commits deletion of BringYourDead to the BackRepo
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CommitDeleteInstance(id uint) (Error error) {

	bringyourdead := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[id]

	// bringyourdead is not staged anymore, remove bringyourdeadDB
	bringyourdeadDB := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[id]
	query := backRepoBringYourDead.db.Unscoped().Delete(&bringyourdeadDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID, bringyourdead)
	delete(backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr, id)
	delete(backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB, id)

	return
}

// BackRepoBringYourDead.CommitPhaseOneInstance commits bringyourdead staged instances of BringYourDead to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CommitPhaseOneInstance(bringyourdead *models.BringYourDead) (Error error) {

	// check if the bringyourdead is not commited yet
	if _, ok := backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead]; ok {
		return
	}

	// initiate bringyourdead
	var bringyourdeadDB BringYourDeadDB
	bringyourdeadDB.CopyBasicFieldsFromBringYourDead(bringyourdead)

	query := backRepoBringYourDead.db.Create(&bringyourdeadDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead] = bringyourdeadDB.ID
	backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[bringyourdeadDB.ID] = bringyourdead
	backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[bringyourdeadDB.ID] = &bringyourdeadDB

	return
}

// BackRepoBringYourDead.CommitPhaseTwo commits all staged instances of BringYourDead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bringyourdead := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr {
		backRepoBringYourDead.CommitPhaseTwoInstance(backRepo, idx, bringyourdead)
	}

	return
}

// BackRepoBringYourDead.CommitPhaseTwoInstance commits {{structname }} of models.BringYourDead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bringyourdead *models.BringYourDead) (Error error) {

	// fetch matching bringyourdeadDB
	if bringyourdeadDB, ok := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[idx]; ok {

		bringyourdeadDB.CopyBasicFieldsFromBringYourDead(bringyourdead)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		bringyourdeadDB.BringYourDeadPointersEncoding.Lancelots = make([]int, 0)
		// 2. encode
		for _, lancelotAssocEnd := range bringyourdead.Lancelots {
			lancelotAssocEnd_DB :=
				backRepo.BackRepoLancelot.GetLancelotDBFromLancelotPtr(lancelotAssocEnd)

			// the stage might be inconsistant, meaning that the lancelotAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if lancelotAssocEnd_DB == nil {
				continue
			}

			bringyourdeadDB.BringYourDeadPointersEncoding.Lancelots =
				append(bringyourdeadDB.BringYourDeadPointersEncoding.Lancelots, int(lancelotAssocEnd_DB.ID))
		}

		query := backRepoBringYourDead.db.Save(&bringyourdeadDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BringYourDead intance %s", bringyourdead.Name))
		return err
	}

	return
}

// BackRepoBringYourDead.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CheckoutPhaseOne() (Error error) {

	bringyourdeadDBArray := make([]BringYourDeadDB, 0)
	query := backRepoBringYourDead.db.Find(&bringyourdeadDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bringyourdeadInstancesToBeRemovedFromTheStage := make(map[*models.BringYourDead]any)
	for key, value := range backRepoBringYourDead.stage.BringYourDeads {
		bringyourdeadInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bringyourdeadDB := range bringyourdeadDBArray {
		backRepoBringYourDead.CheckoutPhaseOneInstance(&bringyourdeadDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bringyourdead, ok := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[bringyourdeadDB.ID]
		if ok {
			delete(bringyourdeadInstancesToBeRemovedFromTheStage, bringyourdead)
		}
	}

	// remove from stage and back repo's 3 maps all bringyourdeads that are not in the checkout
	for bringyourdead := range bringyourdeadInstancesToBeRemovedFromTheStage {
		bringyourdead.Unstage(backRepoBringYourDead.GetStage())

		// remove instance from the back repo 3 maps
		bringyourdeadID := backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead]
		delete(backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID, bringyourdead)
		delete(backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB, bringyourdeadID)
		delete(backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr, bringyourdeadID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bringyourdeadDB that has been found in the DB, updates the backRepo and stages the
// models version of the bringyourdeadDB
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CheckoutPhaseOneInstance(bringyourdeadDB *BringYourDeadDB) (Error error) {

	bringyourdead, ok := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[bringyourdeadDB.ID]
	if !ok {
		bringyourdead = new(models.BringYourDead)

		backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[bringyourdeadDB.ID] = bringyourdead
		backRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead] = bringyourdeadDB.ID

		// append model store with the new element
		bringyourdead.Name = bringyourdeadDB.Name_Data.String
		bringyourdead.Stage(backRepoBringYourDead.GetStage())
	}
	bringyourdeadDB.CopyBasicFieldsToBringYourDead(bringyourdead)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bringyourdead.Stage(backRepoBringYourDead.GetStage())

	// preserve pointer to bringyourdeadDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BringYourDeadDBID_BringYourDeadDB)[bringyourdeadDB hold variable pointers
	bringyourdeadDB_Data := *bringyourdeadDB
	preservedPtrToBringYourDead := &bringyourdeadDB_Data
	backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[bringyourdeadDB.ID] = preservedPtrToBringYourDead

	return
}

// BackRepoBringYourDead.CheckoutPhaseTwo Checkouts all staged instances of BringYourDead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bringyourdeadDB := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB {
		backRepoBringYourDead.CheckoutPhaseTwoInstance(backRepo, bringyourdeadDB)
	}
	return
}

// BackRepoBringYourDead.CheckoutPhaseTwoInstance Checkouts staged instances of BringYourDead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bringyourdeadDB *BringYourDeadDB) (Error error) {

	bringyourdead := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[bringyourdeadDB.ID]

	bringyourdeadDB.DecodePointers(backRepo, bringyourdead)

	return
}

func (bringyourdeadDB *BringYourDeadDB) DecodePointers(backRepo *BackRepoStruct, bringyourdead *models.BringYourDead) {

	// insertion point for checkout of pointer encoding
	// This loop redeem bringyourdead.Lancelots in the stage from the encode in the back repo
	// It parses all LancelotDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	bringyourdead.Lancelots = bringyourdead.Lancelots[:0]
	for _, _Lancelotid := range bringyourdeadDB.BringYourDeadPointersEncoding.Lancelots {
		bringyourdead.Lancelots = append(bringyourdead.Lancelots, backRepo.BackRepoLancelot.Map_LancelotDBID_LancelotPtr[uint(_Lancelotid)])
	}

	return
}

// CommitBringYourDead allows commit of a single bringyourdead (if already staged)
func (backRepo *BackRepoStruct) CommitBringYourDead(bringyourdead *models.BringYourDead) {
	backRepo.BackRepoBringYourDead.CommitPhaseOneInstance(bringyourdead)
	if id, ok := backRepo.BackRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead]; ok {
		backRepo.BackRepoBringYourDead.CommitPhaseTwoInstance(backRepo, id, bringyourdead)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBringYourDead allows checkout of a single bringyourdead (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBringYourDead(bringyourdead *models.BringYourDead) {
	// check if the bringyourdead is staged
	if _, ok := backRepo.BackRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead]; ok {

		if id, ok := backRepo.BackRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[bringyourdead]; ok {
			var bringyourdeadDB BringYourDeadDB
			bringyourdeadDB.ID = id

			if err := backRepo.BackRepoBringYourDead.db.First(&bringyourdeadDB, id).Error; err != nil {
				log.Fatalln("CheckoutBringYourDead : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBringYourDead.CheckoutPhaseOneInstance(&bringyourdeadDB)
			backRepo.BackRepoBringYourDead.CheckoutPhaseTwoInstance(backRepo, &bringyourdeadDB)
		}
	}
}

// CopyBasicFieldsFromBringYourDead
func (bringyourdeadDB *BringYourDeadDB) CopyBasicFieldsFromBringYourDead(bringyourdead *models.BringYourDead) {
	// insertion point for fields commit

	bringyourdeadDB.Name_Data.String = bringyourdead.Name
	bringyourdeadDB.Name_Data.Valid = true

	bringyourdeadDB.Tag_Data.String = bringyourdead.Tag
	bringyourdeadDB.Tag_Data.Valid = true

	bringyourdeadDB.Description_Data.String = bringyourdead.Description
	bringyourdeadDB.Description_Data.Valid = true
}

// CopyBasicFieldsFromBringYourDead_WOP
func (bringyourdeadDB *BringYourDeadDB) CopyBasicFieldsFromBringYourDead_WOP(bringyourdead *models.BringYourDead_WOP) {
	// insertion point for fields commit

	bringyourdeadDB.Name_Data.String = bringyourdead.Name
	bringyourdeadDB.Name_Data.Valid = true

	bringyourdeadDB.Tag_Data.String = bringyourdead.Tag
	bringyourdeadDB.Tag_Data.Valid = true

	bringyourdeadDB.Description_Data.String = bringyourdead.Description
	bringyourdeadDB.Description_Data.Valid = true
}

// CopyBasicFieldsFromBringYourDeadWOP
func (bringyourdeadDB *BringYourDeadDB) CopyBasicFieldsFromBringYourDeadWOP(bringyourdead *BringYourDeadWOP) {
	// insertion point for fields commit

	bringyourdeadDB.Name_Data.String = bringyourdead.Name
	bringyourdeadDB.Name_Data.Valid = true

	bringyourdeadDB.Tag_Data.String = bringyourdead.Tag
	bringyourdeadDB.Tag_Data.Valid = true

	bringyourdeadDB.Description_Data.String = bringyourdead.Description
	bringyourdeadDB.Description_Data.Valid = true
}

// CopyBasicFieldsToBringYourDead
func (bringyourdeadDB *BringYourDeadDB) CopyBasicFieldsToBringYourDead(bringyourdead *models.BringYourDead) {
	// insertion point for checkout of basic fields (back repo to stage)
	bringyourdead.Name = bringyourdeadDB.Name_Data.String
	bringyourdead.Tag = bringyourdeadDB.Tag_Data.String
	bringyourdead.Description = bringyourdeadDB.Description_Data.String
}

// CopyBasicFieldsToBringYourDead_WOP
func (bringyourdeadDB *BringYourDeadDB) CopyBasicFieldsToBringYourDead_WOP(bringyourdead *models.BringYourDead_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bringyourdead.Name = bringyourdeadDB.Name_Data.String
	bringyourdead.Tag = bringyourdeadDB.Tag_Data.String
	bringyourdead.Description = bringyourdeadDB.Description_Data.String
}

// CopyBasicFieldsToBringYourDeadWOP
func (bringyourdeadDB *BringYourDeadDB) CopyBasicFieldsToBringYourDeadWOP(bringyourdead *BringYourDeadWOP) {
	bringyourdead.ID = int(bringyourdeadDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bringyourdead.Name = bringyourdeadDB.Name_Data.String
	bringyourdead.Tag = bringyourdeadDB.Tag_Data.String
	bringyourdead.Description = bringyourdeadDB.Description_Data.String
}

// Backup generates a json file from a slice of all BringYourDeadDB instances in the backrepo
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BringYourDeadDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BringYourDeadDB, 0)
	for _, bringyourdeadDB := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB {
		forBackup = append(forBackup, bringyourdeadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BringYourDead ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BringYourDead file", err.Error())
	}
}

// Backup generates a json file from a slice of all BringYourDeadDB instances in the backrepo
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BringYourDeadDB, 0)
	for _, bringyourdeadDB := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB {
		forBackup = append(forBackup, bringyourdeadDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BringYourDead")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BringYourDead_Fields, -1)
	for _, bringyourdeadDB := range forBackup {

		var bringyourdeadWOP BringYourDeadWOP
		bringyourdeadDB.CopyBasicFieldsToBringYourDeadWOP(&bringyourdeadWOP)

		row := sh.AddRow()
		row.WriteStruct(&bringyourdeadWOP, -1)
	}
}

// RestoreXL from the "BringYourDead" sheet all BringYourDeadDB instances
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBringYourDeadid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BringYourDead"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBringYourDead.rowVisitorBringYourDead)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBringYourDead *BackRepoBringYourDeadStruct) rowVisitorBringYourDead(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bringyourdeadWOP BringYourDeadWOP
		row.ReadStruct(&bringyourdeadWOP)

		// add the unmarshalled struct to the stage
		bringyourdeadDB := new(BringYourDeadDB)
		bringyourdeadDB.CopyBasicFieldsFromBringYourDeadWOP(&bringyourdeadWOP)

		bringyourdeadDB_ID_atBackupTime := bringyourdeadDB.ID
		bringyourdeadDB.ID = 0
		query := backRepoBringYourDead.db.Create(bringyourdeadDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[bringyourdeadDB.ID] = bringyourdeadDB
		BackRepoBringYourDeadid_atBckpTime_newID[bringyourdeadDB_ID_atBackupTime] = bringyourdeadDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BringYourDeadDB.json" in dirPath that stores an array
// of BringYourDeadDB and stores it in the database
// the map BackRepoBringYourDeadid_atBckpTime_newID is updated accordingly
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBringYourDeadid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BringYourDeadDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BringYourDead file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BringYourDeadDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BringYourDeadDBID_BringYourDeadDB
	for _, bringyourdeadDB := range forRestore {

		bringyourdeadDB_ID_atBackupTime := bringyourdeadDB.ID
		bringyourdeadDB.ID = 0
		query := backRepoBringYourDead.db.Create(bringyourdeadDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[bringyourdeadDB.ID] = bringyourdeadDB
		BackRepoBringYourDeadid_atBckpTime_newID[bringyourdeadDB_ID_atBackupTime] = bringyourdeadDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BringYourDead file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BringYourDead>id_atBckpTime_newID
// to compute new index
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) RestorePhaseTwo() {

	for _, bringyourdeadDB := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB {

		// next line of code is to avert unused variable compilation error
		_ = bringyourdeadDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBringYourDead.db.Model(bringyourdeadDB).Updates(*bringyourdeadDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBringYourDead.ResetReversePointers commits all staged instances of BringYourDead to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBringYourDead *BackRepoBringYourDeadStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bringyourdead := range backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr {
		backRepoBringYourDead.ResetReversePointersInstance(backRepo, idx, bringyourdead)
	}

	return
}

func (backRepoBringYourDead *BackRepoBringYourDeadStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bringyourdead *models.BringYourDead) (Error error) {

	// fetch matching bringyourdeadDB
	if bringyourdeadDB, ok := backRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadDB[idx]; ok {
		_ = bringyourdeadDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBringYourDeadid_atBckpTime_newID map[uint]uint
