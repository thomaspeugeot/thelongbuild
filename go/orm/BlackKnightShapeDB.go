// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BlackKnightShape_sql sql.NullBool
var dummy_BlackKnightShape_time time.Duration
var dummy_BlackKnightShape_sort sort.Float64Slice

// BlackKnightShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model blackknightshapeAPI
type BlackKnightShapeAPI struct {
	gorm.Model

	models.BlackKnightShape_WOP

	// encoding of pointers
	BlackKnightShapePointersEncoding BlackKnightShapePointersEncoding
}

// BlackKnightShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BlackKnightShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field BringYourDead is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	BringYourDeadID sql.NullInt64
}

// BlackKnightShapeDB describes a blackknightshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model blackknightshapeDB
type BlackKnightShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field blackknightshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field blackknightshapeDB.Direction
	Direction_Data sql.NullString

	// Declation for basic field blackknightshapeDB.X
	X_Data sql.NullFloat64

	// Declation for basic field blackknightshapeDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field blackknightshapeDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field blackknightshapeDB.Height
	Height_Data sql.NullFloat64

	// Declation for basic field blackknightshapeDB.FillColor
	FillColor_Data sql.NullString

	// Declation for basic field blackknightshapeDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field blackknightshapeDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field blackknightshapeDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field blackknightshapeDB.RX
	RX_Data sql.NullFloat64
	// encoding of pointers
	BlackKnightShapePointersEncoding
}

// BlackKnightShapeDBs arrays blackknightshapeDBs
// swagger:response blackknightshapeDBsResponse
type BlackKnightShapeDBs []BlackKnightShapeDB

// BlackKnightShapeDBResponse provides response
// swagger:response blackknightshapeDBResponse
type BlackKnightShapeDBResponse struct {
	BlackKnightShapeDB
}

// BlackKnightShapeWOP is a BlackKnightShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BlackKnightShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Direction models.DirectionType `xlsx:"2"`

	X float64 `xlsx:"3"`

	Y float64 `xlsx:"4"`

	Width float64 `xlsx:"5"`

	Height float64 `xlsx:"6"`

	FillColor string `xlsx:"7"`

	FillOpacity float64 `xlsx:"8"`

	Stroke string `xlsx:"9"`

	StrokeWidth float64 `xlsx:"10"`

	RX float64 `xlsx:"11"`
	// insertion for WOP pointer fields
}

var BlackKnightShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Direction",
	"X",
	"Y",
	"Width",
	"Height",
	"FillColor",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"RX",
}

type BackRepoBlackKnightShapeStruct struct {
	// stores BlackKnightShapeDB according to their gorm ID
	Map_BlackKnightShapeDBID_BlackKnightShapeDB map[uint]*BlackKnightShapeDB

	// stores BlackKnightShapeDB ID according to BlackKnightShape address
	Map_BlackKnightShapePtr_BlackKnightShapeDBID map[*models.BlackKnightShape]uint

	// stores BlackKnightShape according to their gorm ID
	Map_BlackKnightShapeDBID_BlackKnightShapePtr map[uint]*models.BlackKnightShape

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBlackKnightShape.stage
	return
}

func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) GetDB() *gorm.DB {
	return backRepoBlackKnightShape.db
}

// GetBlackKnightShapeDBFromBlackKnightShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) GetBlackKnightShapeDBFromBlackKnightShapePtr(blackknightshape *models.BlackKnightShape) (blackknightshapeDB *BlackKnightShapeDB) {
	id := backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape]
	blackknightshapeDB = backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[id]
	return
}

// BackRepoBlackKnightShape.CommitPhaseOne commits all staged instances of BlackKnightShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for blackknightshape := range stage.BlackKnightShapes {
		backRepoBlackKnightShape.CommitPhaseOneInstance(blackknightshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, blackknightshape := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr {
		if _, ok := stage.BlackKnightShapes[blackknightshape]; !ok {
			backRepoBlackKnightShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBlackKnightShape.CommitDeleteInstance commits deletion of BlackKnightShape to the BackRepo
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	blackknightshape := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr[id]

	// blackknightshape is not staged anymore, remove blackknightshapeDB
	blackknightshapeDB := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[id]
	query := backRepoBlackKnightShape.db.Unscoped().Delete(&blackknightshapeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID, blackknightshape)
	delete(backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr, id)
	delete(backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB, id)

	return
}

// BackRepoBlackKnightShape.CommitPhaseOneInstance commits blackknightshape staged instances of BlackKnightShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CommitPhaseOneInstance(blackknightshape *models.BlackKnightShape) (Error error) {

	// check if the blackknightshape is not commited yet
	if _, ok := backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape]; ok {
		return
	}

	// initiate blackknightshape
	var blackknightshapeDB BlackKnightShapeDB
	blackknightshapeDB.CopyBasicFieldsFromBlackKnightShape(blackknightshape)

	query := backRepoBlackKnightShape.db.Create(&blackknightshapeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape] = blackknightshapeDB.ID
	backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr[blackknightshapeDB.ID] = blackknightshape
	backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[blackknightshapeDB.ID] = &blackknightshapeDB

	return
}

// BackRepoBlackKnightShape.CommitPhaseTwo commits all staged instances of BlackKnightShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, blackknightshape := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr {
		backRepoBlackKnightShape.CommitPhaseTwoInstance(backRepo, idx, blackknightshape)
	}

	return
}

// BackRepoBlackKnightShape.CommitPhaseTwoInstance commits {{structname }} of models.BlackKnightShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, blackknightshape *models.BlackKnightShape) (Error error) {

	// fetch matching blackknightshapeDB
	if blackknightshapeDB, ok := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[idx]; ok {

		blackknightshapeDB.CopyBasicFieldsFromBlackKnightShape(blackknightshape)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value blackknightshape.BringYourDead translates to updating the blackknightshape.BringYourDeadID
		blackknightshapeDB.BringYourDeadID.Valid = true // allow for a 0 value (nil association)
		if blackknightshape.BringYourDead != nil {
			if BringYourDeadId, ok := backRepo.BackRepoBringYourDead.Map_BringYourDeadPtr_BringYourDeadDBID[blackknightshape.BringYourDead]; ok {
				blackknightshapeDB.BringYourDeadID.Int64 = int64(BringYourDeadId)
				blackknightshapeDB.BringYourDeadID.Valid = true
			}
		} else {
			blackknightshapeDB.BringYourDeadID.Int64 = 0
			blackknightshapeDB.BringYourDeadID.Valid = true
		}

		query := backRepoBlackKnightShape.db.Save(&blackknightshapeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BlackKnightShape intance %s", blackknightshape.Name))
		return err
	}

	return
}

// BackRepoBlackKnightShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CheckoutPhaseOne() (Error error) {

	blackknightshapeDBArray := make([]BlackKnightShapeDB, 0)
	query := backRepoBlackKnightShape.db.Find(&blackknightshapeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	blackknightshapeInstancesToBeRemovedFromTheStage := make(map[*models.BlackKnightShape]any)
	for key, value := range backRepoBlackKnightShape.stage.BlackKnightShapes {
		blackknightshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, blackknightshapeDB := range blackknightshapeDBArray {
		backRepoBlackKnightShape.CheckoutPhaseOneInstance(&blackknightshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		blackknightshape, ok := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr[blackknightshapeDB.ID]
		if ok {
			delete(blackknightshapeInstancesToBeRemovedFromTheStage, blackknightshape)
		}
	}

	// remove from stage and back repo's 3 maps all blackknightshapes that are not in the checkout
	for blackknightshape := range blackknightshapeInstancesToBeRemovedFromTheStage {
		blackknightshape.Unstage(backRepoBlackKnightShape.GetStage())

		// remove instance from the back repo 3 maps
		blackknightshapeID := backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape]
		delete(backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID, blackknightshape)
		delete(backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB, blackknightshapeID)
		delete(backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr, blackknightshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a blackknightshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the blackknightshapeDB
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CheckoutPhaseOneInstance(blackknightshapeDB *BlackKnightShapeDB) (Error error) {

	blackknightshape, ok := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr[blackknightshapeDB.ID]
	if !ok {
		blackknightshape = new(models.BlackKnightShape)

		backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr[blackknightshapeDB.ID] = blackknightshape
		backRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape] = blackknightshapeDB.ID

		// append model store with the new element
		blackknightshape.Name = blackknightshapeDB.Name_Data.String
		blackknightshape.Stage(backRepoBlackKnightShape.GetStage())
	}
	blackknightshapeDB.CopyBasicFieldsToBlackKnightShape(blackknightshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	blackknightshape.Stage(backRepoBlackKnightShape.GetStage())

	// preserve pointer to blackknightshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BlackKnightShapeDBID_BlackKnightShapeDB)[blackknightshapeDB hold variable pointers
	blackknightshapeDB_Data := *blackknightshapeDB
	preservedPtrToBlackKnightShape := &blackknightshapeDB_Data
	backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[blackknightshapeDB.ID] = preservedPtrToBlackKnightShape

	return
}

// BackRepoBlackKnightShape.CheckoutPhaseTwo Checkouts all staged instances of BlackKnightShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, blackknightshapeDB := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB {
		backRepoBlackKnightShape.CheckoutPhaseTwoInstance(backRepo, blackknightshapeDB)
	}
	return
}

// BackRepoBlackKnightShape.CheckoutPhaseTwoInstance Checkouts staged instances of BlackKnightShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, blackknightshapeDB *BlackKnightShapeDB) (Error error) {

	blackknightshape := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr[blackknightshapeDB.ID]

	blackknightshapeDB.DecodePointers(backRepo, blackknightshape)

	return
}

func (blackknightshapeDB *BlackKnightShapeDB) DecodePointers(backRepo *BackRepoStruct, blackknightshape *models.BlackKnightShape) {

	// insertion point for checkout of pointer encoding
	// BringYourDead field
	blackknightshape.BringYourDead = nil
	if blackknightshapeDB.BringYourDeadID.Int64 != 0 {
		blackknightshape.BringYourDead = backRepo.BackRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[uint(blackknightshapeDB.BringYourDeadID.Int64)]
	}
	return
}

// CommitBlackKnightShape allows commit of a single blackknightshape (if already staged)
func (backRepo *BackRepoStruct) CommitBlackKnightShape(blackknightshape *models.BlackKnightShape) {
	backRepo.BackRepoBlackKnightShape.CommitPhaseOneInstance(blackknightshape)
	if id, ok := backRepo.BackRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape]; ok {
		backRepo.BackRepoBlackKnightShape.CommitPhaseTwoInstance(backRepo, id, blackknightshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBlackKnightShape allows checkout of a single blackknightshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBlackKnightShape(blackknightshape *models.BlackKnightShape) {
	// check if the blackknightshape is staged
	if _, ok := backRepo.BackRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape]; ok {

		if id, ok := backRepo.BackRepoBlackKnightShape.Map_BlackKnightShapePtr_BlackKnightShapeDBID[blackknightshape]; ok {
			var blackknightshapeDB BlackKnightShapeDB
			blackknightshapeDB.ID = id

			if err := backRepo.BackRepoBlackKnightShape.db.First(&blackknightshapeDB, id).Error; err != nil {
				log.Fatalln("CheckoutBlackKnightShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBlackKnightShape.CheckoutPhaseOneInstance(&blackknightshapeDB)
			backRepo.BackRepoBlackKnightShape.CheckoutPhaseTwoInstance(backRepo, &blackknightshapeDB)
		}
	}
}

// CopyBasicFieldsFromBlackKnightShape
func (blackknightshapeDB *BlackKnightShapeDB) CopyBasicFieldsFromBlackKnightShape(blackknightshape *models.BlackKnightShape) {
	// insertion point for fields commit

	blackknightshapeDB.Name_Data.String = blackknightshape.Name
	blackknightshapeDB.Name_Data.Valid = true

	blackknightshapeDB.Direction_Data.String = blackknightshape.Direction.ToString()
	blackknightshapeDB.Direction_Data.Valid = true

	blackknightshapeDB.X_Data.Float64 = blackknightshape.X
	blackknightshapeDB.X_Data.Valid = true

	blackknightshapeDB.Y_Data.Float64 = blackknightshape.Y
	blackknightshapeDB.Y_Data.Valid = true

	blackknightshapeDB.Width_Data.Float64 = blackknightshape.Width
	blackknightshapeDB.Width_Data.Valid = true

	blackknightshapeDB.Height_Data.Float64 = blackknightshape.Height
	blackknightshapeDB.Height_Data.Valid = true

	blackknightshapeDB.FillColor_Data.String = blackknightshape.FillColor
	blackknightshapeDB.FillColor_Data.Valid = true

	blackknightshapeDB.FillOpacity_Data.Float64 = blackknightshape.FillOpacity
	blackknightshapeDB.FillOpacity_Data.Valid = true

	blackknightshapeDB.Stroke_Data.String = blackknightshape.Stroke
	blackknightshapeDB.Stroke_Data.Valid = true

	blackknightshapeDB.StrokeWidth_Data.Float64 = blackknightshape.StrokeWidth
	blackknightshapeDB.StrokeWidth_Data.Valid = true

	blackknightshapeDB.RX_Data.Float64 = blackknightshape.RX
	blackknightshapeDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromBlackKnightShape_WOP
func (blackknightshapeDB *BlackKnightShapeDB) CopyBasicFieldsFromBlackKnightShape_WOP(blackknightshape *models.BlackKnightShape_WOP) {
	// insertion point for fields commit

	blackknightshapeDB.Name_Data.String = blackknightshape.Name
	blackknightshapeDB.Name_Data.Valid = true

	blackknightshapeDB.Direction_Data.String = blackknightshape.Direction.ToString()
	blackknightshapeDB.Direction_Data.Valid = true

	blackknightshapeDB.X_Data.Float64 = blackknightshape.X
	blackknightshapeDB.X_Data.Valid = true

	blackknightshapeDB.Y_Data.Float64 = blackknightshape.Y
	blackknightshapeDB.Y_Data.Valid = true

	blackknightshapeDB.Width_Data.Float64 = blackknightshape.Width
	blackknightshapeDB.Width_Data.Valid = true

	blackknightshapeDB.Height_Data.Float64 = blackknightshape.Height
	blackknightshapeDB.Height_Data.Valid = true

	blackknightshapeDB.FillColor_Data.String = blackknightshape.FillColor
	blackknightshapeDB.FillColor_Data.Valid = true

	blackknightshapeDB.FillOpacity_Data.Float64 = blackknightshape.FillOpacity
	blackknightshapeDB.FillOpacity_Data.Valid = true

	blackknightshapeDB.Stroke_Data.String = blackknightshape.Stroke
	blackknightshapeDB.Stroke_Data.Valid = true

	blackknightshapeDB.StrokeWidth_Data.Float64 = blackknightshape.StrokeWidth
	blackknightshapeDB.StrokeWidth_Data.Valid = true

	blackknightshapeDB.RX_Data.Float64 = blackknightshape.RX
	blackknightshapeDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromBlackKnightShapeWOP
func (blackknightshapeDB *BlackKnightShapeDB) CopyBasicFieldsFromBlackKnightShapeWOP(blackknightshape *BlackKnightShapeWOP) {
	// insertion point for fields commit

	blackknightshapeDB.Name_Data.String = blackknightshape.Name
	blackknightshapeDB.Name_Data.Valid = true

	blackknightshapeDB.Direction_Data.String = blackknightshape.Direction.ToString()
	blackknightshapeDB.Direction_Data.Valid = true

	blackknightshapeDB.X_Data.Float64 = blackknightshape.X
	blackknightshapeDB.X_Data.Valid = true

	blackknightshapeDB.Y_Data.Float64 = blackknightshape.Y
	blackknightshapeDB.Y_Data.Valid = true

	blackknightshapeDB.Width_Data.Float64 = blackknightshape.Width
	blackknightshapeDB.Width_Data.Valid = true

	blackknightshapeDB.Height_Data.Float64 = blackknightshape.Height
	blackknightshapeDB.Height_Data.Valid = true

	blackknightshapeDB.FillColor_Data.String = blackknightshape.FillColor
	blackknightshapeDB.FillColor_Data.Valid = true

	blackknightshapeDB.FillOpacity_Data.Float64 = blackknightshape.FillOpacity
	blackknightshapeDB.FillOpacity_Data.Valid = true

	blackknightshapeDB.Stroke_Data.String = blackknightshape.Stroke
	blackknightshapeDB.Stroke_Data.Valid = true

	blackknightshapeDB.StrokeWidth_Data.Float64 = blackknightshape.StrokeWidth
	blackknightshapeDB.StrokeWidth_Data.Valid = true

	blackknightshapeDB.RX_Data.Float64 = blackknightshape.RX
	blackknightshapeDB.RX_Data.Valid = true
}

// CopyBasicFieldsToBlackKnightShape
func (blackknightshapeDB *BlackKnightShapeDB) CopyBasicFieldsToBlackKnightShape(blackknightshape *models.BlackKnightShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	blackknightshape.Name = blackknightshapeDB.Name_Data.String
	blackknightshape.Direction.FromString(blackknightshapeDB.Direction_Data.String)
	blackknightshape.X = blackknightshapeDB.X_Data.Float64
	blackknightshape.Y = blackknightshapeDB.Y_Data.Float64
	blackknightshape.Width = blackknightshapeDB.Width_Data.Float64
	blackknightshape.Height = blackknightshapeDB.Height_Data.Float64
	blackknightshape.FillColor = blackknightshapeDB.FillColor_Data.String
	blackknightshape.FillOpacity = blackknightshapeDB.FillOpacity_Data.Float64
	blackknightshape.Stroke = blackknightshapeDB.Stroke_Data.String
	blackknightshape.StrokeWidth = blackknightshapeDB.StrokeWidth_Data.Float64
	blackknightshape.RX = blackknightshapeDB.RX_Data.Float64
}

// CopyBasicFieldsToBlackKnightShape_WOP
func (blackknightshapeDB *BlackKnightShapeDB) CopyBasicFieldsToBlackKnightShape_WOP(blackknightshape *models.BlackKnightShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	blackknightshape.Name = blackknightshapeDB.Name_Data.String
	blackknightshape.Direction.FromString(blackknightshapeDB.Direction_Data.String)
	blackknightshape.X = blackknightshapeDB.X_Data.Float64
	blackknightshape.Y = blackknightshapeDB.Y_Data.Float64
	blackknightshape.Width = blackknightshapeDB.Width_Data.Float64
	blackknightshape.Height = blackknightshapeDB.Height_Data.Float64
	blackknightshape.FillColor = blackknightshapeDB.FillColor_Data.String
	blackknightshape.FillOpacity = blackknightshapeDB.FillOpacity_Data.Float64
	blackknightshape.Stroke = blackknightshapeDB.Stroke_Data.String
	blackknightshape.StrokeWidth = blackknightshapeDB.StrokeWidth_Data.Float64
	blackknightshape.RX = blackknightshapeDB.RX_Data.Float64
}

// CopyBasicFieldsToBlackKnightShapeWOP
func (blackknightshapeDB *BlackKnightShapeDB) CopyBasicFieldsToBlackKnightShapeWOP(blackknightshape *BlackKnightShapeWOP) {
	blackknightshape.ID = int(blackknightshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	blackknightshape.Name = blackknightshapeDB.Name_Data.String
	blackknightshape.Direction.FromString(blackknightshapeDB.Direction_Data.String)
	blackknightshape.X = blackknightshapeDB.X_Data.Float64
	blackknightshape.Y = blackknightshapeDB.Y_Data.Float64
	blackknightshape.Width = blackknightshapeDB.Width_Data.Float64
	blackknightshape.Height = blackknightshapeDB.Height_Data.Float64
	blackknightshape.FillColor = blackknightshapeDB.FillColor_Data.String
	blackknightshape.FillOpacity = blackknightshapeDB.FillOpacity_Data.Float64
	blackknightshape.Stroke = blackknightshapeDB.Stroke_Data.String
	blackknightshape.StrokeWidth = blackknightshapeDB.StrokeWidth_Data.Float64
	blackknightshape.RX = blackknightshapeDB.RX_Data.Float64
}

// Backup generates a json file from a slice of all BlackKnightShapeDB instances in the backrepo
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BlackKnightShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BlackKnightShapeDB, 0)
	for _, blackknightshapeDB := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB {
		forBackup = append(forBackup, blackknightshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BlackKnightShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BlackKnightShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all BlackKnightShapeDB instances in the backrepo
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BlackKnightShapeDB, 0)
	for _, blackknightshapeDB := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB {
		forBackup = append(forBackup, blackknightshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BlackKnightShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BlackKnightShape_Fields, -1)
	for _, blackknightshapeDB := range forBackup {

		var blackknightshapeWOP BlackKnightShapeWOP
		blackknightshapeDB.CopyBasicFieldsToBlackKnightShapeWOP(&blackknightshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&blackknightshapeWOP, -1)
	}
}

// RestoreXL from the "BlackKnightShape" sheet all BlackKnightShapeDB instances
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBlackKnightShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BlackKnightShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBlackKnightShape.rowVisitorBlackKnightShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) rowVisitorBlackKnightShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var blackknightshapeWOP BlackKnightShapeWOP
		row.ReadStruct(&blackknightshapeWOP)

		// add the unmarshalled struct to the stage
		blackknightshapeDB := new(BlackKnightShapeDB)
		blackknightshapeDB.CopyBasicFieldsFromBlackKnightShapeWOP(&blackknightshapeWOP)

		blackknightshapeDB_ID_atBackupTime := blackknightshapeDB.ID
		blackknightshapeDB.ID = 0
		query := backRepoBlackKnightShape.db.Create(blackknightshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[blackknightshapeDB.ID] = blackknightshapeDB
		BackRepoBlackKnightShapeid_atBckpTime_newID[blackknightshapeDB_ID_atBackupTime] = blackknightshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BlackKnightShapeDB.json" in dirPath that stores an array
// of BlackKnightShapeDB and stores it in the database
// the map BackRepoBlackKnightShapeid_atBckpTime_newID is updated accordingly
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBlackKnightShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BlackKnightShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BlackKnightShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BlackKnightShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BlackKnightShapeDBID_BlackKnightShapeDB
	for _, blackknightshapeDB := range forRestore {

		blackknightshapeDB_ID_atBackupTime := blackknightshapeDB.ID
		blackknightshapeDB.ID = 0
		query := backRepoBlackKnightShape.db.Create(blackknightshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[blackknightshapeDB.ID] = blackknightshapeDB
		BackRepoBlackKnightShapeid_atBckpTime_newID[blackknightshapeDB_ID_atBackupTime] = blackknightshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BlackKnightShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BlackKnightShape>id_atBckpTime_newID
// to compute new index
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) RestorePhaseTwo() {

	for _, blackknightshapeDB := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = blackknightshapeDB

		// insertion point for reindexing pointers encoding
		// reindexing BringYourDead field
		if blackknightshapeDB.BringYourDeadID.Int64 != 0 {
			blackknightshapeDB.BringYourDeadID.Int64 = int64(BackRepoBringYourDeadid_atBckpTime_newID[uint(blackknightshapeDB.BringYourDeadID.Int64)])
			blackknightshapeDB.BringYourDeadID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoBlackKnightShape.db.Model(blackknightshapeDB).Updates(*blackknightshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBlackKnightShape.ResetReversePointers commits all staged instances of BlackKnightShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, blackknightshape := range backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapePtr {
		backRepoBlackKnightShape.ResetReversePointersInstance(backRepo, idx, blackknightshape)
	}

	return
}

func (backRepoBlackKnightShape *BackRepoBlackKnightShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, blackknightshape *models.BlackKnightShape) (Error error) {

	// fetch matching blackknightshapeDB
	if blackknightshapeDB, ok := backRepoBlackKnightShape.Map_BlackKnightShapeDBID_BlackKnightShapeDB[idx]; ok {
		_ = blackknightshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBlackKnightShapeid_atBckpTime_newID map[uint]uint
