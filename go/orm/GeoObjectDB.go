// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GeoObject_sql sql.NullBool
var dummy_GeoObject_time time.Duration
var dummy_GeoObject_sort sort.Float64Slice

// GeoObjectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model geoobjectAPI
type GeoObjectAPI struct {
	gorm.Model

	models.GeoObject_WOP

	// encoding of pointers
	GeoObjectPointersEncoding GeoObjectPointersEncoding
}

// GeoObjectPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GeoObjectPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// GeoObjectDB describes a geoobject in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model geoobjectDB
type GeoObjectDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field geoobjectDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	GeoObjectPointersEncoding
}

// GeoObjectDBs arrays geoobjectDBs
// swagger:response geoobjectDBsResponse
type GeoObjectDBs []GeoObjectDB

// GeoObjectDBResponse provides response
// swagger:response geoobjectDBResponse
type GeoObjectDBResponse struct {
	GeoObjectDB
}

// GeoObjectWOP is a GeoObject without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GeoObjectWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var GeoObject_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGeoObjectStruct struct {
	// stores GeoObjectDB according to their gorm ID
	Map_GeoObjectDBID_GeoObjectDB map[uint]*GeoObjectDB

	// stores GeoObjectDB ID according to GeoObject address
	Map_GeoObjectPtr_GeoObjectDBID map[*models.GeoObject]uint

	// stores GeoObject according to their gorm ID
	Map_GeoObjectDBID_GeoObjectPtr map[uint]*models.GeoObject

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGeoObject *BackRepoGeoObjectStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGeoObject.stage
	return
}

func (backRepoGeoObject *BackRepoGeoObjectStruct) GetDB() *gorm.DB {
	return backRepoGeoObject.db
}

// GetGeoObjectDBFromGeoObjectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGeoObject *BackRepoGeoObjectStruct) GetGeoObjectDBFromGeoObjectPtr(geoobject *models.GeoObject) (geoobjectDB *GeoObjectDB) {
	id := backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject]
	geoobjectDB = backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[id]
	return
}

// BackRepoGeoObject.CommitPhaseOne commits all staged instances of GeoObject to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGeoObject *BackRepoGeoObjectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for geoobject := range stage.GeoObjects {
		backRepoGeoObject.CommitPhaseOneInstance(geoobject)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, geoobject := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr {
		if _, ok := stage.GeoObjects[geoobject]; !ok {
			backRepoGeoObject.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGeoObject.CommitDeleteInstance commits deletion of GeoObject to the BackRepo
func (backRepoGeoObject *BackRepoGeoObjectStruct) CommitDeleteInstance(id uint) (Error error) {

	geoobject := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[id]

	// geoobject is not staged anymore, remove geoobjectDB
	geoobjectDB := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[id]
	query := backRepoGeoObject.db.Unscoped().Delete(&geoobjectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID, geoobject)
	delete(backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr, id)
	delete(backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB, id)

	return
}

// BackRepoGeoObject.CommitPhaseOneInstance commits geoobject staged instances of GeoObject to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGeoObject *BackRepoGeoObjectStruct) CommitPhaseOneInstance(geoobject *models.GeoObject) (Error error) {

	// check if the geoobject is not commited yet
	if _, ok := backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject]; ok {
		return
	}

	// initiate geoobject
	var geoobjectDB GeoObjectDB
	geoobjectDB.CopyBasicFieldsFromGeoObject(geoobject)

	query := backRepoGeoObject.db.Create(&geoobjectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject] = geoobjectDB.ID
	backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[geoobjectDB.ID] = geoobject
	backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[geoobjectDB.ID] = &geoobjectDB

	return
}

// BackRepoGeoObject.CommitPhaseTwo commits all staged instances of GeoObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObject *BackRepoGeoObjectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, geoobject := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr {
		backRepoGeoObject.CommitPhaseTwoInstance(backRepo, idx, geoobject)
	}

	return
}

// BackRepoGeoObject.CommitPhaseTwoInstance commits {{structname }} of models.GeoObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObject *BackRepoGeoObjectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, geoobject *models.GeoObject) (Error error) {

	// fetch matching geoobjectDB
	if geoobjectDB, ok := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[idx]; ok {

		geoobjectDB.CopyBasicFieldsFromGeoObject(geoobject)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoGeoObject.db.Save(&geoobjectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GeoObject intance %s", geoobject.Name))
		return err
	}

	return
}

// BackRepoGeoObject.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGeoObject *BackRepoGeoObjectStruct) CheckoutPhaseOne() (Error error) {

	geoobjectDBArray := make([]GeoObjectDB, 0)
	query := backRepoGeoObject.db.Find(&geoobjectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	geoobjectInstancesToBeRemovedFromTheStage := make(map[*models.GeoObject]any)
	for key, value := range backRepoGeoObject.stage.GeoObjects {
		geoobjectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, geoobjectDB := range geoobjectDBArray {
		backRepoGeoObject.CheckoutPhaseOneInstance(&geoobjectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		geoobject, ok := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[geoobjectDB.ID]
		if ok {
			delete(geoobjectInstancesToBeRemovedFromTheStage, geoobject)
		}
	}

	// remove from stage and back repo's 3 maps all geoobjects that are not in the checkout
	for geoobject := range geoobjectInstancesToBeRemovedFromTheStage {
		geoobject.Unstage(backRepoGeoObject.GetStage())

		// remove instance from the back repo 3 maps
		geoobjectID := backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject]
		delete(backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID, geoobject)
		delete(backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB, geoobjectID)
		delete(backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr, geoobjectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a geoobjectDB that has been found in the DB, updates the backRepo and stages the
// models version of the geoobjectDB
func (backRepoGeoObject *BackRepoGeoObjectStruct) CheckoutPhaseOneInstance(geoobjectDB *GeoObjectDB) (Error error) {

	geoobject, ok := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[geoobjectDB.ID]
	if !ok {
		geoobject = new(models.GeoObject)

		backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[geoobjectDB.ID] = geoobject
		backRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject] = geoobjectDB.ID

		// append model store with the new element
		geoobject.Name = geoobjectDB.Name_Data.String
		geoobject.Stage(backRepoGeoObject.GetStage())
	}
	geoobjectDB.CopyBasicFieldsToGeoObject(geoobject)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	geoobject.Stage(backRepoGeoObject.GetStage())

	// preserve pointer to geoobjectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GeoObjectDBID_GeoObjectDB)[geoobjectDB hold variable pointers
	geoobjectDB_Data := *geoobjectDB
	preservedPtrToGeoObject := &geoobjectDB_Data
	backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[geoobjectDB.ID] = preservedPtrToGeoObject

	return
}

// BackRepoGeoObject.CheckoutPhaseTwo Checkouts all staged instances of GeoObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObject *BackRepoGeoObjectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, geoobjectDB := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB {
		backRepoGeoObject.CheckoutPhaseTwoInstance(backRepo, geoobjectDB)
	}
	return
}

// BackRepoGeoObject.CheckoutPhaseTwoInstance Checkouts staged instances of GeoObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObject *BackRepoGeoObjectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, geoobjectDB *GeoObjectDB) (Error error) {

	geoobject := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr[geoobjectDB.ID]

	geoobjectDB.DecodePointers(backRepo, geoobject)

	return
}

func (geoobjectDB *GeoObjectDB) DecodePointers(backRepo *BackRepoStruct, geoobject *models.GeoObject) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitGeoObject allows commit of a single geoobject (if already staged)
func (backRepo *BackRepoStruct) CommitGeoObject(geoobject *models.GeoObject) {
	backRepo.BackRepoGeoObject.CommitPhaseOneInstance(geoobject)
	if id, ok := backRepo.BackRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject]; ok {
		backRepo.BackRepoGeoObject.CommitPhaseTwoInstance(backRepo, id, geoobject)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGeoObject allows checkout of a single geoobject (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGeoObject(geoobject *models.GeoObject) {
	// check if the geoobject is staged
	if _, ok := backRepo.BackRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject]; ok {

		if id, ok := backRepo.BackRepoGeoObject.Map_GeoObjectPtr_GeoObjectDBID[geoobject]; ok {
			var geoobjectDB GeoObjectDB
			geoobjectDB.ID = id

			if err := backRepo.BackRepoGeoObject.db.First(&geoobjectDB, id).Error; err != nil {
				log.Fatalln("CheckoutGeoObject : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGeoObject.CheckoutPhaseOneInstance(&geoobjectDB)
			backRepo.BackRepoGeoObject.CheckoutPhaseTwoInstance(backRepo, &geoobjectDB)
		}
	}
}

// CopyBasicFieldsFromGeoObject
func (geoobjectDB *GeoObjectDB) CopyBasicFieldsFromGeoObject(geoobject *models.GeoObject) {
	// insertion point for fields commit

	geoobjectDB.Name_Data.String = geoobject.Name
	geoobjectDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGeoObject_WOP
func (geoobjectDB *GeoObjectDB) CopyBasicFieldsFromGeoObject_WOP(geoobject *models.GeoObject_WOP) {
	// insertion point for fields commit

	geoobjectDB.Name_Data.String = geoobject.Name
	geoobjectDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGeoObjectWOP
func (geoobjectDB *GeoObjectDB) CopyBasicFieldsFromGeoObjectWOP(geoobject *GeoObjectWOP) {
	// insertion point for fields commit

	geoobjectDB.Name_Data.String = geoobject.Name
	geoobjectDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGeoObject
func (geoobjectDB *GeoObjectDB) CopyBasicFieldsToGeoObject(geoobject *models.GeoObject) {
	// insertion point for checkout of basic fields (back repo to stage)
	geoobject.Name = geoobjectDB.Name_Data.String
}

// CopyBasicFieldsToGeoObject_WOP
func (geoobjectDB *GeoObjectDB) CopyBasicFieldsToGeoObject_WOP(geoobject *models.GeoObject_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	geoobject.Name = geoobjectDB.Name_Data.String
}

// CopyBasicFieldsToGeoObjectWOP
func (geoobjectDB *GeoObjectDB) CopyBasicFieldsToGeoObjectWOP(geoobject *GeoObjectWOP) {
	geoobject.ID = int(geoobjectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	geoobject.Name = geoobjectDB.Name_Data.String
}

// Backup generates a json file from a slice of all GeoObjectDB instances in the backrepo
func (backRepoGeoObject *BackRepoGeoObjectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GeoObjectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GeoObjectDB, 0)
	for _, geoobjectDB := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB {
		forBackup = append(forBackup, geoobjectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GeoObject ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GeoObject file", err.Error())
	}
}

// Backup generates a json file from a slice of all GeoObjectDB instances in the backrepo
func (backRepoGeoObject *BackRepoGeoObjectStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GeoObjectDB, 0)
	for _, geoobjectDB := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB {
		forBackup = append(forBackup, geoobjectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GeoObject")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GeoObject_Fields, -1)
	for _, geoobjectDB := range forBackup {

		var geoobjectWOP GeoObjectWOP
		geoobjectDB.CopyBasicFieldsToGeoObjectWOP(&geoobjectWOP)

		row := sh.AddRow()
		row.WriteStruct(&geoobjectWOP, -1)
	}
}

// RestoreXL from the "GeoObject" sheet all GeoObjectDB instances
func (backRepoGeoObject *BackRepoGeoObjectStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGeoObjectid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GeoObject"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGeoObject.rowVisitorGeoObject)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGeoObject *BackRepoGeoObjectStruct) rowVisitorGeoObject(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var geoobjectWOP GeoObjectWOP
		row.ReadStruct(&geoobjectWOP)

		// add the unmarshalled struct to the stage
		geoobjectDB := new(GeoObjectDB)
		geoobjectDB.CopyBasicFieldsFromGeoObjectWOP(&geoobjectWOP)

		geoobjectDB_ID_atBackupTime := geoobjectDB.ID
		geoobjectDB.ID = 0
		query := backRepoGeoObject.db.Create(geoobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[geoobjectDB.ID] = geoobjectDB
		BackRepoGeoObjectid_atBckpTime_newID[geoobjectDB_ID_atBackupTime] = geoobjectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GeoObjectDB.json" in dirPath that stores an array
// of GeoObjectDB and stores it in the database
// the map BackRepoGeoObjectid_atBckpTime_newID is updated accordingly
func (backRepoGeoObject *BackRepoGeoObjectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGeoObjectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GeoObjectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GeoObject file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GeoObjectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GeoObjectDBID_GeoObjectDB
	for _, geoobjectDB := range forRestore {

		geoobjectDB_ID_atBackupTime := geoobjectDB.ID
		geoobjectDB.ID = 0
		query := backRepoGeoObject.db.Create(geoobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[geoobjectDB.ID] = geoobjectDB
		BackRepoGeoObjectid_atBckpTime_newID[geoobjectDB_ID_atBackupTime] = geoobjectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GeoObject file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GeoObject>id_atBckpTime_newID
// to compute new index
func (backRepoGeoObject *BackRepoGeoObjectStruct) RestorePhaseTwo() {

	for _, geoobjectDB := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB {

		// next line of code is to avert unused variable compilation error
		_ = geoobjectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoGeoObject.db.Model(geoobjectDB).Updates(*geoobjectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGeoObject.ResetReversePointers commits all staged instances of GeoObject to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGeoObject *BackRepoGeoObjectStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, geoobject := range backRepoGeoObject.Map_GeoObjectDBID_GeoObjectPtr {
		backRepoGeoObject.ResetReversePointersInstance(backRepo, idx, geoobject)
	}

	return
}

func (backRepoGeoObject *BackRepoGeoObjectStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, geoobject *models.GeoObject) (Error error) {

	// fetch matching geoobjectDB
	if geoobjectDB, ok := backRepoGeoObject.Map_GeoObjectDBID_GeoObjectDB[idx]; ok {
		_ = geoobjectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGeoObjectid_atBckpTime_newID map[uint]uint
