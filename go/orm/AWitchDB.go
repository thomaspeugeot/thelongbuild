// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AWitch_sql sql.NullBool
var dummy_AWitch_time time.Duration
var dummy_AWitch_sort sort.Float64Slice

// AWitchAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model awitchAPI
type AWitchAPI struct {
	gorm.Model

	models.AWitch_WOP

	// encoding of pointers
	AWitchPointersEncoding AWitchPointersEncoding
}

// AWitchPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AWitchPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field EvolutionDirection is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EvolutionDirectionID sql.NullInt64
}

// AWitchDB describes a awitch in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model awitchDB
type AWitchDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field awitchDB.Name
	Name_Data sql.NullString

	// Declation for basic field awitchDB.X
	X_Data sql.NullFloat64

	// Declation for basic field awitchDB.Y
	Y_Data sql.NullFloat64

	// Declation for basic field awitchDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field awitchDB.Height
	Height_Data sql.NullFloat64

	// Declation for basic field awitchDB.FillColor
	FillColor_Data sql.NullString

	// Declation for basic field awitchDB.FillOpacity
	FillOpacity_Data sql.NullFloat64

	// Declation for basic field awitchDB.Stroke
	Stroke_Data sql.NullString

	// Declation for basic field awitchDB.StrokeWidth
	StrokeWidth_Data sql.NullFloat64

	// Declation for basic field awitchDB.RX
	RX_Data sql.NullFloat64
	// encoding of pointers
	AWitchPointersEncoding
}

// AWitchDBs arrays awitchDBs
// swagger:response awitchDBsResponse
type AWitchDBs []AWitchDB

// AWitchDBResponse provides response
// swagger:response awitchDBResponse
type AWitchDBResponse struct {
	AWitchDB
}

// AWitchWOP is a AWitch without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AWitchWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	X float64 `xlsx:"2"`

	Y float64 `xlsx:"3"`

	Width float64 `xlsx:"4"`

	Height float64 `xlsx:"5"`

	FillColor string `xlsx:"6"`

	FillOpacity float64 `xlsx:"7"`

	Stroke string `xlsx:"8"`

	StrokeWidth float64 `xlsx:"9"`

	RX float64 `xlsx:"10"`
	// insertion for WOP pointer fields
}

var AWitch_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"X",
	"Y",
	"Width",
	"Height",
	"FillColor",
	"FillOpacity",
	"Stroke",
	"StrokeWidth",
	"RX",
}

type BackRepoAWitchStruct struct {
	// stores AWitchDB according to their gorm ID
	Map_AWitchDBID_AWitchDB map[uint]*AWitchDB

	// stores AWitchDB ID according to AWitch address
	Map_AWitchPtr_AWitchDBID map[*models.AWitch]uint

	// stores AWitch according to their gorm ID
	Map_AWitchDBID_AWitchPtr map[uint]*models.AWitch

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAWitch *BackRepoAWitchStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAWitch.stage
	return
}

func (backRepoAWitch *BackRepoAWitchStruct) GetDB() *gorm.DB {
	return backRepoAWitch.db
}

// GetAWitchDBFromAWitchPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAWitch *BackRepoAWitchStruct) GetAWitchDBFromAWitchPtr(awitch *models.AWitch) (awitchDB *AWitchDB) {
	id := backRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch]
	awitchDB = backRepoAWitch.Map_AWitchDBID_AWitchDB[id]
	return
}

// BackRepoAWitch.CommitPhaseOne commits all staged instances of AWitch to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAWitch *BackRepoAWitchStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for awitch := range stage.AWitchs {
		backRepoAWitch.CommitPhaseOneInstance(awitch)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, awitch := range backRepoAWitch.Map_AWitchDBID_AWitchPtr {
		if _, ok := stage.AWitchs[awitch]; !ok {
			backRepoAWitch.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAWitch.CommitDeleteInstance commits deletion of AWitch to the BackRepo
func (backRepoAWitch *BackRepoAWitchStruct) CommitDeleteInstance(id uint) (Error error) {

	awitch := backRepoAWitch.Map_AWitchDBID_AWitchPtr[id]

	// awitch is not staged anymore, remove awitchDB
	awitchDB := backRepoAWitch.Map_AWitchDBID_AWitchDB[id]
	query := backRepoAWitch.db.Unscoped().Delete(&awitchDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAWitch.Map_AWitchPtr_AWitchDBID, awitch)
	delete(backRepoAWitch.Map_AWitchDBID_AWitchPtr, id)
	delete(backRepoAWitch.Map_AWitchDBID_AWitchDB, id)

	return
}

// BackRepoAWitch.CommitPhaseOneInstance commits awitch staged instances of AWitch to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAWitch *BackRepoAWitchStruct) CommitPhaseOneInstance(awitch *models.AWitch) (Error error) {

	// check if the awitch is not commited yet
	if _, ok := backRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch]; ok {
		return
	}

	// initiate awitch
	var awitchDB AWitchDB
	awitchDB.CopyBasicFieldsFromAWitch(awitch)

	query := backRepoAWitch.db.Create(&awitchDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch] = awitchDB.ID
	backRepoAWitch.Map_AWitchDBID_AWitchPtr[awitchDB.ID] = awitch
	backRepoAWitch.Map_AWitchDBID_AWitchDB[awitchDB.ID] = &awitchDB

	return
}

// BackRepoAWitch.CommitPhaseTwo commits all staged instances of AWitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAWitch *BackRepoAWitchStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, awitch := range backRepoAWitch.Map_AWitchDBID_AWitchPtr {
		backRepoAWitch.CommitPhaseTwoInstance(backRepo, idx, awitch)
	}

	return
}

// BackRepoAWitch.CommitPhaseTwoInstance commits {{structname }} of models.AWitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAWitch *BackRepoAWitchStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, awitch *models.AWitch) (Error error) {

	// fetch matching awitchDB
	if awitchDB, ok := backRepoAWitch.Map_AWitchDBID_AWitchDB[idx]; ok {

		awitchDB.CopyBasicFieldsFromAWitch(awitch)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value awitch.EvolutionDirection translates to updating the awitch.EvolutionDirectionID
		awitchDB.EvolutionDirectionID.Valid = true // allow for a 0 value (nil association)
		if awitch.EvolutionDirection != nil {
			if EvolutionDirectionId, ok := backRepo.BackRepoGalahadThePure.Map_GalahadThePurePtr_GalahadThePureDBID[awitch.EvolutionDirection]; ok {
				awitchDB.EvolutionDirectionID.Int64 = int64(EvolutionDirectionId)
				awitchDB.EvolutionDirectionID.Valid = true
			}
		} else {
			awitchDB.EvolutionDirectionID.Int64 = 0
			awitchDB.EvolutionDirectionID.Valid = true
		}

		query := backRepoAWitch.db.Save(&awitchDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AWitch intance %s", awitch.Name))
		return err
	}

	return
}

// BackRepoAWitch.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAWitch *BackRepoAWitchStruct) CheckoutPhaseOne() (Error error) {

	awitchDBArray := make([]AWitchDB, 0)
	query := backRepoAWitch.db.Find(&awitchDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	awitchInstancesToBeRemovedFromTheStage := make(map[*models.AWitch]any)
	for key, value := range backRepoAWitch.stage.AWitchs {
		awitchInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, awitchDB := range awitchDBArray {
		backRepoAWitch.CheckoutPhaseOneInstance(&awitchDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		awitch, ok := backRepoAWitch.Map_AWitchDBID_AWitchPtr[awitchDB.ID]
		if ok {
			delete(awitchInstancesToBeRemovedFromTheStage, awitch)
		}
	}

	// remove from stage and back repo's 3 maps all awitchs that are not in the checkout
	for awitch := range awitchInstancesToBeRemovedFromTheStage {
		awitch.Unstage(backRepoAWitch.GetStage())

		// remove instance from the back repo 3 maps
		awitchID := backRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch]
		delete(backRepoAWitch.Map_AWitchPtr_AWitchDBID, awitch)
		delete(backRepoAWitch.Map_AWitchDBID_AWitchDB, awitchID)
		delete(backRepoAWitch.Map_AWitchDBID_AWitchPtr, awitchID)
	}

	return
}

// CheckoutPhaseOneInstance takes a awitchDB that has been found in the DB, updates the backRepo and stages the
// models version of the awitchDB
func (backRepoAWitch *BackRepoAWitchStruct) CheckoutPhaseOneInstance(awitchDB *AWitchDB) (Error error) {

	awitch, ok := backRepoAWitch.Map_AWitchDBID_AWitchPtr[awitchDB.ID]
	if !ok {
		awitch = new(models.AWitch)

		backRepoAWitch.Map_AWitchDBID_AWitchPtr[awitchDB.ID] = awitch
		backRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch] = awitchDB.ID

		// append model store with the new element
		awitch.Name = awitchDB.Name_Data.String
		awitch.Stage(backRepoAWitch.GetStage())
	}
	awitchDB.CopyBasicFieldsToAWitch(awitch)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	awitch.Stage(backRepoAWitch.GetStage())

	// preserve pointer to awitchDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AWitchDBID_AWitchDB)[awitchDB hold variable pointers
	awitchDB_Data := *awitchDB
	preservedPtrToAWitch := &awitchDB_Data
	backRepoAWitch.Map_AWitchDBID_AWitchDB[awitchDB.ID] = preservedPtrToAWitch

	return
}

// BackRepoAWitch.CheckoutPhaseTwo Checkouts all staged instances of AWitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAWitch *BackRepoAWitchStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, awitchDB := range backRepoAWitch.Map_AWitchDBID_AWitchDB {
		backRepoAWitch.CheckoutPhaseTwoInstance(backRepo, awitchDB)
	}
	return
}

// BackRepoAWitch.CheckoutPhaseTwoInstance Checkouts staged instances of AWitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAWitch *BackRepoAWitchStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, awitchDB *AWitchDB) (Error error) {

	awitch := backRepoAWitch.Map_AWitchDBID_AWitchPtr[awitchDB.ID]

	awitchDB.DecodePointers(backRepo, awitch)

	return
}

func (awitchDB *AWitchDB) DecodePointers(backRepo *BackRepoStruct, awitch *models.AWitch) {

	// insertion point for checkout of pointer encoding
	// EvolutionDirection field
	awitch.EvolutionDirection = nil
	if awitchDB.EvolutionDirectionID.Int64 != 0 {
		awitch.EvolutionDirection = backRepo.BackRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[uint(awitchDB.EvolutionDirectionID.Int64)]
	}
	return
}

// CommitAWitch allows commit of a single awitch (if already staged)
func (backRepo *BackRepoStruct) CommitAWitch(awitch *models.AWitch) {
	backRepo.BackRepoAWitch.CommitPhaseOneInstance(awitch)
	if id, ok := backRepo.BackRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch]; ok {
		backRepo.BackRepoAWitch.CommitPhaseTwoInstance(backRepo, id, awitch)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAWitch allows checkout of a single awitch (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAWitch(awitch *models.AWitch) {
	// check if the awitch is staged
	if _, ok := backRepo.BackRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch]; ok {

		if id, ok := backRepo.BackRepoAWitch.Map_AWitchPtr_AWitchDBID[awitch]; ok {
			var awitchDB AWitchDB
			awitchDB.ID = id

			if err := backRepo.BackRepoAWitch.db.First(&awitchDB, id).Error; err != nil {
				log.Fatalln("CheckoutAWitch : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAWitch.CheckoutPhaseOneInstance(&awitchDB)
			backRepo.BackRepoAWitch.CheckoutPhaseTwoInstance(backRepo, &awitchDB)
		}
	}
}

// CopyBasicFieldsFromAWitch
func (awitchDB *AWitchDB) CopyBasicFieldsFromAWitch(awitch *models.AWitch) {
	// insertion point for fields commit

	awitchDB.Name_Data.String = awitch.Name
	awitchDB.Name_Data.Valid = true

	awitchDB.X_Data.Float64 = awitch.X
	awitchDB.X_Data.Valid = true

	awitchDB.Y_Data.Float64 = awitch.Y
	awitchDB.Y_Data.Valid = true

	awitchDB.Width_Data.Float64 = awitch.Width
	awitchDB.Width_Data.Valid = true

	awitchDB.Height_Data.Float64 = awitch.Height
	awitchDB.Height_Data.Valid = true

	awitchDB.FillColor_Data.String = awitch.FillColor
	awitchDB.FillColor_Data.Valid = true

	awitchDB.FillOpacity_Data.Float64 = awitch.FillOpacity
	awitchDB.FillOpacity_Data.Valid = true

	awitchDB.Stroke_Data.String = awitch.Stroke
	awitchDB.Stroke_Data.Valid = true

	awitchDB.StrokeWidth_Data.Float64 = awitch.StrokeWidth
	awitchDB.StrokeWidth_Data.Valid = true

	awitchDB.RX_Data.Float64 = awitch.RX
	awitchDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromAWitch_WOP
func (awitchDB *AWitchDB) CopyBasicFieldsFromAWitch_WOP(awitch *models.AWitch_WOP) {
	// insertion point for fields commit

	awitchDB.Name_Data.String = awitch.Name
	awitchDB.Name_Data.Valid = true

	awitchDB.X_Data.Float64 = awitch.X
	awitchDB.X_Data.Valid = true

	awitchDB.Y_Data.Float64 = awitch.Y
	awitchDB.Y_Data.Valid = true

	awitchDB.Width_Data.Float64 = awitch.Width
	awitchDB.Width_Data.Valid = true

	awitchDB.Height_Data.Float64 = awitch.Height
	awitchDB.Height_Data.Valid = true

	awitchDB.FillColor_Data.String = awitch.FillColor
	awitchDB.FillColor_Data.Valid = true

	awitchDB.FillOpacity_Data.Float64 = awitch.FillOpacity
	awitchDB.FillOpacity_Data.Valid = true

	awitchDB.Stroke_Data.String = awitch.Stroke
	awitchDB.Stroke_Data.Valid = true

	awitchDB.StrokeWidth_Data.Float64 = awitch.StrokeWidth
	awitchDB.StrokeWidth_Data.Valid = true

	awitchDB.RX_Data.Float64 = awitch.RX
	awitchDB.RX_Data.Valid = true
}

// CopyBasicFieldsFromAWitchWOP
func (awitchDB *AWitchDB) CopyBasicFieldsFromAWitchWOP(awitch *AWitchWOP) {
	// insertion point for fields commit

	awitchDB.Name_Data.String = awitch.Name
	awitchDB.Name_Data.Valid = true

	awitchDB.X_Data.Float64 = awitch.X
	awitchDB.X_Data.Valid = true

	awitchDB.Y_Data.Float64 = awitch.Y
	awitchDB.Y_Data.Valid = true

	awitchDB.Width_Data.Float64 = awitch.Width
	awitchDB.Width_Data.Valid = true

	awitchDB.Height_Data.Float64 = awitch.Height
	awitchDB.Height_Data.Valid = true

	awitchDB.FillColor_Data.String = awitch.FillColor
	awitchDB.FillColor_Data.Valid = true

	awitchDB.FillOpacity_Data.Float64 = awitch.FillOpacity
	awitchDB.FillOpacity_Data.Valid = true

	awitchDB.Stroke_Data.String = awitch.Stroke
	awitchDB.Stroke_Data.Valid = true

	awitchDB.StrokeWidth_Data.Float64 = awitch.StrokeWidth
	awitchDB.StrokeWidth_Data.Valid = true

	awitchDB.RX_Data.Float64 = awitch.RX
	awitchDB.RX_Data.Valid = true
}

// CopyBasicFieldsToAWitch
func (awitchDB *AWitchDB) CopyBasicFieldsToAWitch(awitch *models.AWitch) {
	// insertion point for checkout of basic fields (back repo to stage)
	awitch.Name = awitchDB.Name_Data.String
	awitch.X = awitchDB.X_Data.Float64
	awitch.Y = awitchDB.Y_Data.Float64
	awitch.Width = awitchDB.Width_Data.Float64
	awitch.Height = awitchDB.Height_Data.Float64
	awitch.FillColor = awitchDB.FillColor_Data.String
	awitch.FillOpacity = awitchDB.FillOpacity_Data.Float64
	awitch.Stroke = awitchDB.Stroke_Data.String
	awitch.StrokeWidth = awitchDB.StrokeWidth_Data.Float64
	awitch.RX = awitchDB.RX_Data.Float64
}

// CopyBasicFieldsToAWitch_WOP
func (awitchDB *AWitchDB) CopyBasicFieldsToAWitch_WOP(awitch *models.AWitch_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	awitch.Name = awitchDB.Name_Data.String
	awitch.X = awitchDB.X_Data.Float64
	awitch.Y = awitchDB.Y_Data.Float64
	awitch.Width = awitchDB.Width_Data.Float64
	awitch.Height = awitchDB.Height_Data.Float64
	awitch.FillColor = awitchDB.FillColor_Data.String
	awitch.FillOpacity = awitchDB.FillOpacity_Data.Float64
	awitch.Stroke = awitchDB.Stroke_Data.String
	awitch.StrokeWidth = awitchDB.StrokeWidth_Data.Float64
	awitch.RX = awitchDB.RX_Data.Float64
}

// CopyBasicFieldsToAWitchWOP
func (awitchDB *AWitchDB) CopyBasicFieldsToAWitchWOP(awitch *AWitchWOP) {
	awitch.ID = int(awitchDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	awitch.Name = awitchDB.Name_Data.String
	awitch.X = awitchDB.X_Data.Float64
	awitch.Y = awitchDB.Y_Data.Float64
	awitch.Width = awitchDB.Width_Data.Float64
	awitch.Height = awitchDB.Height_Data.Float64
	awitch.FillColor = awitchDB.FillColor_Data.String
	awitch.FillOpacity = awitchDB.FillOpacity_Data.Float64
	awitch.Stroke = awitchDB.Stroke_Data.String
	awitch.StrokeWidth = awitchDB.StrokeWidth_Data.Float64
	awitch.RX = awitchDB.RX_Data.Float64
}

// Backup generates a json file from a slice of all AWitchDB instances in the backrepo
func (backRepoAWitch *BackRepoAWitchStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AWitchDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AWitchDB, 0)
	for _, awitchDB := range backRepoAWitch.Map_AWitchDBID_AWitchDB {
		forBackup = append(forBackup, awitchDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AWitch ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AWitch file", err.Error())
	}
}

// Backup generates a json file from a slice of all AWitchDB instances in the backrepo
func (backRepoAWitch *BackRepoAWitchStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AWitchDB, 0)
	for _, awitchDB := range backRepoAWitch.Map_AWitchDBID_AWitchDB {
		forBackup = append(forBackup, awitchDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AWitch")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AWitch_Fields, -1)
	for _, awitchDB := range forBackup {

		var awitchWOP AWitchWOP
		awitchDB.CopyBasicFieldsToAWitchWOP(&awitchWOP)

		row := sh.AddRow()
		row.WriteStruct(&awitchWOP, -1)
	}
}

// RestoreXL from the "AWitch" sheet all AWitchDB instances
func (backRepoAWitch *BackRepoAWitchStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAWitchid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AWitch"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAWitch.rowVisitorAWitch)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAWitch *BackRepoAWitchStruct) rowVisitorAWitch(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var awitchWOP AWitchWOP
		row.ReadStruct(&awitchWOP)

		// add the unmarshalled struct to the stage
		awitchDB := new(AWitchDB)
		awitchDB.CopyBasicFieldsFromAWitchWOP(&awitchWOP)

		awitchDB_ID_atBackupTime := awitchDB.ID
		awitchDB.ID = 0
		query := backRepoAWitch.db.Create(awitchDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAWitch.Map_AWitchDBID_AWitchDB[awitchDB.ID] = awitchDB
		BackRepoAWitchid_atBckpTime_newID[awitchDB_ID_atBackupTime] = awitchDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AWitchDB.json" in dirPath that stores an array
// of AWitchDB and stores it in the database
// the map BackRepoAWitchid_atBckpTime_newID is updated accordingly
func (backRepoAWitch *BackRepoAWitchStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAWitchid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AWitchDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AWitch file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AWitchDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AWitchDBID_AWitchDB
	for _, awitchDB := range forRestore {

		awitchDB_ID_atBackupTime := awitchDB.ID
		awitchDB.ID = 0
		query := backRepoAWitch.db.Create(awitchDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAWitch.Map_AWitchDBID_AWitchDB[awitchDB.ID] = awitchDB
		BackRepoAWitchid_atBckpTime_newID[awitchDB_ID_atBackupTime] = awitchDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AWitch file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AWitch>id_atBckpTime_newID
// to compute new index
func (backRepoAWitch *BackRepoAWitchStruct) RestorePhaseTwo() {

	for _, awitchDB := range backRepoAWitch.Map_AWitchDBID_AWitchDB {

		// next line of code is to avert unused variable compilation error
		_ = awitchDB

		// insertion point for reindexing pointers encoding
		// reindexing EvolutionDirection field
		if awitchDB.EvolutionDirectionID.Int64 != 0 {
			awitchDB.EvolutionDirectionID.Int64 = int64(BackRepoGalahadThePureid_atBckpTime_newID[uint(awitchDB.EvolutionDirectionID.Int64)])
			awitchDB.EvolutionDirectionID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAWitch.db.Model(awitchDB).Updates(*awitchDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAWitch.ResetReversePointers commits all staged instances of AWitch to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAWitch *BackRepoAWitchStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, awitch := range backRepoAWitch.Map_AWitchDBID_AWitchPtr {
		backRepoAWitch.ResetReversePointersInstance(backRepo, idx, awitch)
	}

	return
}

func (backRepoAWitch *BackRepoAWitchStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, awitch *models.AWitch) (Error error) {

	// fetch matching awitchDB
	if awitchDB, ok := backRepoAWitch.Map_AWitchDBID_AWitchDB[idx]; ok {
		_ = awitchDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAWitchid_atBckpTime_newID map[uint]uint
