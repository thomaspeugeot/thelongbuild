// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_GroupUse_sql sql.NullBool
var dummy_GroupUse_time time.Duration
var dummy_GroupUse_sort sort.Float64Slice

// GroupUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model groupuseAPI
type GroupUseAPI struct {
	gorm.Model

	models.GroupUse_WOP

	// encoding of pointers
	GroupUsePointersEncoding GroupUsePointersEncoding
}

// GroupUsePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GroupUsePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Group is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GroupID sql.NullInt64
}

// GroupUseDB describes a groupuse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model groupuseDB
type GroupUseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field groupuseDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	GroupUsePointersEncoding
}

// GroupUseDBs arrays groupuseDBs
// swagger:response groupuseDBsResponse
type GroupUseDBs []GroupUseDB

// GroupUseDBResponse provides response
// swagger:response groupuseDBResponse
type GroupUseDBResponse struct {
	GroupUseDB
}

// GroupUseWOP is a GroupUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GroupUseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var GroupUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoGroupUseStruct struct {
	// stores GroupUseDB according to their gorm ID
	Map_GroupUseDBID_GroupUseDB map[uint]*GroupUseDB

	// stores GroupUseDB ID according to GroupUse address
	Map_GroupUsePtr_GroupUseDBID map[*models.GroupUse]uint

	// stores GroupUse according to their gorm ID
	Map_GroupUseDBID_GroupUsePtr map[uint]*models.GroupUse

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoGroupUse *BackRepoGroupUseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGroupUse.stage
	return
}

func (backRepoGroupUse *BackRepoGroupUseStruct) GetDB() *gorm.DB {
	return backRepoGroupUse.db
}

// GetGroupUseDBFromGroupUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoGroupUse *BackRepoGroupUseStruct) GetGroupUseDBFromGroupUsePtr(groupuse *models.GroupUse) (groupuseDB *GroupUseDB) {
	id := backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse]
	groupuseDB = backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[id]
	return
}

// BackRepoGroupUse.CommitPhaseOne commits all staged instances of GroupUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroupUse *BackRepoGroupUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for groupuse := range stage.GroupUses {
		backRepoGroupUse.CommitPhaseOneInstance(groupuse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, groupuse := range backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr {
		if _, ok := stage.GroupUses[groupuse]; !ok {
			backRepoGroupUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGroupUse.CommitDeleteInstance commits deletion of GroupUse to the BackRepo
func (backRepoGroupUse *BackRepoGroupUseStruct) CommitDeleteInstance(id uint) (Error error) {

	groupuse := backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[id]

	// groupuse is not staged anymore, remove groupuseDB
	groupuseDB := backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[id]
	query := backRepoGroupUse.db.Unscoped().Delete(&groupuseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID, groupuse)
	delete(backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr, id)
	delete(backRepoGroupUse.Map_GroupUseDBID_GroupUseDB, id)

	return
}

// BackRepoGroupUse.CommitPhaseOneInstance commits groupuse staged instances of GroupUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroupUse *BackRepoGroupUseStruct) CommitPhaseOneInstance(groupuse *models.GroupUse) (Error error) {

	// check if the groupuse is not commited yet
	if _, ok := backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse]; ok {
		return
	}

	// initiate groupuse
	var groupuseDB GroupUseDB
	groupuseDB.CopyBasicFieldsFromGroupUse(groupuse)

	query := backRepoGroupUse.db.Create(&groupuseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse] = groupuseDB.ID
	backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[groupuseDB.ID] = groupuse
	backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[groupuseDB.ID] = &groupuseDB

	return
}

// BackRepoGroupUse.CommitPhaseTwo commits all staged instances of GroupUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroupUse *BackRepoGroupUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, groupuse := range backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr {
		backRepoGroupUse.CommitPhaseTwoInstance(backRepo, idx, groupuse)
	}

	return
}

// BackRepoGroupUse.CommitPhaseTwoInstance commits {{structname }} of models.GroupUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroupUse *BackRepoGroupUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, groupuse *models.GroupUse) (Error error) {

	// fetch matching groupuseDB
	if groupuseDB, ok := backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[idx]; ok {

		groupuseDB.CopyBasicFieldsFromGroupUse(groupuse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value groupuse.Group translates to updating the groupuse.GroupID
		groupuseDB.GroupID.Valid = true // allow for a 0 value (nil association)
		if groupuse.Group != nil {
			if GroupId, ok := backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID[groupuse.Group]; ok {
				groupuseDB.GroupID.Int64 = int64(GroupId)
				groupuseDB.GroupID.Valid = true
			}
		} else {
			groupuseDB.GroupID.Int64 = 0
			groupuseDB.GroupID.Valid = true
		}

		query := backRepoGroupUse.db.Save(&groupuseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown GroupUse intance %s", groupuse.Name))
		return err
	}

	return
}

// BackRepoGroupUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGroupUse *BackRepoGroupUseStruct) CheckoutPhaseOne() (Error error) {

	groupuseDBArray := make([]GroupUseDB, 0)
	query := backRepoGroupUse.db.Find(&groupuseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	groupuseInstancesToBeRemovedFromTheStage := make(map[*models.GroupUse]any)
	for key, value := range backRepoGroupUse.stage.GroupUses {
		groupuseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, groupuseDB := range groupuseDBArray {
		backRepoGroupUse.CheckoutPhaseOneInstance(&groupuseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		groupuse, ok := backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[groupuseDB.ID]
		if ok {
			delete(groupuseInstancesToBeRemovedFromTheStage, groupuse)
		}
	}

	// remove from stage and back repo's 3 maps all groupuses that are not in the checkout
	for groupuse := range groupuseInstancesToBeRemovedFromTheStage {
		groupuse.Unstage(backRepoGroupUse.GetStage())

		// remove instance from the back repo 3 maps
		groupuseID := backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse]
		delete(backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID, groupuse)
		delete(backRepoGroupUse.Map_GroupUseDBID_GroupUseDB, groupuseID)
		delete(backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr, groupuseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a groupuseDB that has been found in the DB, updates the backRepo and stages the
// models version of the groupuseDB
func (backRepoGroupUse *BackRepoGroupUseStruct) CheckoutPhaseOneInstance(groupuseDB *GroupUseDB) (Error error) {

	groupuse, ok := backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[groupuseDB.ID]
	if !ok {
		groupuse = new(models.GroupUse)

		backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[groupuseDB.ID] = groupuse
		backRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse] = groupuseDB.ID

		// append model store with the new element
		groupuse.Name = groupuseDB.Name_Data.String
		groupuse.Stage(backRepoGroupUse.GetStage())
	}
	groupuseDB.CopyBasicFieldsToGroupUse(groupuse)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	groupuse.Stage(backRepoGroupUse.GetStage())

	// preserve pointer to groupuseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GroupUseDBID_GroupUseDB)[groupuseDB hold variable pointers
	groupuseDB_Data := *groupuseDB
	preservedPtrToGroupUse := &groupuseDB_Data
	backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[groupuseDB.ID] = preservedPtrToGroupUse

	return
}

// BackRepoGroupUse.CheckoutPhaseTwo Checkouts all staged instances of GroupUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroupUse *BackRepoGroupUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, groupuseDB := range backRepoGroupUse.Map_GroupUseDBID_GroupUseDB {
		backRepoGroupUse.CheckoutPhaseTwoInstance(backRepo, groupuseDB)
	}
	return
}

// BackRepoGroupUse.CheckoutPhaseTwoInstance Checkouts staged instances of GroupUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroupUse *BackRepoGroupUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, groupuseDB *GroupUseDB) (Error error) {

	groupuse := backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr[groupuseDB.ID]

	groupuseDB.DecodePointers(backRepo, groupuse)

	return
}

func (groupuseDB *GroupUseDB) DecodePointers(backRepo *BackRepoStruct, groupuse *models.GroupUse) {

	// insertion point for checkout of pointer encoding
	// Group field
	groupuse.Group = nil
	if groupuseDB.GroupID.Int64 != 0 {
		groupuse.Group = backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(groupuseDB.GroupID.Int64)]
	}
	return
}

// CommitGroupUse allows commit of a single groupuse (if already staged)
func (backRepo *BackRepoStruct) CommitGroupUse(groupuse *models.GroupUse) {
	backRepo.BackRepoGroupUse.CommitPhaseOneInstance(groupuse)
	if id, ok := backRepo.BackRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse]; ok {
		backRepo.BackRepoGroupUse.CommitPhaseTwoInstance(backRepo, id, groupuse)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGroupUse allows checkout of a single groupuse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGroupUse(groupuse *models.GroupUse) {
	// check if the groupuse is staged
	if _, ok := backRepo.BackRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse]; ok {

		if id, ok := backRepo.BackRepoGroupUse.Map_GroupUsePtr_GroupUseDBID[groupuse]; ok {
			var groupuseDB GroupUseDB
			groupuseDB.ID = id

			if err := backRepo.BackRepoGroupUse.db.First(&groupuseDB, id).Error; err != nil {
				log.Fatalln("CheckoutGroupUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGroupUse.CheckoutPhaseOneInstance(&groupuseDB)
			backRepo.BackRepoGroupUse.CheckoutPhaseTwoInstance(backRepo, &groupuseDB)
		}
	}
}

// CopyBasicFieldsFromGroupUse
func (groupuseDB *GroupUseDB) CopyBasicFieldsFromGroupUse(groupuse *models.GroupUse) {
	// insertion point for fields commit

	groupuseDB.Name_Data.String = groupuse.Name
	groupuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGroupUse_WOP
func (groupuseDB *GroupUseDB) CopyBasicFieldsFromGroupUse_WOP(groupuse *models.GroupUse_WOP) {
	// insertion point for fields commit

	groupuseDB.Name_Data.String = groupuse.Name
	groupuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromGroupUseWOP
func (groupuseDB *GroupUseDB) CopyBasicFieldsFromGroupUseWOP(groupuse *GroupUseWOP) {
	// insertion point for fields commit

	groupuseDB.Name_Data.String = groupuse.Name
	groupuseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToGroupUse
func (groupuseDB *GroupUseDB) CopyBasicFieldsToGroupUse(groupuse *models.GroupUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	groupuse.Name = groupuseDB.Name_Data.String
}

// CopyBasicFieldsToGroupUse_WOP
func (groupuseDB *GroupUseDB) CopyBasicFieldsToGroupUse_WOP(groupuse *models.GroupUse_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	groupuse.Name = groupuseDB.Name_Data.String
}

// CopyBasicFieldsToGroupUseWOP
func (groupuseDB *GroupUseDB) CopyBasicFieldsToGroupUseWOP(groupuse *GroupUseWOP) {
	groupuse.ID = int(groupuseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	groupuse.Name = groupuseDB.Name_Data.String
}

// Backup generates a json file from a slice of all GroupUseDB instances in the backrepo
func (backRepoGroupUse *BackRepoGroupUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GroupUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GroupUseDB, 0)
	for _, groupuseDB := range backRepoGroupUse.Map_GroupUseDBID_GroupUseDB {
		forBackup = append(forBackup, groupuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json GroupUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json GroupUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all GroupUseDB instances in the backrepo
func (backRepoGroupUse *BackRepoGroupUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GroupUseDB, 0)
	for _, groupuseDB := range backRepoGroupUse.Map_GroupUseDBID_GroupUseDB {
		forBackup = append(forBackup, groupuseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("GroupUse")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&GroupUse_Fields, -1)
	for _, groupuseDB := range forBackup {

		var groupuseWOP GroupUseWOP
		groupuseDB.CopyBasicFieldsToGroupUseWOP(&groupuseWOP)

		row := sh.AddRow()
		row.WriteStruct(&groupuseWOP, -1)
	}
}

// RestoreXL from the "GroupUse" sheet all GroupUseDB instances
func (backRepoGroupUse *BackRepoGroupUseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGroupUseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["GroupUse"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGroupUse.rowVisitorGroupUse)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGroupUse *BackRepoGroupUseStruct) rowVisitorGroupUse(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var groupuseWOP GroupUseWOP
		row.ReadStruct(&groupuseWOP)

		// add the unmarshalled struct to the stage
		groupuseDB := new(GroupUseDB)
		groupuseDB.CopyBasicFieldsFromGroupUseWOP(&groupuseWOP)

		groupuseDB_ID_atBackupTime := groupuseDB.ID
		groupuseDB.ID = 0
		query := backRepoGroupUse.db.Create(groupuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[groupuseDB.ID] = groupuseDB
		BackRepoGroupUseid_atBckpTime_newID[groupuseDB_ID_atBackupTime] = groupuseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GroupUseDB.json" in dirPath that stores an array
// of GroupUseDB and stores it in the database
// the map BackRepoGroupUseid_atBckpTime_newID is updated accordingly
func (backRepoGroupUse *BackRepoGroupUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGroupUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GroupUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json GroupUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GroupUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GroupUseDBID_GroupUseDB
	for _, groupuseDB := range forRestore {

		groupuseDB_ID_atBackupTime := groupuseDB.ID
		groupuseDB.ID = 0
		query := backRepoGroupUse.db.Create(groupuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[groupuseDB.ID] = groupuseDB
		BackRepoGroupUseid_atBckpTime_newID[groupuseDB_ID_atBackupTime] = groupuseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json GroupUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<GroupUse>id_atBckpTime_newID
// to compute new index
func (backRepoGroupUse *BackRepoGroupUseStruct) RestorePhaseTwo() {

	for _, groupuseDB := range backRepoGroupUse.Map_GroupUseDBID_GroupUseDB {

		// next line of code is to avert unused variable compilation error
		_ = groupuseDB

		// insertion point for reindexing pointers encoding
		// reindexing Group field
		if groupuseDB.GroupID.Int64 != 0 {
			groupuseDB.GroupID.Int64 = int64(BackRepoGroupid_atBckpTime_newID[uint(groupuseDB.GroupID.Int64)])
			groupuseDB.GroupID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoGroupUse.db.Model(groupuseDB).Updates(*groupuseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoGroupUse.ResetReversePointers commits all staged instances of GroupUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroupUse *BackRepoGroupUseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, groupuse := range backRepoGroupUse.Map_GroupUseDBID_GroupUsePtr {
		backRepoGroupUse.ResetReversePointersInstance(backRepo, idx, groupuse)
	}

	return
}

func (backRepoGroupUse *BackRepoGroupUseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, groupuse *models.GroupUse) (Error error) {

	// fetch matching groupuseDB
	if groupuseDB, ok := backRepoGroupUse.Map_GroupUseDBID_GroupUseDB[idx]; ok {
		_ = groupuseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGroupUseid_atBckpTime_newID map[uint]uint
