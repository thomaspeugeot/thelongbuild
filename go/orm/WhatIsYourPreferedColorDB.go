// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_WhatIsYourPreferedColor_sql sql.NullBool
var dummy_WhatIsYourPreferedColor_time time.Duration
var dummy_WhatIsYourPreferedColor_sort sort.Float64Slice

// WhatIsYourPreferedColorAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model whatisyourpreferedcolorAPI
type WhatIsYourPreferedColorAPI struct {
	gorm.Model

	models.WhatIsYourPreferedColor_WOP

	// encoding of pointers
	WhatIsYourPreferedColorPointersEncoding WhatIsYourPreferedColorPointersEncoding
}

// WhatIsYourPreferedColorPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type WhatIsYourPreferedColorPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Diagrams is a slice of pointers to another Struct (optional or 0..1)
	Diagrams IntSlice `gorm:"type:TEXT"`

	// field KingArthurs is a slice of pointers to another Struct (optional or 0..1)
	KingArthurs IntSlice `gorm:"type:TEXT"`

	// field Nutes is a slice of pointers to another Struct (optional or 0..1)
	Nutes IntSlice `gorm:"type:TEXT"`

	// field Galahard is a slice of pointers to another Struct (optional or 0..1)
	Galahard IntSlice `gorm:"type:TEXT"`

	// field Lancelots is a slice of pointers to another Struct (optional or 0..1)
	Lancelots IntSlice `gorm:"type:TEXT"`

	// field BringYourDeadarameters is a slice of pointers to another Struct (optional or 0..1)
	BringYourDeadarameters IntSlice `gorm:"type:TEXT"`
}

// WhatIsYourPreferedColorDB describes a whatisyourpreferedcolor in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model whatisyourpreferedcolorDB
type WhatIsYourPreferedColorDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field whatisyourpreferedcolorDB.Name
	Name_Data sql.NullString

	// Declation for basic field whatisyourpreferedcolorDB.Description
	Description_Data sql.NullString

	// Declation for basic field whatisyourpreferedcolorDB.DiagramsNodeFolded
	// provide the sql storage for the boolan
	DiagramsNodeFolded_Data sql.NullBool

	// Declation for basic field whatisyourpreferedcolorDB.KingArthurNodeFolded
	// provide the sql storage for the boolan
	KingArthurNodeFolded_Data sql.NullBool

	// Declation for basic field whatisyourpreferedcolorDB.RRRR
	// provide the sql storage for the boolan
	RRRR_Data sql.NullBool

	// Declation for basic field whatisyourpreferedcolorDB.IIUU
	// provide the sql storage for the boolan
	IIUU_Data sql.NullBool

	// Declation for basic field whatisyourpreferedcolorDB.LancelotsodeFolded
	// provide the sql storage for the boolan
	LancelotsodeFolded_Data sql.NullBool

	// Declation for basic field whatisyourpreferedcolorDB.RRRRT
	// provide the sql storage for the boolan
	RRRRT_Data sql.NullBool

	// Declation for basic field whatisyourpreferedcolorDB.IsNodeExpanded
	// provide the sql storage for the boolan
	IsNodeExpanded_Data sql.NullBool
	// encoding of pointers
	WhatIsYourPreferedColorPointersEncoding
}

// WhatIsYourPreferedColorDBs arrays whatisyourpreferedcolorDBs
// swagger:response whatisyourpreferedcolorDBsResponse
type WhatIsYourPreferedColorDBs []WhatIsYourPreferedColorDB

// WhatIsYourPreferedColorDBResponse provides response
// swagger:response whatisyourpreferedcolorDBResponse
type WhatIsYourPreferedColorDBResponse struct {
	WhatIsYourPreferedColorDB
}

// WhatIsYourPreferedColorWOP is a WhatIsYourPreferedColor without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type WhatIsYourPreferedColorWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Description string `xlsx:"2"`

	DiagramsNodeFolded bool `xlsx:"3"`

	KingArthurNodeFolded bool `xlsx:"4"`

	RRRR bool `xlsx:"5"`

	IIUU bool `xlsx:"6"`

	LancelotsodeFolded bool `xlsx:"7"`

	RRRRT bool `xlsx:"8"`

	IsNodeExpanded bool `xlsx:"9"`
	// insertion for WOP pointer fields
}

var WhatIsYourPreferedColor_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Description",
	"DiagramsNodeFolded",
	"KingArthurNodeFolded",
	"RRRR",
	"IIUU",
	"LancelotsodeFolded",
	"RRRRT",
	"IsNodeExpanded",
}

type BackRepoWhatIsYourPreferedColorStruct struct {
	// stores WhatIsYourPreferedColorDB according to their gorm ID
	Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB map[uint]*WhatIsYourPreferedColorDB

	// stores WhatIsYourPreferedColorDB ID according to WhatIsYourPreferedColor address
	Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID map[*models.WhatIsYourPreferedColor]uint

	// stores WhatIsYourPreferedColor according to their gorm ID
	Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr map[uint]*models.WhatIsYourPreferedColor

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWhatIsYourPreferedColor.stage
	return
}

func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) GetDB() *gorm.DB {
	return backRepoWhatIsYourPreferedColor.db
}

// GetWhatIsYourPreferedColorDBFromWhatIsYourPreferedColorPtr is a handy function to access the back repo instance from the stage instance
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) GetWhatIsYourPreferedColorDBFromWhatIsYourPreferedColorPtr(whatisyourpreferedcolor *models.WhatIsYourPreferedColor) (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) {
	id := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor]
	whatisyourpreferedcolorDB = backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[id]
	return
}

// BackRepoWhatIsYourPreferedColor.CommitPhaseOne commits all staged instances of WhatIsYourPreferedColor to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for whatisyourpreferedcolor := range stage.WhatIsYourPreferedColors {
		backRepoWhatIsYourPreferedColor.CommitPhaseOneInstance(whatisyourpreferedcolor)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, whatisyourpreferedcolor := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr {
		if _, ok := stage.WhatIsYourPreferedColors[whatisyourpreferedcolor]; !ok {
			backRepoWhatIsYourPreferedColor.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWhatIsYourPreferedColor.CommitDeleteInstance commits deletion of WhatIsYourPreferedColor to the BackRepo
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CommitDeleteInstance(id uint) (Error error) {

	whatisyourpreferedcolor := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[id]

	// whatisyourpreferedcolor is not staged anymore, remove whatisyourpreferedcolorDB
	whatisyourpreferedcolorDB := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[id]
	query := backRepoWhatIsYourPreferedColor.db.Unscoped().Delete(&whatisyourpreferedcolorDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID, whatisyourpreferedcolor)
	delete(backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr, id)
	delete(backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB, id)

	return
}

// BackRepoWhatIsYourPreferedColor.CommitPhaseOneInstance commits whatisyourpreferedcolor staged instances of WhatIsYourPreferedColor to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CommitPhaseOneInstance(whatisyourpreferedcolor *models.WhatIsYourPreferedColor) (Error error) {

	// check if the whatisyourpreferedcolor is not commited yet
	if _, ok := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor]; ok {
		return
	}

	// initiate whatisyourpreferedcolor
	var whatisyourpreferedcolorDB WhatIsYourPreferedColorDB
	whatisyourpreferedcolorDB.CopyBasicFieldsFromWhatIsYourPreferedColor(whatisyourpreferedcolor)

	query := backRepoWhatIsYourPreferedColor.db.Create(&whatisyourpreferedcolorDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor] = whatisyourpreferedcolorDB.ID
	backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[whatisyourpreferedcolorDB.ID] = whatisyourpreferedcolor
	backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[whatisyourpreferedcolorDB.ID] = &whatisyourpreferedcolorDB

	return
}

// BackRepoWhatIsYourPreferedColor.CommitPhaseTwo commits all staged instances of WhatIsYourPreferedColor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, whatisyourpreferedcolor := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr {
		backRepoWhatIsYourPreferedColor.CommitPhaseTwoInstance(backRepo, idx, whatisyourpreferedcolor)
	}

	return
}

// BackRepoWhatIsYourPreferedColor.CommitPhaseTwoInstance commits {{structname }} of models.WhatIsYourPreferedColor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, whatisyourpreferedcolor *models.WhatIsYourPreferedColor) (Error error) {

	// fetch matching whatisyourpreferedcolorDB
	if whatisyourpreferedcolorDB, ok := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[idx]; ok {

		whatisyourpreferedcolorDB.CopyBasicFieldsFromWhatIsYourPreferedColor(whatisyourpreferedcolor)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Diagrams = make([]int, 0)
		// 2. encode
		for _, sirrobinAssocEnd := range whatisyourpreferedcolor.Diagrams {
			sirrobinAssocEnd_DB :=
				backRepo.BackRepoSirRobin.GetSirRobinDBFromSirRobinPtr(sirrobinAssocEnd)

			// the stage might be inconsistant, meaning that the sirrobinAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if sirrobinAssocEnd_DB == nil {
				continue
			}

			whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Diagrams =
				append(whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Diagrams, int(sirrobinAssocEnd_DB.ID))
		}

		// 1. reset
		whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.KingArthurs = make([]int, 0)
		// 2. encode
		for _, kingarthurAssocEnd := range whatisyourpreferedcolor.KingArthurs {
			kingarthurAssocEnd_DB :=
				backRepo.BackRepoKingArthur.GetKingArthurDBFromKingArthurPtr(kingarthurAssocEnd)

			// the stage might be inconsistant, meaning that the kingarthurAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if kingarthurAssocEnd_DB == nil {
				continue
			}

			whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.KingArthurs =
				append(whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.KingArthurs, int(kingarthurAssocEnd_DB.ID))
		}

		// 1. reset
		whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Nutes = make([]int, 0)
		// 2. encode
		for _, thenutetransitionAssocEnd := range whatisyourpreferedcolor.Nutes {
			thenutetransitionAssocEnd_DB :=
				backRepo.BackRepoTheNuteTransition.GetTheNuteTransitionDBFromTheNuteTransitionPtr(thenutetransitionAssocEnd)

			// the stage might be inconsistant, meaning that the thenutetransitionAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if thenutetransitionAssocEnd_DB == nil {
				continue
			}

			whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Nutes =
				append(whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Nutes, int(thenutetransitionAssocEnd_DB.ID))
		}

		// 1. reset
		whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Galahard = make([]int, 0)
		// 2. encode
		for _, galahadthepureAssocEnd := range whatisyourpreferedcolor.Galahard {
			galahadthepureAssocEnd_DB :=
				backRepo.BackRepoGalahadThePure.GetGalahadThePureDBFromGalahadThePurePtr(galahadthepureAssocEnd)

			// the stage might be inconsistant, meaning that the galahadthepureAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if galahadthepureAssocEnd_DB == nil {
				continue
			}

			whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Galahard =
				append(whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Galahard, int(galahadthepureAssocEnd_DB.ID))
		}

		// 1. reset
		whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Lancelots = make([]int, 0)
		// 2. encode
		for _, lancelotAssocEnd := range whatisyourpreferedcolor.Lancelots {
			lancelotAssocEnd_DB :=
				backRepo.BackRepoLancelot.GetLancelotDBFromLancelotPtr(lancelotAssocEnd)

			// the stage might be inconsistant, meaning that the lancelotAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if lancelotAssocEnd_DB == nil {
				continue
			}

			whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Lancelots =
				append(whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Lancelots, int(lancelotAssocEnd_DB.ID))
		}

		// 1. reset
		whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.BringYourDeadarameters = make([]int, 0)
		// 2. encode
		for _, bringyourdeadAssocEnd := range whatisyourpreferedcolor.BringYourDeadarameters {
			bringyourdeadAssocEnd_DB :=
				backRepo.BackRepoBringYourDead.GetBringYourDeadDBFromBringYourDeadPtr(bringyourdeadAssocEnd)

			// the stage might be inconsistant, meaning that the bringyourdeadAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if bringyourdeadAssocEnd_DB == nil {
				continue
			}

			whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.BringYourDeadarameters =
				append(whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.BringYourDeadarameters, int(bringyourdeadAssocEnd_DB.ID))
		}

		query := backRepoWhatIsYourPreferedColor.db.Save(&whatisyourpreferedcolorDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown WhatIsYourPreferedColor intance %s", whatisyourpreferedcolor.Name))
		return err
	}

	return
}

// BackRepoWhatIsYourPreferedColor.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CheckoutPhaseOne() (Error error) {

	whatisyourpreferedcolorDBArray := make([]WhatIsYourPreferedColorDB, 0)
	query := backRepoWhatIsYourPreferedColor.db.Find(&whatisyourpreferedcolorDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	whatisyourpreferedcolorInstancesToBeRemovedFromTheStage := make(map[*models.WhatIsYourPreferedColor]any)
	for key, value := range backRepoWhatIsYourPreferedColor.stage.WhatIsYourPreferedColors {
		whatisyourpreferedcolorInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, whatisyourpreferedcolorDB := range whatisyourpreferedcolorDBArray {
		backRepoWhatIsYourPreferedColor.CheckoutPhaseOneInstance(&whatisyourpreferedcolorDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		whatisyourpreferedcolor, ok := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[whatisyourpreferedcolorDB.ID]
		if ok {
			delete(whatisyourpreferedcolorInstancesToBeRemovedFromTheStage, whatisyourpreferedcolor)
		}
	}

	// remove from stage and back repo's 3 maps all whatisyourpreferedcolors that are not in the checkout
	for whatisyourpreferedcolor := range whatisyourpreferedcolorInstancesToBeRemovedFromTheStage {
		whatisyourpreferedcolor.Unstage(backRepoWhatIsYourPreferedColor.GetStage())

		// remove instance from the back repo 3 maps
		whatisyourpreferedcolorID := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor]
		delete(backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID, whatisyourpreferedcolor)
		delete(backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB, whatisyourpreferedcolorID)
		delete(backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr, whatisyourpreferedcolorID)
	}

	return
}

// CheckoutPhaseOneInstance takes a whatisyourpreferedcolorDB that has been found in the DB, updates the backRepo and stages the
// models version of the whatisyourpreferedcolorDB
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CheckoutPhaseOneInstance(whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) (Error error) {

	whatisyourpreferedcolor, ok := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[whatisyourpreferedcolorDB.ID]
	if !ok {
		whatisyourpreferedcolor = new(models.WhatIsYourPreferedColor)

		backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[whatisyourpreferedcolorDB.ID] = whatisyourpreferedcolor
		backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor] = whatisyourpreferedcolorDB.ID

		// append model store with the new element
		whatisyourpreferedcolor.Name = whatisyourpreferedcolorDB.Name_Data.String
		whatisyourpreferedcolor.Stage(backRepoWhatIsYourPreferedColor.GetStage())
	}
	whatisyourpreferedcolorDB.CopyBasicFieldsToWhatIsYourPreferedColor(whatisyourpreferedcolor)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	whatisyourpreferedcolor.Stage(backRepoWhatIsYourPreferedColor.GetStage())

	// preserve pointer to whatisyourpreferedcolorDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB)[whatisyourpreferedcolorDB hold variable pointers
	whatisyourpreferedcolorDB_Data := *whatisyourpreferedcolorDB
	preservedPtrToWhatIsYourPreferedColor := &whatisyourpreferedcolorDB_Data
	backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[whatisyourpreferedcolorDB.ID] = preservedPtrToWhatIsYourPreferedColor

	return
}

// BackRepoWhatIsYourPreferedColor.CheckoutPhaseTwo Checkouts all staged instances of WhatIsYourPreferedColor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, whatisyourpreferedcolorDB := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB {
		backRepoWhatIsYourPreferedColor.CheckoutPhaseTwoInstance(backRepo, whatisyourpreferedcolorDB)
	}
	return
}

// BackRepoWhatIsYourPreferedColor.CheckoutPhaseTwoInstance Checkouts staged instances of WhatIsYourPreferedColor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) (Error error) {

	whatisyourpreferedcolor := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr[whatisyourpreferedcolorDB.ID]

	whatisyourpreferedcolorDB.DecodePointers(backRepo, whatisyourpreferedcolor)

	return
}

func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) DecodePointers(backRepo *BackRepoStruct, whatisyourpreferedcolor *models.WhatIsYourPreferedColor) {

	// insertion point for checkout of pointer encoding
	// This loop redeem whatisyourpreferedcolor.Diagrams in the stage from the encode in the back repo
	// It parses all SirRobinDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	whatisyourpreferedcolor.Diagrams = whatisyourpreferedcolor.Diagrams[:0]
	for _, _SirRobinid := range whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Diagrams {
		whatisyourpreferedcolor.Diagrams = append(whatisyourpreferedcolor.Diagrams, backRepo.BackRepoSirRobin.Map_SirRobinDBID_SirRobinPtr[uint(_SirRobinid)])
	}

	// This loop redeem whatisyourpreferedcolor.KingArthurs in the stage from the encode in the back repo
	// It parses all KingArthurDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	whatisyourpreferedcolor.KingArthurs = whatisyourpreferedcolor.KingArthurs[:0]
	for _, _KingArthurid := range whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.KingArthurs {
		whatisyourpreferedcolor.KingArthurs = append(whatisyourpreferedcolor.KingArthurs, backRepo.BackRepoKingArthur.Map_KingArthurDBID_KingArthurPtr[uint(_KingArthurid)])
	}

	// This loop redeem whatisyourpreferedcolor.Nutes in the stage from the encode in the back repo
	// It parses all TheNuteTransitionDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	whatisyourpreferedcolor.Nutes = whatisyourpreferedcolor.Nutes[:0]
	for _, _TheNuteTransitionid := range whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Nutes {
		whatisyourpreferedcolor.Nutes = append(whatisyourpreferedcolor.Nutes, backRepo.BackRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[uint(_TheNuteTransitionid)])
	}

	// This loop redeem whatisyourpreferedcolor.Galahard in the stage from the encode in the back repo
	// It parses all GalahadThePureDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	whatisyourpreferedcolor.Galahard = whatisyourpreferedcolor.Galahard[:0]
	for _, _GalahadThePureid := range whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Galahard {
		whatisyourpreferedcolor.Galahard = append(whatisyourpreferedcolor.Galahard, backRepo.BackRepoGalahadThePure.Map_GalahadThePureDBID_GalahadThePurePtr[uint(_GalahadThePureid)])
	}

	// This loop redeem whatisyourpreferedcolor.Lancelots in the stage from the encode in the back repo
	// It parses all LancelotDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	whatisyourpreferedcolor.Lancelots = whatisyourpreferedcolor.Lancelots[:0]
	for _, _Lancelotid := range whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.Lancelots {
		whatisyourpreferedcolor.Lancelots = append(whatisyourpreferedcolor.Lancelots, backRepo.BackRepoLancelot.Map_LancelotDBID_LancelotPtr[uint(_Lancelotid)])
	}

	// This loop redeem whatisyourpreferedcolor.BringYourDeadarameters in the stage from the encode in the back repo
	// It parses all BringYourDeadDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	whatisyourpreferedcolor.BringYourDeadarameters = whatisyourpreferedcolor.BringYourDeadarameters[:0]
	for _, _BringYourDeadid := range whatisyourpreferedcolorDB.WhatIsYourPreferedColorPointersEncoding.BringYourDeadarameters {
		whatisyourpreferedcolor.BringYourDeadarameters = append(whatisyourpreferedcolor.BringYourDeadarameters, backRepo.BackRepoBringYourDead.Map_BringYourDeadDBID_BringYourDeadPtr[uint(_BringYourDeadid)])
	}

	return
}

// CommitWhatIsYourPreferedColor allows commit of a single whatisyourpreferedcolor (if already staged)
func (backRepo *BackRepoStruct) CommitWhatIsYourPreferedColor(whatisyourpreferedcolor *models.WhatIsYourPreferedColor) {
	backRepo.BackRepoWhatIsYourPreferedColor.CommitPhaseOneInstance(whatisyourpreferedcolor)
	if id, ok := backRepo.BackRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor]; ok {
		backRepo.BackRepoWhatIsYourPreferedColor.CommitPhaseTwoInstance(backRepo, id, whatisyourpreferedcolor)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWhatIsYourPreferedColor allows checkout of a single whatisyourpreferedcolor (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWhatIsYourPreferedColor(whatisyourpreferedcolor *models.WhatIsYourPreferedColor) {
	// check if the whatisyourpreferedcolor is staged
	if _, ok := backRepo.BackRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor]; ok {

		if id, ok := backRepo.BackRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorPtr_WhatIsYourPreferedColorDBID[whatisyourpreferedcolor]; ok {
			var whatisyourpreferedcolorDB WhatIsYourPreferedColorDB
			whatisyourpreferedcolorDB.ID = id

			if err := backRepo.BackRepoWhatIsYourPreferedColor.db.First(&whatisyourpreferedcolorDB, id).Error; err != nil {
				log.Fatalln("CheckoutWhatIsYourPreferedColor : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWhatIsYourPreferedColor.CheckoutPhaseOneInstance(&whatisyourpreferedcolorDB)
			backRepo.BackRepoWhatIsYourPreferedColor.CheckoutPhaseTwoInstance(backRepo, &whatisyourpreferedcolorDB)
		}
	}
}

// CopyBasicFieldsFromWhatIsYourPreferedColor
func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) CopyBasicFieldsFromWhatIsYourPreferedColor(whatisyourpreferedcolor *models.WhatIsYourPreferedColor) {
	// insertion point for fields commit

	whatisyourpreferedcolorDB.Name_Data.String = whatisyourpreferedcolor.Name
	whatisyourpreferedcolorDB.Name_Data.Valid = true

	whatisyourpreferedcolorDB.Description_Data.String = whatisyourpreferedcolor.Description
	whatisyourpreferedcolorDB.Description_Data.Valid = true

	whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Bool = whatisyourpreferedcolor.DiagramsNodeFolded
	whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Bool = whatisyourpreferedcolor.KingArthurNodeFolded
	whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.RRRR_Data.Bool = whatisyourpreferedcolor.RRRR
	whatisyourpreferedcolorDB.RRRR_Data.Valid = true

	whatisyourpreferedcolorDB.IIUU_Data.Bool = whatisyourpreferedcolor.IIUU
	whatisyourpreferedcolorDB.IIUU_Data.Valid = true

	whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Bool = whatisyourpreferedcolor.LancelotsodeFolded
	whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.RRRRT_Data.Bool = whatisyourpreferedcolor.RRRRT
	whatisyourpreferedcolorDB.RRRRT_Data.Valid = true

	whatisyourpreferedcolorDB.IsNodeExpanded_Data.Bool = whatisyourpreferedcolor.IsNodeExpanded
	whatisyourpreferedcolorDB.IsNodeExpanded_Data.Valid = true
}

// CopyBasicFieldsFromWhatIsYourPreferedColor_WOP
func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) CopyBasicFieldsFromWhatIsYourPreferedColor_WOP(whatisyourpreferedcolor *models.WhatIsYourPreferedColor_WOP) {
	// insertion point for fields commit

	whatisyourpreferedcolorDB.Name_Data.String = whatisyourpreferedcolor.Name
	whatisyourpreferedcolorDB.Name_Data.Valid = true

	whatisyourpreferedcolorDB.Description_Data.String = whatisyourpreferedcolor.Description
	whatisyourpreferedcolorDB.Description_Data.Valid = true

	whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Bool = whatisyourpreferedcolor.DiagramsNodeFolded
	whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Bool = whatisyourpreferedcolor.KingArthurNodeFolded
	whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.RRRR_Data.Bool = whatisyourpreferedcolor.RRRR
	whatisyourpreferedcolorDB.RRRR_Data.Valid = true

	whatisyourpreferedcolorDB.IIUU_Data.Bool = whatisyourpreferedcolor.IIUU
	whatisyourpreferedcolorDB.IIUU_Data.Valid = true

	whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Bool = whatisyourpreferedcolor.LancelotsodeFolded
	whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.RRRRT_Data.Bool = whatisyourpreferedcolor.RRRRT
	whatisyourpreferedcolorDB.RRRRT_Data.Valid = true

	whatisyourpreferedcolorDB.IsNodeExpanded_Data.Bool = whatisyourpreferedcolor.IsNodeExpanded
	whatisyourpreferedcolorDB.IsNodeExpanded_Data.Valid = true
}

// CopyBasicFieldsFromWhatIsYourPreferedColorWOP
func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) CopyBasicFieldsFromWhatIsYourPreferedColorWOP(whatisyourpreferedcolor *WhatIsYourPreferedColorWOP) {
	// insertion point for fields commit

	whatisyourpreferedcolorDB.Name_Data.String = whatisyourpreferedcolor.Name
	whatisyourpreferedcolorDB.Name_Data.Valid = true

	whatisyourpreferedcolorDB.Description_Data.String = whatisyourpreferedcolor.Description
	whatisyourpreferedcolorDB.Description_Data.Valid = true

	whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Bool = whatisyourpreferedcolor.DiagramsNodeFolded
	whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Bool = whatisyourpreferedcolor.KingArthurNodeFolded
	whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.RRRR_Data.Bool = whatisyourpreferedcolor.RRRR
	whatisyourpreferedcolorDB.RRRR_Data.Valid = true

	whatisyourpreferedcolorDB.IIUU_Data.Bool = whatisyourpreferedcolor.IIUU
	whatisyourpreferedcolorDB.IIUU_Data.Valid = true

	whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Bool = whatisyourpreferedcolor.LancelotsodeFolded
	whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Valid = true

	whatisyourpreferedcolorDB.RRRRT_Data.Bool = whatisyourpreferedcolor.RRRRT
	whatisyourpreferedcolorDB.RRRRT_Data.Valid = true

	whatisyourpreferedcolorDB.IsNodeExpanded_Data.Bool = whatisyourpreferedcolor.IsNodeExpanded
	whatisyourpreferedcolorDB.IsNodeExpanded_Data.Valid = true
}

// CopyBasicFieldsToWhatIsYourPreferedColor
func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) CopyBasicFieldsToWhatIsYourPreferedColor(whatisyourpreferedcolor *models.WhatIsYourPreferedColor) {
	// insertion point for checkout of basic fields (back repo to stage)
	whatisyourpreferedcolor.Name = whatisyourpreferedcolorDB.Name_Data.String
	whatisyourpreferedcolor.Description = whatisyourpreferedcolorDB.Description_Data.String
	whatisyourpreferedcolor.DiagramsNodeFolded = whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Bool
	whatisyourpreferedcolor.KingArthurNodeFolded = whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Bool
	whatisyourpreferedcolor.RRRR = whatisyourpreferedcolorDB.RRRR_Data.Bool
	whatisyourpreferedcolor.IIUU = whatisyourpreferedcolorDB.IIUU_Data.Bool
	whatisyourpreferedcolor.LancelotsodeFolded = whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Bool
	whatisyourpreferedcolor.RRRRT = whatisyourpreferedcolorDB.RRRRT_Data.Bool
	whatisyourpreferedcolor.IsNodeExpanded = whatisyourpreferedcolorDB.IsNodeExpanded_Data.Bool
}

// CopyBasicFieldsToWhatIsYourPreferedColor_WOP
func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) CopyBasicFieldsToWhatIsYourPreferedColor_WOP(whatisyourpreferedcolor *models.WhatIsYourPreferedColor_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	whatisyourpreferedcolor.Name = whatisyourpreferedcolorDB.Name_Data.String
	whatisyourpreferedcolor.Description = whatisyourpreferedcolorDB.Description_Data.String
	whatisyourpreferedcolor.DiagramsNodeFolded = whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Bool
	whatisyourpreferedcolor.KingArthurNodeFolded = whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Bool
	whatisyourpreferedcolor.RRRR = whatisyourpreferedcolorDB.RRRR_Data.Bool
	whatisyourpreferedcolor.IIUU = whatisyourpreferedcolorDB.IIUU_Data.Bool
	whatisyourpreferedcolor.LancelotsodeFolded = whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Bool
	whatisyourpreferedcolor.RRRRT = whatisyourpreferedcolorDB.RRRRT_Data.Bool
	whatisyourpreferedcolor.IsNodeExpanded = whatisyourpreferedcolorDB.IsNodeExpanded_Data.Bool
}

// CopyBasicFieldsToWhatIsYourPreferedColorWOP
func (whatisyourpreferedcolorDB *WhatIsYourPreferedColorDB) CopyBasicFieldsToWhatIsYourPreferedColorWOP(whatisyourpreferedcolor *WhatIsYourPreferedColorWOP) {
	whatisyourpreferedcolor.ID = int(whatisyourpreferedcolorDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	whatisyourpreferedcolor.Name = whatisyourpreferedcolorDB.Name_Data.String
	whatisyourpreferedcolor.Description = whatisyourpreferedcolorDB.Description_Data.String
	whatisyourpreferedcolor.DiagramsNodeFolded = whatisyourpreferedcolorDB.DiagramsNodeFolded_Data.Bool
	whatisyourpreferedcolor.KingArthurNodeFolded = whatisyourpreferedcolorDB.KingArthurNodeFolded_Data.Bool
	whatisyourpreferedcolor.RRRR = whatisyourpreferedcolorDB.RRRR_Data.Bool
	whatisyourpreferedcolor.IIUU = whatisyourpreferedcolorDB.IIUU_Data.Bool
	whatisyourpreferedcolor.LancelotsodeFolded = whatisyourpreferedcolorDB.LancelotsodeFolded_Data.Bool
	whatisyourpreferedcolor.RRRRT = whatisyourpreferedcolorDB.RRRRT_Data.Bool
	whatisyourpreferedcolor.IsNodeExpanded = whatisyourpreferedcolorDB.IsNodeExpanded_Data.Bool
}

// Backup generates a json file from a slice of all WhatIsYourPreferedColorDB instances in the backrepo
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "WhatIsYourPreferedColorDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WhatIsYourPreferedColorDB, 0)
	for _, whatisyourpreferedcolorDB := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB {
		forBackup = append(forBackup, whatisyourpreferedcolorDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json WhatIsYourPreferedColor ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json WhatIsYourPreferedColor file", err.Error())
	}
}

// Backup generates a json file from a slice of all WhatIsYourPreferedColorDB instances in the backrepo
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WhatIsYourPreferedColorDB, 0)
	for _, whatisyourpreferedcolorDB := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB {
		forBackup = append(forBackup, whatisyourpreferedcolorDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("WhatIsYourPreferedColor")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&WhatIsYourPreferedColor_Fields, -1)
	for _, whatisyourpreferedcolorDB := range forBackup {

		var whatisyourpreferedcolorWOP WhatIsYourPreferedColorWOP
		whatisyourpreferedcolorDB.CopyBasicFieldsToWhatIsYourPreferedColorWOP(&whatisyourpreferedcolorWOP)

		row := sh.AddRow()
		row.WriteStruct(&whatisyourpreferedcolorWOP, -1)
	}
}

// RestoreXL from the "WhatIsYourPreferedColor" sheet all WhatIsYourPreferedColorDB instances
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWhatIsYourPreferedColorid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["WhatIsYourPreferedColor"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWhatIsYourPreferedColor.rowVisitorWhatIsYourPreferedColor)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) rowVisitorWhatIsYourPreferedColor(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var whatisyourpreferedcolorWOP WhatIsYourPreferedColorWOP
		row.ReadStruct(&whatisyourpreferedcolorWOP)

		// add the unmarshalled struct to the stage
		whatisyourpreferedcolorDB := new(WhatIsYourPreferedColorDB)
		whatisyourpreferedcolorDB.CopyBasicFieldsFromWhatIsYourPreferedColorWOP(&whatisyourpreferedcolorWOP)

		whatisyourpreferedcolorDB_ID_atBackupTime := whatisyourpreferedcolorDB.ID
		whatisyourpreferedcolorDB.ID = 0
		query := backRepoWhatIsYourPreferedColor.db.Create(whatisyourpreferedcolorDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[whatisyourpreferedcolorDB.ID] = whatisyourpreferedcolorDB
		BackRepoWhatIsYourPreferedColorid_atBckpTime_newID[whatisyourpreferedcolorDB_ID_atBackupTime] = whatisyourpreferedcolorDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "WhatIsYourPreferedColorDB.json" in dirPath that stores an array
// of WhatIsYourPreferedColorDB and stores it in the database
// the map BackRepoWhatIsYourPreferedColorid_atBckpTime_newID is updated accordingly
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWhatIsYourPreferedColorid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "WhatIsYourPreferedColorDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json WhatIsYourPreferedColor file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*WhatIsYourPreferedColorDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB
	for _, whatisyourpreferedcolorDB := range forRestore {

		whatisyourpreferedcolorDB_ID_atBackupTime := whatisyourpreferedcolorDB.ID
		whatisyourpreferedcolorDB.ID = 0
		query := backRepoWhatIsYourPreferedColor.db.Create(whatisyourpreferedcolorDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[whatisyourpreferedcolorDB.ID] = whatisyourpreferedcolorDB
		BackRepoWhatIsYourPreferedColorid_atBckpTime_newID[whatisyourpreferedcolorDB_ID_atBackupTime] = whatisyourpreferedcolorDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json WhatIsYourPreferedColor file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<WhatIsYourPreferedColor>id_atBckpTime_newID
// to compute new index
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) RestorePhaseTwo() {

	for _, whatisyourpreferedcolorDB := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB {

		// next line of code is to avert unused variable compilation error
		_ = whatisyourpreferedcolorDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoWhatIsYourPreferedColor.db.Model(whatisyourpreferedcolorDB).Updates(*whatisyourpreferedcolorDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoWhatIsYourPreferedColor.ResetReversePointers commits all staged instances of WhatIsYourPreferedColor to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, whatisyourpreferedcolor := range backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorPtr {
		backRepoWhatIsYourPreferedColor.ResetReversePointersInstance(backRepo, idx, whatisyourpreferedcolor)
	}

	return
}

func (backRepoWhatIsYourPreferedColor *BackRepoWhatIsYourPreferedColorStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, whatisyourpreferedcolor *models.WhatIsYourPreferedColor) (Error error) {

	// fetch matching whatisyourpreferedcolorDB
	if whatisyourpreferedcolorDB, ok := backRepoWhatIsYourPreferedColor.Map_WhatIsYourPreferedColorDBID_WhatIsYourPreferedColorDB[idx]; ok {
		_ = whatisyourpreferedcolorDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWhatIsYourPreferedColorid_atBckpTime_newID map[uint]uint
