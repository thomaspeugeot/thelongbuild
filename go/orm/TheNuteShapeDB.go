// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TheNuteShape_sql sql.NullBool
var dummy_TheNuteShape_time time.Duration
var dummy_TheNuteShape_sort sort.Float64Slice

// TheNuteShapeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model thenuteshapeAPI
type TheNuteShapeAPI struct {
	gorm.Model

	models.TheNuteShape_WOP

	// encoding of pointers
	TheNuteShapePointersEncoding TheNuteShapePointersEncoding
}

// TheNuteShapePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TheNuteShapePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ActorStateTransition is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ActorStateTransitionID sql.NullInt64

	// field Start is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	StartID sql.NullInt64

	// field End is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EndID sql.NullInt64
}

// TheNuteShapeDB describes a thenuteshape in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model thenuteshapeDB
type TheNuteShapeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field thenuteshapeDB.Name
	Name_Data sql.NullString

	// Declation for basic field thenuteshapeDB.StartOrientation
	StartOrientation_Data sql.NullString

	// Declation for basic field thenuteshapeDB.StartRatio
	StartRatio_Data sql.NullFloat64

	// Declation for basic field thenuteshapeDB.EndOrientation
	EndOrientation_Data sql.NullString

	// Declation for basic field thenuteshapeDB.EndRatio
	EndRatio_Data sql.NullFloat64

	// Declation for basic field thenuteshapeDB.CornerOffsetRatio
	CornerOffsetRatio_Data sql.NullFloat64
	// encoding of pointers
	TheNuteShapePointersEncoding
}

// TheNuteShapeDBs arrays thenuteshapeDBs
// swagger:response thenuteshapeDBsResponse
type TheNuteShapeDBs []TheNuteShapeDB

// TheNuteShapeDBResponse provides response
// swagger:response thenuteshapeDBResponse
type TheNuteShapeDBResponse struct {
	TheNuteShapeDB
}

// TheNuteShapeWOP is a TheNuteShape without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TheNuteShapeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	StartOrientation models.OrientationType `xlsx:"2"`

	StartRatio float64 `xlsx:"3"`

	EndOrientation models.OrientationType `xlsx:"4"`

	EndRatio float64 `xlsx:"5"`

	CornerOffsetRatio float64 `xlsx:"6"`
	// insertion for WOP pointer fields
}

var TheNuteShape_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"StartOrientation",
	"StartRatio",
	"EndOrientation",
	"EndRatio",
	"CornerOffsetRatio",
}

type BackRepoTheNuteShapeStruct struct {
	// stores TheNuteShapeDB according to their gorm ID
	Map_TheNuteShapeDBID_TheNuteShapeDB map[uint]*TheNuteShapeDB

	// stores TheNuteShapeDB ID according to TheNuteShape address
	Map_TheNuteShapePtr_TheNuteShapeDBID map[*models.TheNuteShape]uint

	// stores TheNuteShape according to their gorm ID
	Map_TheNuteShapeDBID_TheNuteShapePtr map[uint]*models.TheNuteShape

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTheNuteShape.stage
	return
}

func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) GetDB() *gorm.DB {
	return backRepoTheNuteShape.db
}

// GetTheNuteShapeDBFromTheNuteShapePtr is a handy function to access the back repo instance from the stage instance
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) GetTheNuteShapeDBFromTheNuteShapePtr(thenuteshape *models.TheNuteShape) (thenuteshapeDB *TheNuteShapeDB) {
	id := backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape]
	thenuteshapeDB = backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[id]
	return
}

// BackRepoTheNuteShape.CommitPhaseOne commits all staged instances of TheNuteShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for thenuteshape := range stage.TheNuteShapes {
		backRepoTheNuteShape.CommitPhaseOneInstance(thenuteshape)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, thenuteshape := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr {
		if _, ok := stage.TheNuteShapes[thenuteshape]; !ok {
			backRepoTheNuteShape.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTheNuteShape.CommitDeleteInstance commits deletion of TheNuteShape to the BackRepo
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CommitDeleteInstance(id uint) (Error error) {

	thenuteshape := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr[id]

	// thenuteshape is not staged anymore, remove thenuteshapeDB
	thenuteshapeDB := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[id]
	query := backRepoTheNuteShape.db.Unscoped().Delete(&thenuteshapeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID, thenuteshape)
	delete(backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr, id)
	delete(backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB, id)

	return
}

// BackRepoTheNuteShape.CommitPhaseOneInstance commits thenuteshape staged instances of TheNuteShape to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CommitPhaseOneInstance(thenuteshape *models.TheNuteShape) (Error error) {

	// check if the thenuteshape is not commited yet
	if _, ok := backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape]; ok {
		return
	}

	// initiate thenuteshape
	var thenuteshapeDB TheNuteShapeDB
	thenuteshapeDB.CopyBasicFieldsFromTheNuteShape(thenuteshape)

	query := backRepoTheNuteShape.db.Create(&thenuteshapeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape] = thenuteshapeDB.ID
	backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr[thenuteshapeDB.ID] = thenuteshape
	backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[thenuteshapeDB.ID] = &thenuteshapeDB

	return
}

// BackRepoTheNuteShape.CommitPhaseTwo commits all staged instances of TheNuteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, thenuteshape := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr {
		backRepoTheNuteShape.CommitPhaseTwoInstance(backRepo, idx, thenuteshape)
	}

	return
}

// BackRepoTheNuteShape.CommitPhaseTwoInstance commits {{structname }} of models.TheNuteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, thenuteshape *models.TheNuteShape) (Error error) {

	// fetch matching thenuteshapeDB
	if thenuteshapeDB, ok := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[idx]; ok {

		thenuteshapeDB.CopyBasicFieldsFromTheNuteShape(thenuteshape)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value thenuteshape.ActorStateTransition translates to updating the thenuteshape.ActorStateTransitionID
		thenuteshapeDB.ActorStateTransitionID.Valid = true // allow for a 0 value (nil association)
		if thenuteshape.ActorStateTransition != nil {
			if ActorStateTransitionId, ok := backRepo.BackRepoTheNuteTransition.Map_TheNuteTransitionPtr_TheNuteTransitionDBID[thenuteshape.ActorStateTransition]; ok {
				thenuteshapeDB.ActorStateTransitionID.Int64 = int64(ActorStateTransitionId)
				thenuteshapeDB.ActorStateTransitionID.Valid = true
			}
		} else {
			thenuteshapeDB.ActorStateTransitionID.Int64 = 0
			thenuteshapeDB.ActorStateTransitionID.Valid = true
		}

		// commit pointer value thenuteshape.Start translates to updating the thenuteshape.StartID
		thenuteshapeDB.StartID.Valid = true // allow for a 0 value (nil association)
		if thenuteshape.Start != nil {
			if StartId, ok := backRepo.BackRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[thenuteshape.Start]; ok {
				thenuteshapeDB.StartID.Int64 = int64(StartId)
				thenuteshapeDB.StartID.Valid = true
			}
		} else {
			thenuteshapeDB.StartID.Int64 = 0
			thenuteshapeDB.StartID.Valid = true
		}

		// commit pointer value thenuteshape.End translates to updating the thenuteshape.EndID
		thenuteshapeDB.EndID.Valid = true // allow for a 0 value (nil association)
		if thenuteshape.End != nil {
			if EndId, ok := backRepo.BackRepoKingArthurShape.Map_KingArthurShapePtr_KingArthurShapeDBID[thenuteshape.End]; ok {
				thenuteshapeDB.EndID.Int64 = int64(EndId)
				thenuteshapeDB.EndID.Valid = true
			}
		} else {
			thenuteshapeDB.EndID.Int64 = 0
			thenuteshapeDB.EndID.Valid = true
		}

		query := backRepoTheNuteShape.db.Save(&thenuteshapeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TheNuteShape intance %s", thenuteshape.Name))
		return err
	}

	return
}

// BackRepoTheNuteShape.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CheckoutPhaseOne() (Error error) {

	thenuteshapeDBArray := make([]TheNuteShapeDB, 0)
	query := backRepoTheNuteShape.db.Find(&thenuteshapeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	thenuteshapeInstancesToBeRemovedFromTheStage := make(map[*models.TheNuteShape]any)
	for key, value := range backRepoTheNuteShape.stage.TheNuteShapes {
		thenuteshapeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, thenuteshapeDB := range thenuteshapeDBArray {
		backRepoTheNuteShape.CheckoutPhaseOneInstance(&thenuteshapeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		thenuteshape, ok := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr[thenuteshapeDB.ID]
		if ok {
			delete(thenuteshapeInstancesToBeRemovedFromTheStage, thenuteshape)
		}
	}

	// remove from stage and back repo's 3 maps all thenuteshapes that are not in the checkout
	for thenuteshape := range thenuteshapeInstancesToBeRemovedFromTheStage {
		thenuteshape.Unstage(backRepoTheNuteShape.GetStage())

		// remove instance from the back repo 3 maps
		thenuteshapeID := backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape]
		delete(backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID, thenuteshape)
		delete(backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB, thenuteshapeID)
		delete(backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr, thenuteshapeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a thenuteshapeDB that has been found in the DB, updates the backRepo and stages the
// models version of the thenuteshapeDB
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CheckoutPhaseOneInstance(thenuteshapeDB *TheNuteShapeDB) (Error error) {

	thenuteshape, ok := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr[thenuteshapeDB.ID]
	if !ok {
		thenuteshape = new(models.TheNuteShape)

		backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr[thenuteshapeDB.ID] = thenuteshape
		backRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape] = thenuteshapeDB.ID

		// append model store with the new element
		thenuteshape.Name = thenuteshapeDB.Name_Data.String
		thenuteshape.Stage(backRepoTheNuteShape.GetStage())
	}
	thenuteshapeDB.CopyBasicFieldsToTheNuteShape(thenuteshape)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	thenuteshape.Stage(backRepoTheNuteShape.GetStage())

	// preserve pointer to thenuteshapeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TheNuteShapeDBID_TheNuteShapeDB)[thenuteshapeDB hold variable pointers
	thenuteshapeDB_Data := *thenuteshapeDB
	preservedPtrToTheNuteShape := &thenuteshapeDB_Data
	backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[thenuteshapeDB.ID] = preservedPtrToTheNuteShape

	return
}

// BackRepoTheNuteShape.CheckoutPhaseTwo Checkouts all staged instances of TheNuteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, thenuteshapeDB := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB {
		backRepoTheNuteShape.CheckoutPhaseTwoInstance(backRepo, thenuteshapeDB)
	}
	return
}

// BackRepoTheNuteShape.CheckoutPhaseTwoInstance Checkouts staged instances of TheNuteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, thenuteshapeDB *TheNuteShapeDB) (Error error) {

	thenuteshape := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr[thenuteshapeDB.ID]

	thenuteshapeDB.DecodePointers(backRepo, thenuteshape)

	return
}

func (thenuteshapeDB *TheNuteShapeDB) DecodePointers(backRepo *BackRepoStruct, thenuteshape *models.TheNuteShape) {

	// insertion point for checkout of pointer encoding
	// ActorStateTransition field
	thenuteshape.ActorStateTransition = nil
	if thenuteshapeDB.ActorStateTransitionID.Int64 != 0 {
		thenuteshape.ActorStateTransition = backRepo.BackRepoTheNuteTransition.Map_TheNuteTransitionDBID_TheNuteTransitionPtr[uint(thenuteshapeDB.ActorStateTransitionID.Int64)]
	}
	// Start field
	thenuteshape.Start = nil
	if thenuteshapeDB.StartID.Int64 != 0 {
		thenuteshape.Start = backRepo.BackRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[uint(thenuteshapeDB.StartID.Int64)]
	}
	// End field
	thenuteshape.End = nil
	if thenuteshapeDB.EndID.Int64 != 0 {
		thenuteshape.End = backRepo.BackRepoKingArthurShape.Map_KingArthurShapeDBID_KingArthurShapePtr[uint(thenuteshapeDB.EndID.Int64)]
	}
	return
}

// CommitTheNuteShape allows commit of a single thenuteshape (if already staged)
func (backRepo *BackRepoStruct) CommitTheNuteShape(thenuteshape *models.TheNuteShape) {
	backRepo.BackRepoTheNuteShape.CommitPhaseOneInstance(thenuteshape)
	if id, ok := backRepo.BackRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape]; ok {
		backRepo.BackRepoTheNuteShape.CommitPhaseTwoInstance(backRepo, id, thenuteshape)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTheNuteShape allows checkout of a single thenuteshape (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTheNuteShape(thenuteshape *models.TheNuteShape) {
	// check if the thenuteshape is staged
	if _, ok := backRepo.BackRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape]; ok {

		if id, ok := backRepo.BackRepoTheNuteShape.Map_TheNuteShapePtr_TheNuteShapeDBID[thenuteshape]; ok {
			var thenuteshapeDB TheNuteShapeDB
			thenuteshapeDB.ID = id

			if err := backRepo.BackRepoTheNuteShape.db.First(&thenuteshapeDB, id).Error; err != nil {
				log.Fatalln("CheckoutTheNuteShape : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTheNuteShape.CheckoutPhaseOneInstance(&thenuteshapeDB)
			backRepo.BackRepoTheNuteShape.CheckoutPhaseTwoInstance(backRepo, &thenuteshapeDB)
		}
	}
}

// CopyBasicFieldsFromTheNuteShape
func (thenuteshapeDB *TheNuteShapeDB) CopyBasicFieldsFromTheNuteShape(thenuteshape *models.TheNuteShape) {
	// insertion point for fields commit

	thenuteshapeDB.Name_Data.String = thenuteshape.Name
	thenuteshapeDB.Name_Data.Valid = true

	thenuteshapeDB.StartOrientation_Data.String = thenuteshape.StartOrientation.ToString()
	thenuteshapeDB.StartOrientation_Data.Valid = true

	thenuteshapeDB.StartRatio_Data.Float64 = thenuteshape.StartRatio
	thenuteshapeDB.StartRatio_Data.Valid = true

	thenuteshapeDB.EndOrientation_Data.String = thenuteshape.EndOrientation.ToString()
	thenuteshapeDB.EndOrientation_Data.Valid = true

	thenuteshapeDB.EndRatio_Data.Float64 = thenuteshape.EndRatio
	thenuteshapeDB.EndRatio_Data.Valid = true

	thenuteshapeDB.CornerOffsetRatio_Data.Float64 = thenuteshape.CornerOffsetRatio
	thenuteshapeDB.CornerOffsetRatio_Data.Valid = true
}

// CopyBasicFieldsFromTheNuteShape_WOP
func (thenuteshapeDB *TheNuteShapeDB) CopyBasicFieldsFromTheNuteShape_WOP(thenuteshape *models.TheNuteShape_WOP) {
	// insertion point for fields commit

	thenuteshapeDB.Name_Data.String = thenuteshape.Name
	thenuteshapeDB.Name_Data.Valid = true

	thenuteshapeDB.StartOrientation_Data.String = thenuteshape.StartOrientation.ToString()
	thenuteshapeDB.StartOrientation_Data.Valid = true

	thenuteshapeDB.StartRatio_Data.Float64 = thenuteshape.StartRatio
	thenuteshapeDB.StartRatio_Data.Valid = true

	thenuteshapeDB.EndOrientation_Data.String = thenuteshape.EndOrientation.ToString()
	thenuteshapeDB.EndOrientation_Data.Valid = true

	thenuteshapeDB.EndRatio_Data.Float64 = thenuteshape.EndRatio
	thenuteshapeDB.EndRatio_Data.Valid = true

	thenuteshapeDB.CornerOffsetRatio_Data.Float64 = thenuteshape.CornerOffsetRatio
	thenuteshapeDB.CornerOffsetRatio_Data.Valid = true
}

// CopyBasicFieldsFromTheNuteShapeWOP
func (thenuteshapeDB *TheNuteShapeDB) CopyBasicFieldsFromTheNuteShapeWOP(thenuteshape *TheNuteShapeWOP) {
	// insertion point for fields commit

	thenuteshapeDB.Name_Data.String = thenuteshape.Name
	thenuteshapeDB.Name_Data.Valid = true

	thenuteshapeDB.StartOrientation_Data.String = thenuteshape.StartOrientation.ToString()
	thenuteshapeDB.StartOrientation_Data.Valid = true

	thenuteshapeDB.StartRatio_Data.Float64 = thenuteshape.StartRatio
	thenuteshapeDB.StartRatio_Data.Valid = true

	thenuteshapeDB.EndOrientation_Data.String = thenuteshape.EndOrientation.ToString()
	thenuteshapeDB.EndOrientation_Data.Valid = true

	thenuteshapeDB.EndRatio_Data.Float64 = thenuteshape.EndRatio
	thenuteshapeDB.EndRatio_Data.Valid = true

	thenuteshapeDB.CornerOffsetRatio_Data.Float64 = thenuteshape.CornerOffsetRatio
	thenuteshapeDB.CornerOffsetRatio_Data.Valid = true
}

// CopyBasicFieldsToTheNuteShape
func (thenuteshapeDB *TheNuteShapeDB) CopyBasicFieldsToTheNuteShape(thenuteshape *models.TheNuteShape) {
	// insertion point for checkout of basic fields (back repo to stage)
	thenuteshape.Name = thenuteshapeDB.Name_Data.String
	thenuteshape.StartOrientation.FromString(thenuteshapeDB.StartOrientation_Data.String)
	thenuteshape.StartRatio = thenuteshapeDB.StartRatio_Data.Float64
	thenuteshape.EndOrientation.FromString(thenuteshapeDB.EndOrientation_Data.String)
	thenuteshape.EndRatio = thenuteshapeDB.EndRatio_Data.Float64
	thenuteshape.CornerOffsetRatio = thenuteshapeDB.CornerOffsetRatio_Data.Float64
}

// CopyBasicFieldsToTheNuteShape_WOP
func (thenuteshapeDB *TheNuteShapeDB) CopyBasicFieldsToTheNuteShape_WOP(thenuteshape *models.TheNuteShape_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	thenuteshape.Name = thenuteshapeDB.Name_Data.String
	thenuteshape.StartOrientation.FromString(thenuteshapeDB.StartOrientation_Data.String)
	thenuteshape.StartRatio = thenuteshapeDB.StartRatio_Data.Float64
	thenuteshape.EndOrientation.FromString(thenuteshapeDB.EndOrientation_Data.String)
	thenuteshape.EndRatio = thenuteshapeDB.EndRatio_Data.Float64
	thenuteshape.CornerOffsetRatio = thenuteshapeDB.CornerOffsetRatio_Data.Float64
}

// CopyBasicFieldsToTheNuteShapeWOP
func (thenuteshapeDB *TheNuteShapeDB) CopyBasicFieldsToTheNuteShapeWOP(thenuteshape *TheNuteShapeWOP) {
	thenuteshape.ID = int(thenuteshapeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	thenuteshape.Name = thenuteshapeDB.Name_Data.String
	thenuteshape.StartOrientation.FromString(thenuteshapeDB.StartOrientation_Data.String)
	thenuteshape.StartRatio = thenuteshapeDB.StartRatio_Data.Float64
	thenuteshape.EndOrientation.FromString(thenuteshapeDB.EndOrientation_Data.String)
	thenuteshape.EndRatio = thenuteshapeDB.EndRatio_Data.Float64
	thenuteshape.CornerOffsetRatio = thenuteshapeDB.CornerOffsetRatio_Data.Float64
}

// Backup generates a json file from a slice of all TheNuteShapeDB instances in the backrepo
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TheNuteShapeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TheNuteShapeDB, 0)
	for _, thenuteshapeDB := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB {
		forBackup = append(forBackup, thenuteshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TheNuteShape ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TheNuteShape file", err.Error())
	}
}

// Backup generates a json file from a slice of all TheNuteShapeDB instances in the backrepo
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TheNuteShapeDB, 0)
	for _, thenuteshapeDB := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB {
		forBackup = append(forBackup, thenuteshapeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TheNuteShape")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TheNuteShape_Fields, -1)
	for _, thenuteshapeDB := range forBackup {

		var thenuteshapeWOP TheNuteShapeWOP
		thenuteshapeDB.CopyBasicFieldsToTheNuteShapeWOP(&thenuteshapeWOP)

		row := sh.AddRow()
		row.WriteStruct(&thenuteshapeWOP, -1)
	}
}

// RestoreXL from the "TheNuteShape" sheet all TheNuteShapeDB instances
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTheNuteShapeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TheNuteShape"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTheNuteShape.rowVisitorTheNuteShape)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) rowVisitorTheNuteShape(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var thenuteshapeWOP TheNuteShapeWOP
		row.ReadStruct(&thenuteshapeWOP)

		// add the unmarshalled struct to the stage
		thenuteshapeDB := new(TheNuteShapeDB)
		thenuteshapeDB.CopyBasicFieldsFromTheNuteShapeWOP(&thenuteshapeWOP)

		thenuteshapeDB_ID_atBackupTime := thenuteshapeDB.ID
		thenuteshapeDB.ID = 0
		query := backRepoTheNuteShape.db.Create(thenuteshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[thenuteshapeDB.ID] = thenuteshapeDB
		BackRepoTheNuteShapeid_atBckpTime_newID[thenuteshapeDB_ID_atBackupTime] = thenuteshapeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TheNuteShapeDB.json" in dirPath that stores an array
// of TheNuteShapeDB and stores it in the database
// the map BackRepoTheNuteShapeid_atBckpTime_newID is updated accordingly
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTheNuteShapeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TheNuteShapeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TheNuteShape file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TheNuteShapeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TheNuteShapeDBID_TheNuteShapeDB
	for _, thenuteshapeDB := range forRestore {

		thenuteshapeDB_ID_atBackupTime := thenuteshapeDB.ID
		thenuteshapeDB.ID = 0
		query := backRepoTheNuteShape.db.Create(thenuteshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[thenuteshapeDB.ID] = thenuteshapeDB
		BackRepoTheNuteShapeid_atBckpTime_newID[thenuteshapeDB_ID_atBackupTime] = thenuteshapeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TheNuteShape file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TheNuteShape>id_atBckpTime_newID
// to compute new index
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) RestorePhaseTwo() {

	for _, thenuteshapeDB := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB {

		// next line of code is to avert unused variable compilation error
		_ = thenuteshapeDB

		// insertion point for reindexing pointers encoding
		// reindexing ActorStateTransition field
		if thenuteshapeDB.ActorStateTransitionID.Int64 != 0 {
			thenuteshapeDB.ActorStateTransitionID.Int64 = int64(BackRepoTheNuteTransitionid_atBckpTime_newID[uint(thenuteshapeDB.ActorStateTransitionID.Int64)])
			thenuteshapeDB.ActorStateTransitionID.Valid = true
		}

		// reindexing Start field
		if thenuteshapeDB.StartID.Int64 != 0 {
			thenuteshapeDB.StartID.Int64 = int64(BackRepoKingArthurShapeid_atBckpTime_newID[uint(thenuteshapeDB.StartID.Int64)])
			thenuteshapeDB.StartID.Valid = true
		}

		// reindexing End field
		if thenuteshapeDB.EndID.Int64 != 0 {
			thenuteshapeDB.EndID.Int64 = int64(BackRepoKingArthurShapeid_atBckpTime_newID[uint(thenuteshapeDB.EndID.Int64)])
			thenuteshapeDB.EndID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoTheNuteShape.db.Model(thenuteshapeDB).Updates(*thenuteshapeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoTheNuteShape.ResetReversePointers commits all staged instances of TheNuteShape to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, thenuteshape := range backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapePtr {
		backRepoTheNuteShape.ResetReversePointersInstance(backRepo, idx, thenuteshape)
	}

	return
}

func (backRepoTheNuteShape *BackRepoTheNuteShapeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, thenuteshape *models.TheNuteShape) (Error error) {

	// fetch matching thenuteshapeDB
	if thenuteshapeDB, ok := backRepoTheNuteShape.Map_TheNuteShapeDBID_TheNuteShapeDB[idx]; ok {
		_ = thenuteshapeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTheNuteShapeid_atBckpTime_newID map[uint]uint
