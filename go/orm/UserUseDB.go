// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/thomaspeugeot/thelongbuild/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_UserUse_sql sql.NullBool
var dummy_UserUse_time time.Duration
var dummy_UserUse_sort sort.Float64Slice

// UserUseAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model useruseAPI
type UserUseAPI struct {
	gorm.Model

	models.UserUse_WOP

	// encoding of pointers
	UserUsePointersEncoding UserUsePointersEncoding
}

// UserUsePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type UserUsePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field User is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	UserID sql.NullInt64
}

// UserUseDB describes a useruse in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model useruseDB
type UserUseDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field useruseDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	UserUsePointersEncoding
}

// UserUseDBs arrays useruseDBs
// swagger:response useruseDBsResponse
type UserUseDBs []UserUseDB

// UserUseDBResponse provides response
// swagger:response useruseDBResponse
type UserUseDBResponse struct {
	UserUseDB
}

// UserUseWOP is a UserUse without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type UserUseWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var UserUse_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoUserUseStruct struct {
	// stores UserUseDB according to their gorm ID
	Map_UserUseDBID_UserUseDB map[uint]*UserUseDB

	// stores UserUseDB ID according to UserUse address
	Map_UserUsePtr_UserUseDBID map[*models.UserUse]uint

	// stores UserUse according to their gorm ID
	Map_UserUseDBID_UserUsePtr map[uint]*models.UserUse

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoUserUse *BackRepoUserUseStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoUserUse.stage
	return
}

func (backRepoUserUse *BackRepoUserUseStruct) GetDB() *gorm.DB {
	return backRepoUserUse.db
}

// GetUserUseDBFromUserUsePtr is a handy function to access the back repo instance from the stage instance
func (backRepoUserUse *BackRepoUserUseStruct) GetUserUseDBFromUserUsePtr(useruse *models.UserUse) (useruseDB *UserUseDB) {
	id := backRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse]
	useruseDB = backRepoUserUse.Map_UserUseDBID_UserUseDB[id]
	return
}

// BackRepoUserUse.CommitPhaseOne commits all staged instances of UserUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUserUse *BackRepoUserUseStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for useruse := range stage.UserUses {
		backRepoUserUse.CommitPhaseOneInstance(useruse)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, useruse := range backRepoUserUse.Map_UserUseDBID_UserUsePtr {
		if _, ok := stage.UserUses[useruse]; !ok {
			backRepoUserUse.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoUserUse.CommitDeleteInstance commits deletion of UserUse to the BackRepo
func (backRepoUserUse *BackRepoUserUseStruct) CommitDeleteInstance(id uint) (Error error) {

	useruse := backRepoUserUse.Map_UserUseDBID_UserUsePtr[id]

	// useruse is not staged anymore, remove useruseDB
	useruseDB := backRepoUserUse.Map_UserUseDBID_UserUseDB[id]
	query := backRepoUserUse.db.Unscoped().Delete(&useruseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoUserUse.Map_UserUsePtr_UserUseDBID, useruse)
	delete(backRepoUserUse.Map_UserUseDBID_UserUsePtr, id)
	delete(backRepoUserUse.Map_UserUseDBID_UserUseDB, id)

	return
}

// BackRepoUserUse.CommitPhaseOneInstance commits useruse staged instances of UserUse to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUserUse *BackRepoUserUseStruct) CommitPhaseOneInstance(useruse *models.UserUse) (Error error) {

	// check if the useruse is not commited yet
	if _, ok := backRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse]; ok {
		return
	}

	// initiate useruse
	var useruseDB UserUseDB
	useruseDB.CopyBasicFieldsFromUserUse(useruse)

	query := backRepoUserUse.db.Create(&useruseDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse] = useruseDB.ID
	backRepoUserUse.Map_UserUseDBID_UserUsePtr[useruseDB.ID] = useruse
	backRepoUserUse.Map_UserUseDBID_UserUseDB[useruseDB.ID] = &useruseDB

	return
}

// BackRepoUserUse.CommitPhaseTwo commits all staged instances of UserUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUserUse *BackRepoUserUseStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, useruse := range backRepoUserUse.Map_UserUseDBID_UserUsePtr {
		backRepoUserUse.CommitPhaseTwoInstance(backRepo, idx, useruse)
	}

	return
}

// BackRepoUserUse.CommitPhaseTwoInstance commits {{structname }} of models.UserUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUserUse *BackRepoUserUseStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, useruse *models.UserUse) (Error error) {

	// fetch matching useruseDB
	if useruseDB, ok := backRepoUserUse.Map_UserUseDBID_UserUseDB[idx]; ok {

		useruseDB.CopyBasicFieldsFromUserUse(useruse)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value useruse.User translates to updating the useruse.UserID
		useruseDB.UserID.Valid = true // allow for a 0 value (nil association)
		if useruse.User != nil {
			if UserId, ok := backRepo.BackRepoUser.Map_UserPtr_UserDBID[useruse.User]; ok {
				useruseDB.UserID.Int64 = int64(UserId)
				useruseDB.UserID.Valid = true
			}
		} else {
			useruseDB.UserID.Int64 = 0
			useruseDB.UserID.Valid = true
		}

		query := backRepoUserUse.db.Save(&useruseDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown UserUse intance %s", useruse.Name))
		return err
	}

	return
}

// BackRepoUserUse.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoUserUse *BackRepoUserUseStruct) CheckoutPhaseOne() (Error error) {

	useruseDBArray := make([]UserUseDB, 0)
	query := backRepoUserUse.db.Find(&useruseDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	useruseInstancesToBeRemovedFromTheStage := make(map[*models.UserUse]any)
	for key, value := range backRepoUserUse.stage.UserUses {
		useruseInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, useruseDB := range useruseDBArray {
		backRepoUserUse.CheckoutPhaseOneInstance(&useruseDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		useruse, ok := backRepoUserUse.Map_UserUseDBID_UserUsePtr[useruseDB.ID]
		if ok {
			delete(useruseInstancesToBeRemovedFromTheStage, useruse)
		}
	}

	// remove from stage and back repo's 3 maps all useruses that are not in the checkout
	for useruse := range useruseInstancesToBeRemovedFromTheStage {
		useruse.Unstage(backRepoUserUse.GetStage())

		// remove instance from the back repo 3 maps
		useruseID := backRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse]
		delete(backRepoUserUse.Map_UserUsePtr_UserUseDBID, useruse)
		delete(backRepoUserUse.Map_UserUseDBID_UserUseDB, useruseID)
		delete(backRepoUserUse.Map_UserUseDBID_UserUsePtr, useruseID)
	}

	return
}

// CheckoutPhaseOneInstance takes a useruseDB that has been found in the DB, updates the backRepo and stages the
// models version of the useruseDB
func (backRepoUserUse *BackRepoUserUseStruct) CheckoutPhaseOneInstance(useruseDB *UserUseDB) (Error error) {

	useruse, ok := backRepoUserUse.Map_UserUseDBID_UserUsePtr[useruseDB.ID]
	if !ok {
		useruse = new(models.UserUse)

		backRepoUserUse.Map_UserUseDBID_UserUsePtr[useruseDB.ID] = useruse
		backRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse] = useruseDB.ID

		// append model store with the new element
		useruse.Name = useruseDB.Name_Data.String
		useruse.Stage(backRepoUserUse.GetStage())
	}
	useruseDB.CopyBasicFieldsToUserUse(useruse)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	useruse.Stage(backRepoUserUse.GetStage())

	// preserve pointer to useruseDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_UserUseDBID_UserUseDB)[useruseDB hold variable pointers
	useruseDB_Data := *useruseDB
	preservedPtrToUserUse := &useruseDB_Data
	backRepoUserUse.Map_UserUseDBID_UserUseDB[useruseDB.ID] = preservedPtrToUserUse

	return
}

// BackRepoUserUse.CheckoutPhaseTwo Checkouts all staged instances of UserUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUserUse *BackRepoUserUseStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, useruseDB := range backRepoUserUse.Map_UserUseDBID_UserUseDB {
		backRepoUserUse.CheckoutPhaseTwoInstance(backRepo, useruseDB)
	}
	return
}

// BackRepoUserUse.CheckoutPhaseTwoInstance Checkouts staged instances of UserUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUserUse *BackRepoUserUseStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, useruseDB *UserUseDB) (Error error) {

	useruse := backRepoUserUse.Map_UserUseDBID_UserUsePtr[useruseDB.ID]

	useruseDB.DecodePointers(backRepo, useruse)

	return
}

func (useruseDB *UserUseDB) DecodePointers(backRepo *BackRepoStruct, useruse *models.UserUse) {

	// insertion point for checkout of pointer encoding
	// User field
	useruse.User = nil
	if useruseDB.UserID.Int64 != 0 {
		useruse.User = backRepo.BackRepoUser.Map_UserDBID_UserPtr[uint(useruseDB.UserID.Int64)]
	}
	return
}

// CommitUserUse allows commit of a single useruse (if already staged)
func (backRepo *BackRepoStruct) CommitUserUse(useruse *models.UserUse) {
	backRepo.BackRepoUserUse.CommitPhaseOneInstance(useruse)
	if id, ok := backRepo.BackRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse]; ok {
		backRepo.BackRepoUserUse.CommitPhaseTwoInstance(backRepo, id, useruse)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitUserUse allows checkout of a single useruse (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutUserUse(useruse *models.UserUse) {
	// check if the useruse is staged
	if _, ok := backRepo.BackRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse]; ok {

		if id, ok := backRepo.BackRepoUserUse.Map_UserUsePtr_UserUseDBID[useruse]; ok {
			var useruseDB UserUseDB
			useruseDB.ID = id

			if err := backRepo.BackRepoUserUse.db.First(&useruseDB, id).Error; err != nil {
				log.Fatalln("CheckoutUserUse : Problem with getting object with id:", id)
			}
			backRepo.BackRepoUserUse.CheckoutPhaseOneInstance(&useruseDB)
			backRepo.BackRepoUserUse.CheckoutPhaseTwoInstance(backRepo, &useruseDB)
		}
	}
}

// CopyBasicFieldsFromUserUse
func (useruseDB *UserUseDB) CopyBasicFieldsFromUserUse(useruse *models.UserUse) {
	// insertion point for fields commit

	useruseDB.Name_Data.String = useruse.Name
	useruseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromUserUse_WOP
func (useruseDB *UserUseDB) CopyBasicFieldsFromUserUse_WOP(useruse *models.UserUse_WOP) {
	// insertion point for fields commit

	useruseDB.Name_Data.String = useruse.Name
	useruseDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromUserUseWOP
func (useruseDB *UserUseDB) CopyBasicFieldsFromUserUseWOP(useruse *UserUseWOP) {
	// insertion point for fields commit

	useruseDB.Name_Data.String = useruse.Name
	useruseDB.Name_Data.Valid = true
}

// CopyBasicFieldsToUserUse
func (useruseDB *UserUseDB) CopyBasicFieldsToUserUse(useruse *models.UserUse) {
	// insertion point for checkout of basic fields (back repo to stage)
	useruse.Name = useruseDB.Name_Data.String
}

// CopyBasicFieldsToUserUse_WOP
func (useruseDB *UserUseDB) CopyBasicFieldsToUserUse_WOP(useruse *models.UserUse_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	useruse.Name = useruseDB.Name_Data.String
}

// CopyBasicFieldsToUserUseWOP
func (useruseDB *UserUseDB) CopyBasicFieldsToUserUseWOP(useruse *UserUseWOP) {
	useruse.ID = int(useruseDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	useruse.Name = useruseDB.Name_Data.String
}

// Backup generates a json file from a slice of all UserUseDB instances in the backrepo
func (backRepoUserUse *BackRepoUserUseStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "UserUseDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UserUseDB, 0)
	for _, useruseDB := range backRepoUserUse.Map_UserUseDBID_UserUseDB {
		forBackup = append(forBackup, useruseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json UserUse ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json UserUse file", err.Error())
	}
}

// Backup generates a json file from a slice of all UserUseDB instances in the backrepo
func (backRepoUserUse *BackRepoUserUseStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UserUseDB, 0)
	for _, useruseDB := range backRepoUserUse.Map_UserUseDBID_UserUseDB {
		forBackup = append(forBackup, useruseDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("UserUse")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&UserUse_Fields, -1)
	for _, useruseDB := range forBackup {

		var useruseWOP UserUseWOP
		useruseDB.CopyBasicFieldsToUserUseWOP(&useruseWOP)

		row := sh.AddRow()
		row.WriteStruct(&useruseWOP, -1)
	}
}

// RestoreXL from the "UserUse" sheet all UserUseDB instances
func (backRepoUserUse *BackRepoUserUseStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoUserUseid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["UserUse"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoUserUse.rowVisitorUserUse)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoUserUse *BackRepoUserUseStruct) rowVisitorUserUse(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var useruseWOP UserUseWOP
		row.ReadStruct(&useruseWOP)

		// add the unmarshalled struct to the stage
		useruseDB := new(UserUseDB)
		useruseDB.CopyBasicFieldsFromUserUseWOP(&useruseWOP)

		useruseDB_ID_atBackupTime := useruseDB.ID
		useruseDB.ID = 0
		query := backRepoUserUse.db.Create(useruseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoUserUse.Map_UserUseDBID_UserUseDB[useruseDB.ID] = useruseDB
		BackRepoUserUseid_atBckpTime_newID[useruseDB_ID_atBackupTime] = useruseDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "UserUseDB.json" in dirPath that stores an array
// of UserUseDB and stores it in the database
// the map BackRepoUserUseid_atBckpTime_newID is updated accordingly
func (backRepoUserUse *BackRepoUserUseStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoUserUseid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "UserUseDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json UserUse file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*UserUseDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_UserUseDBID_UserUseDB
	for _, useruseDB := range forRestore {

		useruseDB_ID_atBackupTime := useruseDB.ID
		useruseDB.ID = 0
		query := backRepoUserUse.db.Create(useruseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoUserUse.Map_UserUseDBID_UserUseDB[useruseDB.ID] = useruseDB
		BackRepoUserUseid_atBckpTime_newID[useruseDB_ID_atBackupTime] = useruseDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json UserUse file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<UserUse>id_atBckpTime_newID
// to compute new index
func (backRepoUserUse *BackRepoUserUseStruct) RestorePhaseTwo() {

	for _, useruseDB := range backRepoUserUse.Map_UserUseDBID_UserUseDB {

		// next line of code is to avert unused variable compilation error
		_ = useruseDB

		// insertion point for reindexing pointers encoding
		// reindexing User field
		if useruseDB.UserID.Int64 != 0 {
			useruseDB.UserID.Int64 = int64(BackRepoUserid_atBckpTime_newID[uint(useruseDB.UserID.Int64)])
			useruseDB.UserID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoUserUse.db.Model(useruseDB).Updates(*useruseDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoUserUse.ResetReversePointers commits all staged instances of UserUse to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUserUse *BackRepoUserUseStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, useruse := range backRepoUserUse.Map_UserUseDBID_UserUsePtr {
		backRepoUserUse.ResetReversePointersInstance(backRepo, idx, useruse)
	}

	return
}

func (backRepoUserUse *BackRepoUserUseStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, useruse *models.UserUse) (Error error) {

	// fetch matching useruseDB
	if useruseDB, ok := backRepoUserUse.Map_UserUseDBID_UserUseDB[idx]; ok {
		_ = useruseDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoUserUseid_atBckpTime_newID map[uint]uint
